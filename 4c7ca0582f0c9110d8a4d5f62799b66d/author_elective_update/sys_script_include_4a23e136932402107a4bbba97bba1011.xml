<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>public</access>
        <active>true</active>
        <api_name>x_644088_integrati.QRUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>DevTools 2024</description>
        <name>QRUtil</name>
        <script><![CDATA[var QRUtil = Class.create();


QRUtil.PATTERN_POSITION_TABLE = [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
];

QRUtil.G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
QRUtil.G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
QRUtil.G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1),

    QRUtil.getBCHTypeInfo = function(data) {
        var d = data << 10;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
            d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15)));
        }
        return ((data << 10) | d) ^ QRUtil.G15_MASK;
    };

QRUtil.getBCHTypeNumber = function(data) {
    var d = data << 12;
    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
        d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18)));
    }
    return (data << 12) | d;
};

QRUtil.getBCHDigit = function(data) {

    var digit = 0;

    while (data != 0) {
        digit++;
        data >>>= 1;
    }

    return digit;
};

QRUtil.getPatternPosition = function(typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
};

QRUtil.getMask = function(maskPattern, i, j) {

    switch (maskPattern) {

        case QRMaskPattern.PATTERN000:
            return (i + j) % 2 == 0;
        case QRMaskPattern.PATTERN001:
            return i % 2 == 0;
        case QRMaskPattern.PATTERN010:
            return j % 3 == 0;
        case QRMaskPattern.PATTERN011:
            return (i + j) % 3 == 0;
        case QRMaskPattern.PATTERN100:
            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
        case QRMaskPattern.PATTERN101:
            return (i * j) % 2 + (i * j) % 3 == 0;
        case QRMaskPattern.PATTERN110:
            return ((i * j) % 2 + (i * j) % 3) % 2 == 0;
        case QRMaskPattern.PATTERN111:
            return ((i * j) % 3 + (i + j) % 2) % 2 == 0;

        default:
            throw new Error("bad maskPattern:" + maskPattern);
    }
};

QRUtil.getErrorCorrectPolynomial = function(errorCorrectLength) {

    var a = new QRPolynomial([1], 0);

    for (var i = 0; i < errorCorrectLength; i++) {
        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
    }

    return a;
};

QRUtil.getLengthInBits = function(mode, type) {

    if (1 <= type && type < 10) {

        // 1 - 9

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 10;
            case QRMode.MODE_ALPHA_NUM:
                return 9;
            case QRMode.MODE_8BIT_BYTE:
                return 8;
            case QRMode.MODE_KANJI:
                return 8;
            default:
                throw new Error("mode:" + mode);
        }

    } else if (type < 27) {

        // 10 - 26

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 12;
            case QRMode.MODE_ALPHA_NUM:
                return 11;
            case QRMode.MODE_8BIT_BYTE:
                return 16;
            case QRMode.MODE_KANJI:
                return 10;
            default:
                throw new Error("mode:" + mode);
        }

    } else if (type < 41) {

        // 27 - 40

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 14;
            case QRMode.MODE_ALPHA_NUM:
                return 13;
            case QRMode.MODE_8BIT_BYTE:
                return 16;
            case QRMode.MODE_KANJI:
                return 12;
            default:
                throw new Error("mode:" + mode);
        }

    } else {
        throw new Error("type:" + type);
    }
};

QRUtil.getLostPoint = function(qrCode) {

    var moduleCount = qrCode.getModuleCount();

    var lostPoint = 0;

    // LEVEL1

    for (var row = 0; row < moduleCount; row++) {

        for (var col = 0; col < moduleCount; col++) {

            var sameCount = 0;
            var dark = qrCode.isDark(row, col);

            for (var r = -1; r <= 1; r++) {

                if (row + r < 0 || moduleCount <= row + r) {
                    continue;
                }

                for (var c = -1; c <= 1; c++) {

                    if (col + c < 0 || moduleCount <= col + c) {
                        continue;
                    }

                    if (r == 0 && c == 0) {
                        continue;
                    }

                    if (dark == qrCode.isDark(row + r, col + c)) {
                        sameCount++;
                    }
                }
            }

            if (sameCount > 5) {
                lostPoint += (3 + sameCount - 5);
            }
        }
    }

    // LEVEL2

    for (var row = 0; row < moduleCount - 1; row++) {
        for (var col = 0; col < moduleCount - 1; col++) {
            var count = 0;
            if (qrCode.isDark(row, col)) count++;
            if (qrCode.isDark(row + 1, col)) count++;
            if (qrCode.isDark(row, col + 1)) count++;
            if (qrCode.isDark(row + 1, col + 1)) count++;
            if (count == 0 || count == 4) {
                lostPoint += 3;
            }
        }
    }

    // LEVEL3

    for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount - 6; col++) {
            if (qrCode.isDark(row, col) &&
                !qrCode.isDark(row, col + 1) &&
                qrCode.isDark(row, col + 2) &&
                qrCode.isDark(row, col + 3) &&
                qrCode.isDark(row, col + 4) &&
                !qrCode.isDark(row, col + 5) &&
                qrCode.isDark(row, col + 6)) {
                lostPoint += 40;
            }
        }
    }

    for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount - 6; row++) {
            if (qrCode.isDark(row, col) &&
                !qrCode.isDark(row + 1, col) &&
                qrCode.isDark(row + 2, col) &&
                qrCode.isDark(row + 3, col) &&
                qrCode.isDark(row + 4, col) &&
                !qrCode.isDark(row + 5, col) &&
                qrCode.isDark(row + 6, col)) {
                lostPoint += 40;
            }
        }
    }

    // LEVEL4

    var darkCount = 0;

    for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount; row++) {
            if (qrCode.isDark(row, col)) {
                darkCount++;
            }
        }
    }

    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;

    return lostPoint;
};

QRUtil.prototype = {
    initialize: function() {},

    type: 'QRUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-27 21:20:03</sys_created_on>
        <sys_id>4a23e136932402107a4bbba97bba1011</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>QRUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_script_include_4a23e136932402107a4bbba97bba1011</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-27 21:20:07</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</application>
        <file_path/>
        <instance_id>1334035bdbce315492f5684e13961986</instance_id>
        <instance_name>dev196711</instance_name>
        <name>sys_script_include_4a23e136932402107a4bbba97bba1011</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_644088_integrati.QRUtil&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;DevTools 2024&lt;/description&gt;&lt;name&gt;QRUtil&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var QRUtil = Class.create();


QRUtil.PATTERN_POSITION_TABLE = [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
];

QRUtil.G15 = (1 &lt;&lt; 10) | (1 &lt;&lt; 8) | (1 &lt;&lt; 5) | (1 &lt;&lt; 4) | (1 &lt;&lt; 2) | (1 &lt;&lt; 1) | (1 &lt;&lt; 0);
QRUtil.G18 = (1 &lt;&lt; 12) | (1 &lt;&lt; 11) | (1 &lt;&lt; 10) | (1 &lt;&lt; 9) | (1 &lt;&lt; 8) | (1 &lt;&lt; 5) | (1 &lt;&lt; 2) | (1 &lt;&lt; 0);
QRUtil.G15_MASK = (1 &lt;&lt; 14) | (1 &lt;&lt; 12) | (1 &lt;&lt; 10) | (1 &lt;&lt; 4) | (1 &lt;&lt; 1),

    QRUtil.getBCHTypeInfo = function(data) {
        var d = data &lt;&lt; 10;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) &gt;= 0) {
            d ^= (QRUtil.G15 &lt;&lt; (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15)));
        }
        return ((data &lt;&lt; 10) | d) ^ QRUtil.G15_MASK;
    };

QRUtil.getBCHTypeNumber = function(data) {
    var d = data &lt;&lt; 12;
    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) &gt;= 0) {
        d ^= (QRUtil.G18 &lt;&lt; (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18)));
    }
    return (data &lt;&lt; 12) | d;
};

QRUtil.getBCHDigit = function(data) {

    var digit = 0;

    while (data != 0) {
        digit++;
        data &gt;&gt;&gt;= 1;
    }

    return digit;
};

QRUtil.getPatternPosition = function(typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
};

QRUtil.getMask = function(maskPattern, i, j) {

    switch (maskPattern) {

        case QRMaskPattern.PATTERN000:
            return (i + j) % 2 == 0;
        case QRMaskPattern.PATTERN001:
            return i % 2 == 0;
        case QRMaskPattern.PATTERN010:
            return j % 3 == 0;
        case QRMaskPattern.PATTERN011:
            return (i + j) % 3 == 0;
        case QRMaskPattern.PATTERN100:
            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
        case QRMaskPattern.PATTERN101:
            return (i * j) % 2 + (i * j) % 3 == 0;
        case QRMaskPattern.PATTERN110:
            return ((i * j) % 2 + (i * j) % 3) % 2 == 0;
        case QRMaskPattern.PATTERN111:
            return ((i * j) % 3 + (i + j) % 2) % 2 == 0;

        default:
            throw new Error("bad maskPattern:" + maskPattern);
    }
};

QRUtil.getErrorCorrectPolynomial = function(errorCorrectLength) {

    var a = new QRPolynomial([1], 0);

    for (var i = 0; i &lt; errorCorrectLength; i++) {
        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
    }

    return a;
};

QRUtil.getLengthInBits = function(mode, type) {

    if (1 &lt;= type &amp;&amp; type &lt; 10) {

        // 1 - 9

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 10;
            case QRMode.MODE_ALPHA_NUM:
                return 9;
            case QRMode.MODE_8BIT_BYTE:
                return 8;
            case QRMode.MODE_KANJI:
                return 8;
            default:
                throw new Error("mode:" + mode);
        }

    } else if (type &lt; 27) {

        // 10 - 26

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 12;
            case QRMode.MODE_ALPHA_NUM:
                return 11;
            case QRMode.MODE_8BIT_BYTE:
                return 16;
            case QRMode.MODE_KANJI:
                return 10;
            default:
                throw new Error("mode:" + mode);
        }

    } else if (type &lt; 41) {

        // 27 - 40

        switch (mode) {
            case QRMode.MODE_NUMBER:
                return 14;
            case QRMode.MODE_ALPHA_NUM:
                return 13;
            case QRMode.MODE_8BIT_BYTE:
                return 16;
            case QRMode.MODE_KANJI:
                return 12;
            default:
                throw new Error("mode:" + mode);
        }

    } else {
        throw new Error("type:" + type);
    }
};

QRUtil.getLostPoint = function(qrCode) {

    var moduleCount = qrCode.getModuleCount();

    var lostPoint = 0;

    // LEVEL1

    for (var row = 0; row &lt; moduleCount; row++) {

        for (var col = 0; col &lt; moduleCount; col++) {

            var sameCount = 0;
            var dark = qrCode.isDark(row, col);

            for (var r = -1; r &lt;= 1; r++) {

                if (row + r &lt; 0 || moduleCount &lt;= row + r) {
                    continue;
                }

                for (var c = -1; c &lt;= 1; c++) {

                    if (col + c &lt; 0 || moduleCount &lt;= col + c) {
                        continue;
                    }

                    if (r == 0 &amp;&amp; c == 0) {
                        continue;
                    }

                    if (dark == qrCode.isDark(row + r, col + c)) {
                        sameCount++;
                    }
                }
            }

            if (sameCount &gt; 5) {
                lostPoint += (3 + sameCount - 5);
            }
        }
    }

    // LEVEL2

    for (var row = 0; row &lt; moduleCount - 1; row++) {
        for (var col = 0; col &lt; moduleCount - 1; col++) {
            var count = 0;
            if (qrCode.isDark(row, col)) count++;
            if (qrCode.isDark(row + 1, col)) count++;
            if (qrCode.isDark(row, col + 1)) count++;
            if (qrCode.isDark(row + 1, col + 1)) count++;
            if (count == 0 || count == 4) {
                lostPoint += 3;
            }
        }
    }

    // LEVEL3

    for (var row = 0; row &lt; moduleCount; row++) {
        for (var col = 0; col &lt; moduleCount - 6; col++) {
            if (qrCode.isDark(row, col) &amp;&amp;
                !qrCode.isDark(row, col + 1) &amp;&amp;
                qrCode.isDark(row, col + 2) &amp;&amp;
                qrCode.isDark(row, col + 3) &amp;&amp;
                qrCode.isDark(row, col + 4) &amp;&amp;
                !qrCode.isDark(row, col + 5) &amp;&amp;
                qrCode.isDark(row, col + 6)) {
                lostPoint += 40;
            }
        }
    }

    for (var col = 0; col &lt; moduleCount; col++) {
        for (var row = 0; row &lt; moduleCount - 6; row++) {
            if (qrCode.isDark(row, col) &amp;&amp;
                !qrCode.isDark(row + 1, col) &amp;&amp;
                qrCode.isDark(row + 2, col) &amp;&amp;
                qrCode.isDark(row + 3, col) &amp;&amp;
                qrCode.isDark(row + 4, col) &amp;&amp;
                !qrCode.isDark(row + 5, col) &amp;&amp;
                qrCode.isDark(row + 6, col)) {
                lostPoint += 40;
            }
        }
    }

    // LEVEL4

    var darkCount = 0;

    for (var col = 0; col &lt; moduleCount; col++) {
        for (var row = 0; row &lt; moduleCount; row++) {
            if (qrCode.isDark(row, col)) {
                darkCount++;
            }
        }
    }

    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;

    return lostPoint;
};

QRUtil.prototype = {
    initialize: function() {},

    type: 'QRUtil'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-02-27 21:20:03&lt;/sys_created_on&gt;&lt;sys_id&gt;4a23e136932402107a4bbba97bba1011&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;QRUtil&lt;/sys_name&gt;&lt;sys_package display_value="Integrations 2022" source="x_644088_integrati"&gt;4c7ca0582f0c9110d8a4d5f62799b66d&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Integrations 2022"&gt;4c7ca0582f0c9110d8a4d5f62799b66d&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_4a23e136932402107a4bbba97bba1011&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-02-27 21:20:07&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-667584246</payload_hash>
        <record_name>QRUtil</record_name>
        <reverted_from/>
        <source>c2c7a01a937331107a4bbba97bba104e</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-27 21:20:07</sys_created_on>
        <sys_id>60346936932402107a4bbba97bba1031</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18dec706e500000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-27 21:20:07</sys_updated_on>
        <type>Script Include</type>
        <update_guid>6834693644240210e41df70c8f816b30</update_guid>
        <update_guid_history>6834693644240210e41df70c8f816b30:-667584246,e72421b2c8240210f67092b32beaa099:-65174725</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-28 00:21:50</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>5b7c9234d86347b38b85c45d754ee731</sys_id>
        <sys_metadata>4a23e136932402107a4bbba97bba1011</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>QRUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_scope_delete display_value="">4b9f281809d34184adaf9b4672ff2f90</sys_scope_delete>
        <sys_update_name>sys_script_include_4a23e136932402107a4bbba97bba1011</sys_update_name>
        <sys_update_version display_value="sys_script_include_4a23e136932402107a4bbba97bba1011">60346936932402107a4bbba97bba1031</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-28 00:21:50</sys_updated_on>
    </sys_metadata_delete>
</record_update>
