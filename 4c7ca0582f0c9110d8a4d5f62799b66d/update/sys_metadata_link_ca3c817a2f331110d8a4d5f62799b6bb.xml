<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0ef1f659b3403300f224a72256a8dc5e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SPMUtilsFoundationImpl&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.SPMUtils. Provides SPM Foundation functionality.&lt;/description&gt;
        &lt;name&gt;SPMUtilsFoundationImpl&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SPMUtilsFoundationImpl = Class.create();
SPMUtilsFoundationImpl.prototype = {
initialize: function() {
		this.PORTFOLIO_ADMIN = 'portfolio_admin';
		this.PORTFOLIO_EDITOR = 'portfolio_editor';
		this.PORTFOLIO_VIEWER = 'portfolio_viewer';
		this.SERVICE_ADMIN = 'service_admin';
		this.SERVICE_EDITOR = 'service_editor';
		this.SERVICE_VIEWER = 'service_viewer';
		this.SERVICE_AUTHOR = 'service_author';

		this.CMDB_CI_SERVICE = 'cmdb_ci_service';
		this.CMDB_CI_BUSINESS_SERVICE = 'cmdb_ci_service_business';
		this.CMDB_CI_TECHNICAL_SERVICE = 'cmdb_ci_service_technical';
		this.SERVICE_OFFERING = 'service_offering';
		this.SERVICE_OFFERING_COMMITMENT = 'service_offering_commitment';

		this.DRAFT = 'draft';
		this.PUBLISHED = 'published';
		this.PUBLISHING = 'publishing';

		this.currentUserId = gs.getUserID();
    },
		
	/* 
	 * Returns a boolean speciying in the current user is owner, delegate of the offering.
	 * Will return true even if the current user is a owner, delegate of parent service or an owner of a node in the hierarchy.
	 * Else returns false.
	 */ 
	checkOfferingAuthorization: function(offeringGR) {
		var isNew = offeringGR.isNewRecord();
		var isOwner = offeringGR.owned_by.getValue() === this.currentUserId;
		var isDelegate = offeringGR.service_owner_delegate.getValue() === this.currentUserId;
		var isCreator = offeringGR.sys_created_by.getValue() === gs.getUserName();
		
		if (gs.hasRole(this.SERVICE_ADMIN))
			return true;
		
		if (gs.hasRole(this.SERVICE_AUTHOR) &amp;&amp; (isNew || isCreator))
			return true;
		
		if (gs.hasRole(this.SERVICE_EDITOR) &amp;&amp; (isOwner || isDelegate))
			return true;
		else
			return this.checkServiceAuthorization(offeringGR.parent);
		
		return false;
    },

	/* 
	 * Returns true if the current user is a owner, delegate of a service or an owner of a node in the hierarchy.
	 * Else returns false.
	 */ 
	checkServiceAuthorization: function(serviceGR) {
		var isNew = serviceGR.isNewRecord();
		var isOwner = serviceGR.owned_by.getValue() === this.currentUserId;
		var isDelegate = serviceGR.service_owner_delegate.getValue() === this.currentUserId;
		var isCreator = serviceGR.sys_created_by.getValue() === gs.getUserName();
		
		if (gs.hasRole(this.SERVICE_ADMIN))
			return true;
		
		if (gs.hasRole(this.SERVICE_AUTHOR) &amp;&amp; (isNew || isCreator))
			return true;
		
		if (gs.hasRole(this.SERVICE_EDITOR) &amp;&amp; (isOwner || isDelegate))
			return true;
		else
			return this.checkTaxonomyNodeAuthorization(serviceGR.spm_taxonomy_node);
		
		return false;
    },
	
	checkTaxonomyNodeAuthorization: function(taxonomyGr) {
		if (gs.hasRole(this.SERVICE_EDITOR)) {
			var isRoot = false;
			while (!isRoot) {
				if (taxonomyGr.taxonomy_node_owner.getValue() === this.currentUserId)
					return true;

				var parentNode = new GlideRecord('spm_taxonomy_node');
				if (parentNode.get(taxonomyGr.parent.getValue()))
					taxonomyGr = parentNode;
				else
					isRoot = true;
			}
		}
		return this.checkPortfolioAuthorization(taxonomyGr.spm_service_portfolio);

	},
	
	checkPortfolioAuthorization: function(portfolioGr) {
			var isPortfolioOwner = portfolioGr.service_portfolio_owner.getValue() === this.currentUserId;
			return gs.hasRole(this.PORTFOLIO_ADMIN) || (gs.hasRole(this.PORTFOLIO_EDITOR) &amp;&amp; isPortfolioOwner);
	},
	
	/* 
	 * Given the type of a node and it's unique id, it returns 
	 * if the current user is in the ownership hierarchy of the node
	 */ 
	checkNodeOwnership: function(type, sys_id) {
		if (type == "taxonomy" || type == "leaf") {
			var taxonomy = new GlideRecord("spm_taxonomy_node");
			taxonomy.get(sys_id);
			return this.checkTaxonomyNodeAuthorization(taxonomy);
		} else if (type == "service") {
			var serviceGR = new GlideRecord("cmdb_ci_service");
			serviceGR.get(sys_id);
			return this.checkServiceAuthorization(serviceGR);
		} else if (type == "offering") {
			var offeringGR = new GlideRecord("service_offering");
			offeringGR.get(sys_id);
			return this.checkOfferingAuthorization(offeringGR);
		}
	},
	
	/*
	 * Returns true if the service is supported in portfolio
	 */
	isValidService: function(className) {
		if (className == this.CMDB_CI_SERVICE || className == this.CMDB_CI_BUSINESS_SERVICE || className == this.CMDB_CI_TECHNICAL_SERVICE)
			return true;
		
		return false;
	},
	
	/*
	 * Returns true if the service is supported in portfolio
	 */
	isValidServiceOrOffering: function(className) {
		if (className == this.SERVICE_OFFERING || this.isValidService(className))
			return true;
		
		return false;
	},
	
	/*
	 * isServicePublished
	 * returns true if service or offering is Published
	 */
	isServicePublished: function(service) {
		if (service.state == '' || service.state == this.PUBLISHED)
			return true;
		return false;
	},
	
	/*
	 * isServiceNew
	 * returns true if service or offering is in draft state without published
	 * item reference
	 */
	isServiceNew: function(service) {
		if ((service.state == '' || service.state == this.DRAFT) &amp;&amp; service.published_ref == '')
			return true;
		return false;
	},
	
	/*
	 * didServicePublish
	 * returns true if the service became published from draft state
	 */
	didServicePublish: function(current, previous) {
		if ((previous.state == this.DRAFT || previous.state == this.PUBLISHING) &amp;&amp; current.state == this.PUBLISHED &amp;&amp; 
			(previous.published_ref == current.sys_id || previous.published_ref == ''))
			return true;
		return false;
	},
	
	/*
	 * callEvent
	 * allows global SPM events to be called from scoped apps
	 */
	callEvent: function(eventName, current, param1, param2, queue) {
		gs.eventQueue(eventName, current, param1, param2, queue);
	},
	
	/*
	 * hasCommitments
	 * returns true if record has any commitments in the commitments table
	 */
	hasCommitments: function(recordId){
		var commitments = new GlideRecord(this.SERVICE_OFFERING_COMMITMENT);
		commitments.addQuery('service_offering', recordId);
		commitments.query();
		
		return (commitments.getRowCount() &gt; 0);
	},
	
    type: 'SPMUtilsFoundationImpl'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-07 00:57:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0ef1f659b3403300f224a72256a8dc5e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;21&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SPMUtilsFoundationImpl&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Portfolio Management Foundation" source="com.snc.service_portfolio"&gt;5692894b6d6620100acb70b3534330f5&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0ef1f659b3403300f224a72256a8dc5e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-10 17:00:37&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6001&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:59</sys_created_on>
        <sys_id>ca3c817a2f331110d8a4d5f62799b6bb</sys_id>
        <sys_name>SPMUtilsFoundationImpl</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_ca3c817a2f331110d8a4d5f62799b6bb</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
