<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7da474b207011010220b0a701ad30051</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Static helper methods used in NLP Workbench&lt;/description&gt;
        &lt;name&gt;NLUHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUHelper = Class.create();

(function() {

    NLUHelper.objValues = function(obj) {
        return Object.keys(obj).map(function(key) {
            return obj[key];
        });
    };

    NLUHelper.isEmpty = function(obj) {
        if (!obj || obj === '')
            return true;
        else if (typeof obj === "object")
            return 0 === Object.keys(obj).length;
        else if (Array.isArray(obj))
            return 0 === obj.length;
        return false;
    };

    NLUHelper.wordToRegex = function(word) {
        return '\\b(?i)' + word + '\\b';
    };

    NLUHelper.getIntValue = function(val) {
        return (val ? parseInt(val, 10) : 0);
    };

    NLUHelper.cloneDeep = function(obj) {
        return JSON.parse(JSON.stringify(obj));
    };

    NLUHelper.extend = function(dest, src) {
        if (!src || NLUHelper.isEmpty(src)) return dest;
        for (var key in src) {
            dest[key] = src[key];
        }
        return dest;
    };

    NLUHelper.compareArrays = function(arr1, arr2) {
        if (arr1.length != arr2.length) {
            return false;
        } else {
            for (var i in arr1) {
                if (arr2.indexOf(arr1[i]) === -1) {
                    return false;
                }
            }
        }
        return true;
    };

    NLUHelper.getLatestDate = function(date1, date2) {
        if (!date2) return date1;
        if (!date1 || (date2.getNumericValue() &gt; date1.getNumericValue())) {
            return date2;
        }
        return date1;
    };

    NLUHelper.toTimezoneAdjustedTimestamp = function(glideDateTime) {
        if (gs.nil(glideDateTime)) return;
        return (parseInt(glideDateTime.getNumericValue()) + parseInt(glideDateTime.getTZOffset()));
    };

    NLUHelper.getErrorsFromResponse = function(response) {
        var messages = response.messages;
        var errors = [];
        var fields = {
            name: 'name',
            sys_id: 'sys_id',
            displayName: 'display_name'
        };
        messages.forEach(function(record) {
            var at, type, path, modelName;
            var intentName, utterance, unknown, entityObj, entityName;
            var modelObj, nluModel, intentObj, utteranceObj, intentGr, entityGr;
            var errorObj = {};
            if (record.type === 'ERROR') {
                if (record.fields) {
                    gs.debug('Invalid json : ' + record.at);
                    gs.debug('Invalid json fields : ' + record.fields);
                }
                if (record.at) {
                    at = record.at;
                    path = at.split(':');
                    type = path[0];
                    path = path[1].split('.');
                    modelName = path[0];
                    if (type === 'intent') {
                        intentName = path[1];
                    } else if (type === 'entity') {
                        entityName = path[path.length - 1];
                        if (path.length == 3) {
                            intentName = path[1];
                        }
                    }

                    modelObj = NLUSystemUtil.getObjectFromGR(
                        NLUModel.getGRByName(modelName), fields);
                    modelObj.name = modelObj.displayName;

                    nluModel = new NLUModel(modelObj.sys_id);
                    intentGr = intentName &amp;&amp; nluModel.getIntents('name=' + intentName);
                    intentObj = intentGr.next() &amp;&amp; NLUSystemUtil.getObjectFromGR(intentGr, fields);

                    entityGr = entityName &amp;&amp; nluModel.getEntities('name=' + entityName);
                    entityObj = entityGr.next() &amp;&amp; NLUSystemUtil.getObjectFromGR(entityGr, fields);

                    errorObj = {
                        message: gs.getMessage(record.messageKey, record.replacements),
                        type: type,
                        model: modelObj,
                        intent: intentObj,
                        entity: entityObj,
                        originalMessage: record.message
                    };
                    if (record.sample) {
                        utterance = record.sample.value;
                        unknown = record.sample.tokens;
                        errorObj.utterance = utterance;
                        errorObj.unknown = unknown;
                    }
                    errors.push(errorObj);
                }
            }
        });

        return errors;
    };

    NLUHelper.prototype = {
        type: 'NLUHelper',
        initialize: function() {}
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-05-31 17:06:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7da474b207011010220b0a701ad30051&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;31&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7da474b207011010220b0a701ad30051&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-02 04:46:12&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4599&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:50</sys_created_on>
        <sys_id>ccec0d3e2f331110d8a4d5f62799b622</sys_id>
        <sys_name>NLUHelper</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_ccec0d3e2f331110d8a4d5f62799b622</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
