<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>736974ed0ad33702009e9534995ce4af</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ImportSetUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ImportSetUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ImportSetUtil = Class.create();

ImportSetUtil.prototype = {
  initialize : function() {

  },

  copyFields : function (source_table, target_table, extends_table) {
    var tgr = new GlideRecord(target_table);
    tgr.initialize();

    var attrs = new Packages.java.util.HashMap();

    var fields = tgr.getFields();
    for (var i = 0; i &lt; fields.size(); i++) {
      var field = fields.get(i);
      var type = field.getED().getInternalType();
      var fname = field.getName();
      if (fname.startsWith('sys_'))
        continue;

      var dgr2 = new GlideRecord("sys_dictionary");
      dgr2.addQuery("name", source_table);
      dgr2.addQuery("element", fname);
      dgr2.query();
      if (!dgr2.next()) {
        if(fname.indexOf('u_') != 0)
		  fname = 'u_' + fname;

        var ca = new GlideColumnAttributes(fname);
        ca.setType("string");
        ca.setUsePrefix(false);
        attrs.put(fname, ca);
      }
    }

    var tc = new GlideTableCreator(source_table, source_table);
    tc.setColumnAttributes(attrs);
    if(typeof extends_table != 'undefined')
      	tc.setExtends(extends_table);
    tc.setOverrideUpdate(true);
    tc.update();
  },

  loadFromXML : function (xpath_root_node, xmlDoc, tableName) {
    var attrs = new Packages.java.util.HashMap();
    var nodeList = xmlDoc.getNodes(xpath_root_node);
    this._iterateNodeList(nodeList, null, attrs, null, tableName);

    // create or update the table schema
    var tc = new GlideTableCreator(tableName, tableName);
    tc.setColumnAttributes(attrs);
    tc.update();

    // second pass insert row
    var gr = new GlideRecord(tableName);
    gr.initialize();
    var nodeList = xmlDoc.getNodes(xpath_root_node);
    this._iterateNodeList(nodeList, null, null, gr, tableName);
    gr.insert();
  },

  _iterateNodeList : function (nodeList, parentName, attrs, gr, tableName) {
    var nodeCount = nodeList.getLength();

    for (var i = 0; i &lt; nodeCount; i++) {
      var node = nodeList.item(i);

      if (node.getNodeType() != Packages.org.w3c.dom.Node.ELEMENT_NODE) {
        continue;
      }

      var nodeName = GlideXMLUtil.getNodeNameNS(node);
      if (parentName != null) {
        nodeName = parentName + "_" + nodeName;
      }

      var nodeValue = this._getNodeValue(node, attrs, gr, tableName);
      if (nodeValue == null) {
        continue;
      }

	  if (attrs == null &amp;&amp; gr != null) {
	  	var ca = new GlideColumnAttributes(nodeName);
		ca.setUsePrefix(false);
		// set gr values
		gr[ca.getDBName()] = nodeValue;
		continue;
	  }

	  attrs.put(nodeName, nodeValue);
    }

	  if(attrs != null)
	    attrs = this._filterExistingColumnAttributes(attrs, tableName);
  },

  _filterExistingColumnAttributes:function (attrs, tableName) {
      //stores the existing column names to be exluded from attrs later
	  var existingAttributes = new Packages.java.util.ArrayList();

	  //stores the column names provided by a user
	  var inputAttributes = new Packages.java.util.ArrayList();
	  var keys = '';

	  var keysIterator = attrs.keySet().iterator();
	  while(keysIterator.hasNext()) {
		var key = keysIterator.next();
		keys += key + ',';
		inputAttributes.add(key);
	  }

	  if(GlideStringUtil.nil(keys))
		return;

	  //query for existing column names
	  var gr = new GlideRecord("sys_dictionary");
	  gr.addQuery("name", tableName);
	  gr.addQuery("element", "IN", keys);
	  gr.query();
	  while (gr.next())
		  existingAttributes.add(gr.getValue("element"));

      //for each column name provided by a user remove from attrs the one
      //which already exists, create a GlideColumnAttributes object
      //for a new one
	  for(var i=0; i&lt;inputAttributes.size(); i++) {
	    var attrName = inputAttributes.get(i);
		if(existingAttributes.contains(attrName))
		  attrs.remove(attrName);
		else {
		  var attr = new GlideColumnAttributes(attrName);
		  attr.setType("string");
		  attr.setUsePrefix(false);
		  attrs.put(attrName, attr);
		}
	  }
  },

  _getNodeValue : function (node, attrs, gr, tableName) {
    var fieldValue = GlideXMLUtil.getAllText(node);
    var nodeName = GlideXMLUtil.getNodeNameNS(node);

    if (node.getChildNodes().getLength() &gt; 1) {
      this._iterateNodeList (node.getChildNodes(), nodeName, attrs, gr, tableName);
      return null;
    }

    return fieldValue;
  }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;dloo&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2010-01-28 05:34:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;736974ed0ad33702009e9534995ce4af&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;78&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ImportSetUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Web Service Import Sets" source="com.glide.web_service_import_sets"&gt;ddb0010b6d2620100acb70b3534330cb&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_736974ed0ad33702009e9534995ce4af&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-09-06 23:41:11&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4328&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:30</sys_created_on>
        <sys_id>0fcc053e2f331110d8a4d5f62799b669</sys_id>
        <sys_name>ImportSetUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_0fcc053e2f331110d8a4d5f62799b669</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
