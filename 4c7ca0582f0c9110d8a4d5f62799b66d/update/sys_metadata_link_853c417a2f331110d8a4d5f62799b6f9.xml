<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0958f426ec3a330094d7da10c60bb67a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AssetCoreCompanyUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility for handling core-company operations.&lt;/description&gt;
        &lt;name&gt;AssetCoreCompanyUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AssetCoreCompanyUtil = Class.create();

AssetCoreCompanyUtil.prototype = (function() {
	// Tables
	var CORE_COMPANY_TABLE = 'core_company';
	// Table Columns
	var MANUFACTURER_COLUMN = 'manufacturer';
	var NAME_COLUMN = 'name';
	var CANONICAL_COLUMN = 'canonical';
	var HASH_COLUMN = 'hash';
	// Normalization Plugin
	var CANONICAL_PLUGIN = 'com.glide.data_services_canonicalization.client';
	var DOMAIN_PLUGIN = 'com.glide.domain';
	var PARTITION_PROPERTY = 'glide.sys.domain.partitioning';

	function _getCDSMappingEntry(manufacturerName) {
		var manufacturerHash = SNC.CanonicalName.getHash(manufacturerName);
		var cdsmap = new GlideRecord('cds_client_mapping');
		cdsmap.addQuery('discovered_name_hash', manufacturerHash);
		cdsmap.addQuery('table', 'core_company');
		cdsmap.addQuery('field', 'name');
		cdsmap.query();
		return cdsmap;
	}

	// Instance methods start here.
	function _getCoreCompanyId(companyName, domainID) {
		var coreCompany = new GlideRecord(CORE_COMPANY_TABLE);
		if (!gs.nil(domainID)) {
			// Add this check, because 'sys_domain' column may be not available, for example in the case Domain Separation is not enabled
			if (!coreCompany.isValidField('sys_domain')) {
				throw new Error('No such field sys_domain in ' + CORE_COMPANY_TABLE);
			}
			coreCompany.addQuery('sys_domain', domainID);
		}

		if (this.isCanonicalPluginActive) {
			var companyNameHash = SNC.CanonicalName.getHash(companyName);
			coreCompany.addQuery(HASH_COLUMN, companyNameHash);
			coreCompany.orderByDesc(CANONICAL_COLUMN);
		} else {
			coreCompany.addQuery(NAME_COLUMN, companyName);
		}

		coreCompany.setLimit(1);
		coreCompany.query();
		if (coreCompany.next()) {
			return coreCompany.getUniqueValue();
		}
		return null;
	}

	function _createCoreCompany(companyName, domainID) {
		var coreCompany = new GlideRecord(CORE_COMPANY_TABLE);
		coreCompany.initialize();
		coreCompany.setValue(NAME_COLUMN, companyName);
		coreCompany.setValue(MANUFACTURER_COLUMN, true);
		if (!gs.nil(domainID)) {
			// Add this check, because 'sys_domain' column may be not available, for example in the case Domain Separation is not enabled
			if (!coreCompany.isValidField('sys_domain')) {
				throw new Error('No such field sys_domain in ' + CORE_COMPANY_TABLE);
			}
			coreCompany.setValue('sys_domain', domainID);
		}
		var companySysid = coreCompany.insert();
		// Set global domain after insert, because there is a business rule on [core_company] setting global domain to default domain on new record by default
		if (!gs.nil(domainID) &amp;&amp; domainID === 'global') {
			coreCompany.initialize();
			coreCompany.get(companySysid);
			coreCompany.setValue('sys_domain', 'global');
			// Skip running BR, because BR updates all info associated with this company, like user, group, department and location. Otherwise all those info will be changed to global
			coreCompany.setWorkflow(false);
			coreCompany.update();
		}
		return companySysid;
	}

	function _resolveCoreCompanyByName(companyNameParam) {
		var companySysId = '';
		var domainID = ''; // set this variable to global if domain separation is enabled
		if (this.isDomainDataSeparationEnabled) {
			domainID = 'global';
		}

		var companyName = companyNameParam;
		// Find a matching cds_client_mapping entry. If it exists, look up the canonical name for the normalized company
		// If the mapping does not exist, create a custom core company(if it doesn't exist already) and set it to canonical
		var cdsmap = _getCDSMappingEntry(companyName);
		if (cdsmap.next()) {
			// Mapping exists, check if cds_client_name exists as a core company. If not, create it
			companyName = cdsmap.canonical_name.name;
		}

		companySysId = this.getCoreCompanyId(companyName, domainID);
		if (gs.nil(companySysId)) {
			companySysId = this.createCoreCompany(companyName, domainID);
		}

		return companySysId;
	}

	return {
		initialize: function() {
			this.isCanonicalPluginActive = GlidePluginManager.getActivePlugin(CANONICAL_PLUGIN);
			this.isDomainDataSeparationEnabled = GlideDomainSupport.isDataSeparationEnabled();
		},
		resolveCoreCompanyByName: _resolveCoreCompanyByName,
		createCoreCompany: _createCoreCompany,
		getCoreCompanyId: _getCoreCompanyId,
		type: 'AssetCoreCompanyUtil'
	};
}());]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-07-25 06:12:32&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0958f426ec3a330094d7da10c60bb67a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AssetCoreCompanyUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Asset Management" source="com.snc.asset_management"&gt;0ea009c76d2620100acb70b353433049&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0958f426ec3a330094d7da10c60bb67a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-11-22 12:02:18&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4252&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:54</sys_created_on>
        <sys_id>853c417a2f331110d8a4d5f62799b6f9</sys_id>
        <sys_name>AssetCoreCompanyUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_853c417a2f331110d8a4d5f62799b6f9</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
