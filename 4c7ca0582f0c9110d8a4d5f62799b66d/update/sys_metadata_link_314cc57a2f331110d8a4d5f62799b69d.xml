<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1af34c675333230030c3ddeeff7b12f6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UxPageElementInvariants&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UxPageElementInvariants&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UxPageElementInvariants = Class.create();
UxPageElementInvariants.prototype = {
    initialize: function(elemRecord) {
		this.elem = elemRecord;
    },
	
	treeRootDefaultValue: function () {
		if (gs.nil(this.elem.parent))
			return '';
		if (!!this.elem.parent.is_root)
			return this.elem.parent + '';
		if (gs.nil(this.elem.parent.tree_root))
			return '';
		return this.elem.parent.tree_root + '';
	},
	
	treeRootRefQual: function () {
		var defaultVal = this.treeRootDefaultValue();
		if (gs.nil(defaultVal))
			return '';
		return 'sys_id=' + defaultVal;
	},
	
	/**
	 * abort - function to call if we want to abort the action
	 * warn  - function to call (takes msg arg) if we want to surface the abort reason
	 */
	rootVsParentFields: function (abort, warn) {
		abort = abort || function(){};
		warn = warn || function(){};
		
		if (this.elem.sys_class_name == 'sys_ux_content_picker')
			return this.rootVsParentFieldsForContentPicker(abort, warn);
		
		if (this.elem.sys_class_name == 'sys_ux_custom_content_root_elem')
			return this.rootVsParentFieldsForContentExt(abort, warn);

    // parent and is_root are mutually exclusive
    this.elem.is_root = Boolean(gs.nil(this.elem.parent));

    // tree_root can always be derived from parent
    this.elem.tree_root = this.treeRootDefaultValue();
	},
	
	rootVsParentFieldsForContentPicker: function (abort, warn) {
		// content picker is never a root
		this.elem.is_root = false;
		
		// content picker requires a parent
		if (gs.nil(this.elem.parent)) {
			warn('Content Picker requires a parent.  Must set parent field to save.');
			abort();
		}
		
		// fix root ref if necessary
		this.elem.tree_root = this.treeRootDefaultValue();
	},
	
	rootVsParentFieldsForContentExt: function (abort, warn) {
		// content extension is always a root
		this.elem.is_root = true;
		
		// content picker never has a parent, nor a root
		this.elem.parent = '';
		this.elem.tree_root = '';
	},
	
	placeholderRefQual: function () {
		return 'page=' + this.elem.getValue('page');
	},
	
	pickerDefaultValue: function () {
		if (gs.nil(this.elem.parent) &amp;&amp; gs.nil(this.elem.placeholder))
			return '';
		if (this.elem.parent.sys_class_name == 'sys_ux_content_picker')
			return this.elem.parent + '';
		if (!gs.nil(this.elem.placeholder.picker))
			return this.elem.placeholder.picker + '';
		return '';
	},
	
	/**
	 * abort - function to call if we want to abort the action
	 * warn  - function to call (takes msg arg) if we want to surface the abort reason
	 */
	pickerVsParentFields: function (abort, warn) {
		abort = abort || function(){};
		warn = warn || function(){};
		
		if (this.elem.sys_class_name == 'sys_ux_content_picker') {
			this.elem.picker = '';
			return;
		}
		
		this.elem.picker = this.pickerDefaultValue();
	},

    type: 'UxPageElementInvariants'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-01 01:55:32&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1af34c675333230030c3ddeeff7b12f6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UxPageElementInvariants&lt;/sys_name&gt;
        &lt;sys_package display_value="UX Framework" source="com.glide.uxbuilder"&gt;f47109cf6d2620100acb70b353433076&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1af34c675333230030c3ddeeff7b12f6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-03-19 22:36:05&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2820&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:13</sys_created_on>
        <sys_id>314cc57a2f331110d8a4d5f62799b69d</sys_id>
        <sys_name>UxPageElementInvariants</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_314cc57a2f331110d8a4d5f62799b69d</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
