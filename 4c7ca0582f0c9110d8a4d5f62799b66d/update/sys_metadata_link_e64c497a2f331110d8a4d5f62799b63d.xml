<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1ce682ddb3003300f224a72256a8dc7e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SPMRefUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utils for SPM field reference qualifiers&lt;/description&gt;
        &lt;name&gt;SPMRefUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SPMRefUtils = Class.create();
SPMRefUtils.prototype = {
	initialize: function(portfolio) {
		this.portfolio = portfolio;
	},

	getLowestLevelTaxonomyNode: function(portfolio) {
		var query = "sys_idIN";
		var lowestLevel = this.getLowestLevelTaxonomy(portfolio);

		if (!lowestLevel)
			return query;

		// Return a list of taxonomy nodes with the highest order
		var gr = new GlideRecord('spm_taxonomy_node');
		gr.addQuery('spm_taxonomy_layer', lowestLevel);
		gr.query();

		while (gr.next()) {
			query = query.concat(gr.sys_id + ',');
		}

		return query;	
	},


	// Find the lowest taxonomy layer definition within the Portfolio
	// If portfolio does not exist, ignore the portfolio filter
	getLowestLevelTaxonomy: function(portfolio) {
		if (portfolio == '')
			return null;

		var layer = new GlideRecord('spm_taxonomy_layer_definition');
		layer.addQuery('spm_service_portfolio', portfolio);
		layer.orderByDesc('order');
		layer.setLimit(1);
		layer.query();

		if (layer.next())
			return layer.sys_id;
		else
			return null;
	},

	getTaxonomyLeafOrder: function(portfolioId) {
		var lowestLayer = new GlideRecord('spm_taxonomy_layer_definition');
		lowestLayer.addQuery('spm_service_portfolio', portfolioId);
		lowestLayer.orderByDesc('order');
		lowestLayer.setLimit(1);
		lowestLayer.query();

		var leafOrder = null;
		if (lowestLayer.next())
			leafOrder = lowestLayer.order;
		return leafOrder;
	},

	isPortfolioLayerLocked: function(portfolio) {
		var lowestLevelNodeQuery = this.getLowestLevelTaxonomyNode(portfolio);
		// Iterate over all lowest level nodes and check for children services
		var gr = new GlideRecord('spm_taxonomy_node');
		gr.addEncodedQuery(lowestLevelNodeQuery);
		gr.query();

		while (gr.next()) {
			// If this node has any service return true
			var gr2 = new GlideRecord('cmdb_ci_service');
			gr2.addQuery('spm_taxonomy_node', gr.sys_id);
			gr2.query();

			if (gr2.hasNext())
				return true;
		}

		return false;	
	},

	getParentLayerNodes: function(current) {
		var gr = new GlideRecord('spm_taxonomy_layer_definition');
		gr.orderByDesc('order');
		gr.addQuery('order', '&lt;', current.spm_taxonomy_layer.order);
		gr.addQuery('spm_service_portfolio', current.spm_service_portfolio);
		gr.query();

		if (gr.next())
			return gr.getValue('order'); //Order is mandatory, we can assume this will return a value when queried
		return '';
	},

	getTaxonomyNodeConditionQualifier: function(current, RP){
		var shouldShowNewButton = current.canCreate() &amp;&amp; RP.isRelatedList() &amp;&amp; !RP.isInDevStudio() &amp;&amp; (current.getRecordClassName() == 'cmdb_ci_service' || current.getRecordClassName() == 'cmdb_ci_service_business' || current.getRecordClassName() == 'cmdb_ci_service_technical');
		var uri = gs.action.getGlideURI();
		// Show new button only on taxonomy node page. Hide everywhere else.
		var isTaxonomyNodePage = (uri.toString().includes('spm_taxonomy_node.do'));
		return shouldShowNewButton &amp;&amp; isTaxonomyNodePage;
	},

	type: 'SPMRefUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-06 21:50:31&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1ce682ddb3003300f224a72256a8dc7e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SPMRefUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Portfolio Management Foundation" source="com.snc.service_portfolio"&gt;5692894b6d6620100acb70b3534330f5&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1ce682ddb3003300f224a72256a8dc7e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-17 18:50:43&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2991&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:17</sys_created_on>
        <sys_id>e64c497a2f331110d8a4d5f62799b63d</sys_id>
        <sys_name>SPMRefUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e64c497a2f331110d8a4d5f62799b63d</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
