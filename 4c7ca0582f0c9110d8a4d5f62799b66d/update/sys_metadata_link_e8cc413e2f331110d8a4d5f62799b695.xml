<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6d7a06a273120010616ca9843cf6a79d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OIDC_internal&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;OIDC_internal script has out of the box implementation of OIDC web SSO request generation, response parsing and validation. In order to support customization customers can override these methods in OIDC_custom Script Include. Below are some methods with their intended functionality.&amp;#13;
&amp;#13;
getRelayStateOptions: &amp;#13;
    this method provides a way to set relay state options to support request generation customizations.&amp;#13;
&amp;#13;
getComputedRequestURI, getComputedRequestQueryString, getComputedBaseURL, setCustomRelayState: &amp;#13;
    These 4 methods are to support relay state generation customizations.&lt;/description&gt;
        &lt;name&gt;OIDC_internal&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");
var OIDC_internal = Class.create();
OIDC_internal.prototype = {
    initialize: function() {
        this.glideoidc = new SNC.GlideMultiSSO();
		this.ssoRecord = null;
		this.glidetoken = null;
    },
    getGlideOidc: function() {
        return this.glideoidc;
    },
    /**
     *	returns Identity Provider GlideRecord
     */
    getSSORecord: function() {
        return this.ssoRecord;
    },
    /** 
     *	param - ssoRecord: Identity Provider GlideRecord
     */
    setSSORecord: function(ssoRecord) {
        this.ssoRecord = ssoRecord;
    },
	
	getRelayStateById: function(stateId) {
		return this.glideoidc.getRelayStateById(stateId);
    },
    generateRelayState: function() {
		var serviceUrl = this.ssoRecord.getValue("service_url");
		// As this is OIDC login flow, Setting request type to OIDC.
		var reqType = "OIDC";
        return this.glideoidc.generateRelayState(serviceUrl, reqType);
    },
    logDebug: function(msg) {
        SNC.GlideMultiSSO.logDebugWithScriptSource(msg);
    },
    logError: function(msg) {
        SNC.GlideMultiSSO.logErrorWithScriptSource(msg);
    },
    saveInCookie: function(name, ssoId) {
        this.glideoidc.saveInCookie(name, ssoId);
    },
	
	initializeOauthClient: function(entityProfileId) {
        this.oauthClient = new sn_auth.GlideOAuthClient(entityProfileId);
    },
	
	getAuthorizationURL: function() {
		var reqOptions = this.getRelayStateOptions();
		this.glideoidc.setRelayStateOptions(reqOptions);
		var origRelayState = this.generateRelayState();
		var map = {"state": origRelayState};
		return this.oauthClient.getAuthorizationURL(map);
    },
	
	getUserByAuthorization: function(code) {
		// Setting txn attribute to set the SSO ID to be set for newly created users.
		GlideTransaction.get().setAttribute("oidcIdentityProviderSsoId", this.ssoRecord.sys_id);
		
		var map = {"authCode": String(code)};
		this.glidetoken  = this.oauthClient.getUserNameAndClaimsByAuthorization(map);
		if(this.glidetoken!=null) {
			this.logDebug("UserInfo Claims:" + this.glidetoken.getUserInfoClaims());
			this.logDebug("IdToken Claims: " + this.glidetoken.getIdTokenClaims());
			return this.glidetoken.getUserToLogin();
			}
			return null;
    },
    
    getEndSessionLogoutURL: function(redirectUri) {	
		return this.oauthClient.getEndSessionLogoutURL(redirectUri);	
    },
	//get  user info claims based on oauth token
	getUserInfoClaims: function() {
		var userInfoClaims = null;
		if(this.glidetoken!=null) {
			userInfoClaims = this.glidetoken.getUserInfoClaims();
			return userInfoClaims;
		}
		this.logDebug("Glide token is null, no userinfo claims are present");
		return null;
    },
	//get  id token claims based on oauth token
	getIdTokenClaims: function() {
		var idTokenClaims = null;
		if(this.glidetoken!=null) {
			idTokenClaims = this.glidetoken.getIdTokenClaims();
			return idTokenClaims;
		}
		this.logDebug("Glide token is null, no idtoken claims are present");
		return null;
    },
    /*** Relay State Customization Support ***/
    /**
     * 	returns starting_page. if login_redirect_url or starting_page property value is not null
     * 	else return transaction request URI 
     */
    getComputedRequestURI: function() {
        var startPage = this.glideoidc.getStartPage();
        return GlideStringUtil.nil(startPage) ? GlideTransaction.get().getRequest().getRequestURI() : startPage;
    },
    /**
     * returns empty string. if login_redirect_url or starting_page property value is not null
     * 	else return transaction request query string 
     */
    getComputedRequestQueryString: function() {
        var startPage = this.glideoidc.getStartPage();
        return GlideStringUtil.nil(startPage) ? GlideTransaction.get().getRequest().getQueryString() : "";
    },
    /**
     * Getting Base URL from Service URL.
    	Service URL : https://yourinstance.service-now.com/navpage.do
    	Base URL    : https://yourinstance.service-now.com
     */
    getComputedBaseURL: function(serviceURL) {
        return this.glideoidc.getComputedBaseURL(serviceURL);
    },
    /**
     * Final relay state value can be set based on custom logic.
     */
    setCustomRelayState: function(customRelayState) {
        this.glideoidc.setCustomRelayState(customRelayState);
    },
	getRelayStateOptions: function() {
		var reqOptions = {};
		return reqOptions;
	},
    type: 'OIDC_internal'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-01-15 11:54:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6d7a06a273120010616ca9843cf6a79d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OIDC_internal&lt;/sys_name&gt;
        &lt;sys_package display_value="Integration - Multiple Provider Single Sign-On (do not activate...use 'Integration - Multiple Provid" source="com.snc.integration.sso.multi"&gt;4762a9692fe21110d8a4d5f62799b613&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6d7a06a273120010616ca9843cf6a79d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-04-15 08:14:47&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4422&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:20</sys_created_on>
        <sys_id>e8cc413e2f331110d8a4d5f62799b695</sys_id>
        <sys_name>OIDC_internal</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e8cc413e2f331110d8a4d5f62799b695</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
