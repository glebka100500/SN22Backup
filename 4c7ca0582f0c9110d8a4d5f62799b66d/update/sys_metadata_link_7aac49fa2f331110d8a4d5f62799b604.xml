<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>61664f8f73322300b5c7ed64fbf6a73c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBImportAJAXSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]&amp;#13;
&amp;#13;
The purpose of this script include is to provide default AJAX behaviours for the widgets on Import Article page.&amp;#13;
To change the behaviour of these methods (or add new methods), customers should override/add new methods to the KBImportAJAX script include.&lt;/description&gt;
        &lt;name&gt;KBImportAJAXSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBImportAJAXSNC = Class.create();
KBImportAJAXSNC.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	
	/**
	This method should perform checkout and processing of attachment and return's sysId of checkouted article
 	**/
	performImportToNewVersion: function(){
		try{
			var fileId = this.getParameter("sysparm_file_id");
			var articleId = this.getParameter("sysparm_article_id");
			var copyAttachments = this.getParameter("sysparm_copy_attachments");
			
			if(gs.nil(copyAttachments))
				copyAttachments = false;
			else
				copyAttachments = copyAttachments == "true" ? true : false;
			
			return this._performImportToNewVersion(fileId, articleId, copyAttachments);
		}catch(e){
			return [];
		}
	},
	
	_performImportToNewVersion: function(fileId, articleId, copyAttachments){
		var passMessage =  gs.getMessage("Article revison successfully created from uploaded file.");
		var failMessage = gs.getMessage("Invalid input data provided.");
		
		if(gs.nil(fileId) || gs.nil(articleId)){
			return this._encode({success: false, message: failMessage});
		}
		
		var kbVersioningObj = new KBVersioning();
		
		if(!kbVersioningObj.isVersioningEnabled())
			return this._encode({success: false, message: failMessage});
		
		var article = new GlideRecord(kbVersioningObj.KB_KNOWLEDGE);
		article.addQuery("sys_id", articleId);
		article.query();

		//if found glide Record
		if(article.next() &amp;&amp; article.canRead()) {
			if(!(article.workflow_state == kbVersioningObj.INITIAL_STATE || article.workflow_state == kbVersioningObj.MAJOR_STATE))
				return this._encode({success: false, message: failMessage});
			
			var knowledgeSysId = articleId;
			var articleOldState = article.workflow_state + '';
			var oldAttachments = null;
			
			if(article.workflow_state == kbVersioningObj.MAJOR_STATE){
				var newRecord = kbVersioningObj.checkout(article, !copyAttachments);
				if(gs.nil(newRecord))
					return this._encode({success: false, message: failMessage});
				
				knowledgeSysId = newRecord.getUniqueValue();
			}
			else if(articleOldState == kbVersioningObj.INITIAL_STATE) {
				if(!article.canWrite()){
					return this._encode({success: false, message: failMessage});
				}
			
				if(!copyAttachments){
					var objSysAttachment = new GlideSysAttachment();
					oldAttachments = objSysAttachment.getAttachments(article.sys_class_name, articleId) ;
				}
			}
			
			try{
				var result = new SNC.KnowledgeHelper().processAttachment(fileId, knowledgeSysId);
				if(articleOldState == kbVersioningObj.INITIAL_STATE &amp;&amp; !copyAttachments &amp;&amp; oldAttachments != null){
					while(oldAttachments.next()){
						objSysAttachment.deleteAttachment(oldAttachments.sys_id);
					}
				}
				return this._encode({success: true, message: passMessage, kbMeta: JSON.parse(result)});
			}
			catch(e){
				return this._encode({success: false, message: e.message});
			}
		}
		else {
			return this._encode({success: false, message: failMessage});
		}
	},
	
	_encode: function(object) {
		return new JSON().encode(object);
	},
	
    type: 'KBImportAJAXSNC'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-01-09 09:49:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;61664f8f73322300b5c7ed64fbf6a73c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBImportAJAXSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Advanced" source="com.snc.knowledge_advanced"&gt;e36e64192f201110d8a4d5f62799b6e9&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_61664f8f73322300b5c7ed64fbf6a73c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-03-07 07:05:51&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3061&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:56</sys_created_on>
        <sys_id>7aac49fa2f331110d8a4d5f62799b604</sys_id>
        <sys_name>KBImportAJAXSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_7aac49fa2f331110d8a4d5f62799b604</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
