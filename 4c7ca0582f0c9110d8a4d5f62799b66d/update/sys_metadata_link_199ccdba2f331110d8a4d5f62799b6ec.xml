<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5489e330eb8813007c94efc9a206fe1e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CMDBDuplicateTaskUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to manually create Remediate Duplicate Task with duplicates that are of independent type&lt;/description&gt;
        &lt;name&gt;CMDBDuplicateTaskUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CMDBDuplicateTaskUtils = Class.create();
CMDBDuplicateTaskUtils.prototype = {
	initialize: function() {
		this.cmdbCiTable = "cmdb_ci";
		this.duplicateAuditResultTable = 'duplicate_audit_result';
		this.duplicateTaskTable = 'reconcile_duplicate_task';
		this.failureLabel = "Failed to create Remediate Duplicate Task. ";
		this.successLabel = "Successfully created Remediate Duplicate Task.";
	},
	
	// Create Remediate Duplicate Task for given list of duplicate sysIds
	createDuplicateTask : function(duplicateSysIds) {
		if (GlideStringUtil.nil(duplicateSysIds)) {
			gs.info(gs.getMessage("Failed to create Remediate Duplicate Task. Invalid input."));
			return null;
		}
		
		var sysIDs = duplicateSysIds.split(",");
		// validate sysId is valid cmdb_ci and not present in any open de-duplicate tasks
		for(var i=0; i &lt; sysIDs.length; i++) {
			sysIDs[i] = sysIDs[i].trim();
			if(!this.isValidCmdbCi(sysIDs[i])) {
				gs.info(gs.getMessage("Failed to create Remediate Duplicate Task. Following sysId is not a valid sysId in cmdb_ci table: {0}", sysIDs[i]));
				return null;
			}
			
			if(!this.hasNoOpenDuplicateTasks(sysIDs[i])) {
				gs.info(gs.getMessage("Failed to create Remediate Duplicate Task. Following sysId is already part of an open Remediate Duplicate Task: {0}", sysIDs[i]));
				return null;
			}
		}
		
		// Create Remediate Duplicate Task
		var taskGr = new GlideRecord(this.duplicateTaskTable);
		taskGr.initialize();
		taskGr.setValue('short_description', 'Manually found duplicate records');
		var taskId = taskGr.insert();
		for(var j=0; j &lt; sysIDs.length; j++) {
			// Create duplicate audit results
			var grR = new GlideRecord(this.duplicateAuditResultTable);
			grR.initialize();
			grR.setValue("table", this.cmdbCiTable);
			grR.setValue("duplicate_ci", sysIDs[j]);
			grR.setValue("duplicate_id", sysIDs[j]);
			grR.setValue("follow_on_task", taskId);
			grR.update();
		}
		
		return taskId;
	},
	
	// Check if sysId is a valid cmdb_ci 	
	isValidCmdbCi : function(sysId) {
		var gr = new GlideRecord("cmdb_ci");
		return gr.get(sysId);
	},
	
    // Check if sysId already exist in open de-duplicate task
	hasNoOpenDuplicateTasks : function(sysId) {
		var gr = new GlideRecord(this.duplicateAuditResultTable);
		gr.addQuery("duplicate_id", sysId);
		gr.query();
		while(gr.next()) {
			var activeTask = gr.follow_on_task.active;
			if (activeTask)
				return false;
		}
		return true;
	},
	
	getIdentificationRules: function(table) {
		return SNC.CmdbMetadataScriptableApi.getIdentificationRules(table);
	},
	
	type: 'CMDBDuplicateTaskUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-01-31 23:51:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5489e330eb8813007c94efc9a206fe1e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CMDBDuplicateTaskUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;c60efc0f6d2220100acb70b3534330c0&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5489e330eb8813007c94efc9a206fe1e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-14 21:25:24&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2584&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:34</sys_created_on>
        <sys_id>199ccdba2f331110d8a4d5f62799b6ec</sys_id>
        <sys_name>CMDBDuplicateTaskUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_199ccdba2f331110d8a4d5f62799b6ec</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
