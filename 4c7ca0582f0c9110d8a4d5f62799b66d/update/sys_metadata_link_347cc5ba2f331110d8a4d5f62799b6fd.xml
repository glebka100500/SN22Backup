<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3d224e42c3301200b6dcdfdc64d3ae74</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OCDHTMLXCalendarFormatter&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Formats events according to the DHTMLX Scheduler standard.&lt;/description&gt;
        &lt;name&gt;OCDHTMLXCalendarFormatter&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var OCDHTMLXCalendarFormatter = Class.create();
OCDHTMLXCalendarFormatter.prototype = Object.extendsObject(OCFormatter, {
    initialize: function(groupEvents, targetTZ) {
		this.groupEvents = groupEvents == "group";
		this.groupedEvents = {};
		this.targetTZ = null;
		if (JSUtil.notNil(targetTZ)) {
			var scheduleGdt = new GlideScheduleDateTime();
			scheduleGdt.setTimeZone(targetTZ);
			this.targetTZ = scheduleGdt.getTimeZone();
		}
    },

	_getTimezoneFormattedDateTime: function (date) {
		if (JSUtil.nil(date))
			return "";
		var gdt = new GlideDateTime();
		gdt.setDisplayValueInternal(date);
		gdt.setTZ(this.targetTZ);
		return gdt;
	},

	_getGDTNumericValue: function (gdt) {
		var gdtTemp = new GlideDateTime();
		gdtTemp.setDisplayValueInternal(gdt.getDisplayValueInternal());
		return gdtTemp.getNumericValue();
	},

	formatEvent: function(item) {
		item.id = this.getId(item);
		item.text = item.title;

		if (!item.user_id)
			item.cover = [];

		if (JSUtil.notNil(this.targetTZ)) {
			var formattedGDT;
			if (item.start) {
				item.user_session_start_date = item.start + "";
				formattedGDT = this._getTimezoneFormattedDateTime(item.start);
				item.start = formattedGDT.getDisplayValueInternal();
				item.startNumeric = this._getGDTNumericValue(formattedGDT) + "";
			}

			if (item.end) {
				item.user_session_end_date = item.end;
				formattedGDT = this._getTimezoneFormattedDateTime(item.end);
				item.end = formattedGDT.getDisplayValueInternal();
				item.endNumeric = this._getGDTNumericValue(formattedGDT);
			}

			if (item.actual_start_date) {
				item.user_session_actual_start_date = item.actual_start_date + "";
				item.actual_start_date = this._getTimezoneFormattedDateTime(item.actual_start_date).getDisplayValueInternal();
			}

			if (item.actual_end_date) {
				item.user_session_actual_end_date = item.actual_end_date + "";
				item.actual_end_date = this._getTimezoneFormattedDateTime(item.actual_end_date).getDisplayValueInternal();
			}
		}

		item.start_date = item.start;
		item.end_date = item.end;

		if (this.groupEvents) {
			var key = item.rota_id + "_" + item.startNumeric + "_" + item.endNumeric;

			if (item.type == "timeoff" || item.type == "time_off_in_approval")
				this.groupedEvents[item.id] = item;
			else if (this.groupedEvents[key] &amp;&amp; typeof this.groupedEvents[key].cover !== "undefined")
				this.groupedEvents[key].cover.push(item);
			else if (item.hasOwnProperty("cover"))
				this.groupedEvents[key] = item;
			else {
				key = this.isRotaSpanChild(item);
				if (key)
					this.groupedEvents[key].cover.push(item);
			}
		}

		return item;
	},

	isRotaSpanChild: function (item) {
		var keys = Object.keys(this.groupedEvents);
		for (var i = 0; i &lt; keys.length; i++) {
			var rotaInfo = keys[i].split("_");
			var rotaStartNumeric = parseInt(rotaInfo[1], 10);
			var rotaEndNumeric = parseInt(rotaInfo[2], 10);
			if ( item.rota_id == rotaInfo[0] &amp;&amp; parseInt(item.startNumeric, 10) &gt;= rotaStartNumeric
				&amp;&amp; parseInt(item.endNumeric, 10) &lt;= rotaEndNumeric )
				return keys[i];
		}

		return "";
	},

	getGroupedEvents: function() {
		var groupedEvents = this.groupedEvents;
		return Object.keys(groupedEvents).map(
			function (key) {
				return groupedEvents[key];
			});
	},

    type: 'OCDHTMLXCalendarFormatter'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-01-08 11:04:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3d224e42c3301200b6dcdfdc64d3ae74&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;48&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OCDHTMLXCalendarFormatter&lt;/sys_name&gt;
        &lt;sys_package display_value="On-Call Scheduling" source="com.snc.on_call_rotation"&gt;37d4c9836de620100acb70b3534330d3&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3d224e42c3301200b6dcdfdc64d3ae74&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-07 02:13:37&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3296&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:59</sys_created_on>
        <sys_id>347cc5ba2f331110d8a4d5f62799b6fd</sys_id>
        <sys_name>OCDHTMLXCalendarFormatter</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_347cc5ba2f331110d8a4d5f62799b6fd</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
