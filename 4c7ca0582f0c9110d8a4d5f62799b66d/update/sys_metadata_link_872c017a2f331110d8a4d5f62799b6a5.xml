<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>013093eb37102200277826877e41f1b9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PPMConsole&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PPMConsole&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PPMConsole = Class.create();
PPMConsole.prototype = {
    initialize: function(tableName, context) {
        this.tableName = tableName;
        this.context = context;
        this.gr = undefined;
    },

    getConsole: function() {
        this.gr = new GlideRecord("pm_console");
        this.gr.addQuery("table", this.tableName);
        if(JSUtil.notNil(this.context))
            this.gr.addQuery("context", this.context);
        this.gr.query();
        if(this.gr.next())
            return this.gr;
    },

    isValid: function () {
        var console = this.getConsole();
        if(JSUtil.notNil(console))
            return true;
        return false;
    },

    getChildTables: function () {
        PPMDebug.log("Into PPMConsole.getChildTables...");
        var childTables = [];
        if(JSUtil.notNil(this.gr.getValue("child_tables"))) {
            var childTableIds = this.gr.getValue("child_tables");
            childTables = this.getChildTableNames(childTableIds);
        }
        return childTables;
    },

    getChildTableNames: function (tableIds) {
        PPMDebug.log("Into PPMConsole.getChildTableNames -&gt; " + tableIds);
        var tableNames = [];
        if(JSUtil.notNil(tableIds)) {
            var grTable = new GlideRecord("sys_db_obejct");
            grTable.addQuery("sys_id", "IN", tableIds);
            grTable.query();
            while(grTable.next()) {
                tableNames.push(grTable.getValue("name"));
            }
        }
        PPMDebug.log("Into PPMConsole.getChildTableNames -&gt; " + tableNames.join(","));
        return tableNames;
    },

    getTables : function() {
        var tables = [];
        var console = new GlideRecord('pm_console');
        console.addQuery('entity', this.tableName);
		if(JSUtil.notNil(this.context))
			console.addQuery("context", this.context);
        console.query();
        if ( console.next() ) {
            var consoleTables = new GlideRecord('pm_console_table');
            consoleTables.addQuery('pm_console', console.getValue('sys_id'));
            consoleTables.query();
            while ( consoleTables.next() ) {
                tables.push(consoleTables.getValue('table'));
            }           
        }
        return tables;
    },

    getJSONColumnForColumn: function (column) {
        PPMDebug.log("Into PPMConsole.getJSONColumnForColumn -&gt; " + column);
        if(this.isValid()) {
            var grC = new GlideRecord("pm_console_column");
            grC.addQuery("column", column);
            var joinQuery = grC.addJoinQuery("pm_console_table", "pm_console_table", "sys_id");
            joinQuery.addCondition("pm_console", this.gr.getValue("sys_id"));
            grC.addNotNullQuery("pm_console_display_column");
            grC.query();
            PPMDebug.log("getJSONColumnForColumn -&gt; " + grC.getRowCount() + " | " + grC.getEncodedQuery());
            if(grC.next()) {
                return grC.pm_console_display_column.getRefRecord().getValue("json_column");
            }
        }
        return column;
    },

    getTableDefaultValues: function (tableName) {
        PPMDebug.log("Into PPMConsole.getTableDefaultValues -&gt; " + tableName);
        var defaultValues = {};
        if(this.isValid()) {
            var grT = new GlideRecord("pm_console_table");
            grT.addQuery("pm_console", this.gr.getValue("sys_id"));
            if(JSUtil.notNil(tableName)) {
                grT.addQuery("table", tableName);
            } else { // pick the first child table - ideally should be only one
                grT.addQuery("table", "!=", this.tableName);
            }
            grT.query();
            if(grT.next()) {
                var tableDescriptor = new GlideTableDescriptor(grT.getValue("table"));
                var grC = new GlideRecord("pm_console_column");
                grC.addQuery("pm_console_table", grT.getValue("sys_id"));
                grC.query();
                while(grC.next()) {
                    var columnName = grC.getValue("column");
                    if(JSUtil.notNil(columnName)) {
                        var elementDescriptor = tableDescriptor.getElementDescriptor(columnName);
                        var defaultValue = '';
						if(elementDescriptor) defaultValue=elementDescriptor.getDefault();
                        if(JSUtil.notNil(defaultValue) &amp;&amp; defaultValue.indexOf('javascript') == -1) {
                            var jsonColumn = grC.pm_console_display_column.getRefRecord().getValue("json_column");
                            defaultValues[jsonColumn] = defaultValue;
                            PPMDebug.log("Getting displayValues -&gt; " + tableName + " | " + columnName);
                            var choiceList = GlideChoiceList.getChoiceList(tableName, columnName);
                            var label = choiceList.getLabelOf(defaultValue);
                            if(JSUtil.notNil(label))
								defaultValues["dv_" + jsonColumn] = label;                        
                        }
                    }
                }
            }
        }
        return defaultValues;
    },

    getTableColors: function (tableName) {
        var tables = this.getTables();
        var colors = {}, preferenceName, colorValue;
        if(tables &amp;&amp; tables.length &gt; 0) {
            for (var i = 0; i &lt; tables.length; i++) {
                preferenceName = "com.snc.project_management." + tables[i] + ".color";
                colorValue = gs.getUser().getPreference(preferenceName);
                if(JSUtil.notNil(colorValue)) {
                    colors[tables[i]] = colorValue;
                } else {
                    colors[tables[i]] = "218ad8"; // default color
                }
            }
        }
        return colors;
    },
	
	isPlanningOnClient: function() {
		var planningOnClient = false;
		if(this.isValid())
			planningOnClient = this.gr.getValue('enable_client_side');
		
		return (planningOnClient == 'true' || planningOnClient == true);
	},

    type: 'PPMConsole'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-07-05 08:19:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;013093eb37102200277826877e41f1b9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PPMConsole&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;e93557642fc10110d8a4d5f62799b623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_013093eb37102200277826877e41f1b9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-03-10 13:46:45&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6041&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:46</sys_created_on>
        <sys_id>872c017a2f331110d8a4d5f62799b6a5</sys_id>
        <sys_name>PPMConsole</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_872c017a2f331110d8a4d5f62799b6a5</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
