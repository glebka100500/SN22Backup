<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>773b22955372101089abddeeff7b129b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SNHelpPanelController&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SNHelpPanelController&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SNHelpPanelController = Class.create();
SNHelpPanelController.prototype = {
    initialize: function() {
		this.documentController = new SNHelpDocumentController();
		this.constants = new SNHelpConstantProvider(); 
    },
	
	/*
	* This method will take current url and optional  
	* route object containing key/value pair
	* @param - url - full browser url
	* @param - routeObj - route object is client side routing object
	*/

	searchPanelContent : function(url, routeObj) {
		var parsedUrl,
			result;
		// parse routeobj if it's JSON string
		try {
			if (typeof routeObj === "string")
				routeObj = JSON.parse(routeObj);
		} catch (ex) {
			// route obj is not json string.. ignore
		}

		parsedUrl = this.parseURL(url, routeObj);
		result = this.documentController.searchDocuments(parsedUrl.context, parsedUrl.app_route, parsedUrl.routeObj);

		return result;
	},
	/*
	Generic structure of the routeObj for non workspace use cases

	routeObj = {
		type : custom,
		page : pageName,
		app_route : app_route,
		params : {
			param1 : value1,
			param2 : value2
		}
	}
	*/
	parseURL: function(url, routeObj) {
		var context,
			wsContexts,
			app_route;

		url = decodeURIComponent(url);

		//special handling for workspace
		if(url.indexOf("now/workspace") &gt;= 0 &amp;&amp; this.isObject(routeObj)) {
			wsContexts = this.parseWorkspaceUrl(url, routeObj);
			context = wsContexts[0];
			app_route = wsContexts[1];

		} else if(this.isObject(routeObj)) {
			context = routeObj.page;
			app_route = routeObj.app_route;
		} else {
			context = routeObj;
		}
		return ({
			context : context,
			app_route : app_route,
			routeObj : this.isObject(routeObj) ? routeObj : {}
		});
	},

	isObject : function (object) {
			return (object !== null &amp;&amp; typeof object === "object" &amp;&amp; !Array.isArray(object));
	},
	/*
	* assuming the url is - location.pathname + locaiton.search
	*
	*/
	parseWorkspaceUrl : function(url, routeObj) {
		var separator = this.constants.separator,
			urlParts, appRoute, moduleId, context = "";

		url = url.substr(url.indexOf("now/workspace"));
		urlParts = url.split("/");

		if(urlParts.length &gt; 2)
			appRoute = [urlParts[1], urlParts[2]].join(separator);

			if(routeObj &amp;&amp; routeObj.type) {
				switch(routeObj.type) {
					case "module" :
						moduleId = routeObj.module_id ? routeObj.module_id : "";
						context = [routeObj.type, moduleId].join(separator);
						if(moduleId === "list" &amp;&amp; routeObj.params &amp;&amp; routeObj.params.listId)
							context = [context, routeObj.params.listId].join(separator);
						break;
					case "record" :
					case "new_record" :
						context = [routeObj.type, routeObj.table].join(separator);
						break;
					default:
						context = routeObj.page || "";
						appRoute = routeObj.app_route || "";
				}
			}

		return [context, appRoute];
	},

    type: 'SNHelpPanelController'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-08-22 09:43:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;773b22955372101089abddeeff7b129b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SNHelpPanelController&lt;/sys_name&gt;
        &lt;sys_package display_value="ServiceNow Help and Guidance Backend" source="com.glide.sn_help"&gt;b9e3c10b6da620100acb70b353433052&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_773b22955372101089abddeeff7b129b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-06 08:45:11&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2839&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:39</sys_created_on>
        <sys_id>51dcc53e2f331110d8a4d5f62799b6b3</sys_id>
        <sys_name>SNHelpPanelController</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_51dcc53e2f331110d8a4d5f62799b6b3</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
