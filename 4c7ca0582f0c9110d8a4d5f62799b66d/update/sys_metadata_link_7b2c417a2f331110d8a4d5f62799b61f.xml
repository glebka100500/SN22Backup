<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>054adaa873c3330012a9e5e7caf6a79a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AssetManagementPerGlideRecordBaseJob&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AssetManagementPerGlideRecordBaseJob&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AssetManagementPerGlideRecordBaseJob = Class.create();
AssetManagementPerGlideRecordBaseJob.prototype = Object.extendsObject(AssetManagementPerRecordBaseJob, {
	initialize: function() {},

	/*
    Our predefined function for getting all of the unique domains for the records returned from the
    getRecords() function. To sort bottom-up, we can just compare length of domain path.
    */
	getDomainsGeneric: function() {
		var uniqueDomains = [];
		var records = this.getRecords();
		var domainColumn = this.getSysDomainFieldName();

		var recordsAggregate = new GlideAggregate(records.getTableName());
		recordsAggregate.addEncodedQuery(records.getEncodedQuery());
		recordsAggregate.groupBy(domainColumn);
		recordsAggregate.query();

		while (recordsAggregate.next()) {
			var curDomain = recordsAggregate.getValue(domainColumn) + '_'
				+ recordsAggregate[domainColumn].sys_domain_path.toString();

			if (uniqueDomains.indexOf(curDomain) === -1) { uniqueDomains.push(curDomain); }
		}

		uniqueDomains.sort(function(d1, d2) {
			return d2.length - d1.length;
		});

		return uniqueDomains.map(function(domain) { return domain.split('_')[0]; });
	},

	/*
	Overriding the abstract method getDomains()
	*/
	getDomains: function() {
		return this.getDomainsGeneric();
	},

	/*
    Implement parent function. Run jobs for records.
    If domain separation is enabled, query records for current domain before run job for each record.
    */
	runJob: function() {
		var records = this.getRecords();
		var isFailed = false;
		if (this.fIsDomainDataSeparationEnabled &amp;&amp; records.isValidField(this.getSysDomainFieldName())) {
			records.addQuery(this.getSysDomainFieldName(), this.getCurrentDomainSysId());
			records.query();
		}
		while (records.next()) {
			try {
				this.runJobForRecord(records);
			} catch (e) {
				isFailed = true;
				gs.logError(this.type + ': ' + e);
			}
		}
		if (isFailed) {
			throw new Error(this.type + ': Failed to run job. Please look into logs for more details.');
		}
	},

	getSysDomainFieldName: function() {
		return 'sys_domain';
	},

	type: 'AssetManagementPerGlideRecordBaseJob',
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-07-31 18:28:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;054adaa873c3330012a9e5e7caf6a79a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AssetManagementPerGlideRecordBaseJob&lt;/sys_name&gt;
        &lt;sys_package display_value="Asset Management" source="com.snc.asset_management"&gt;0ea009c76d2620100acb70b353433049&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_054adaa873c3330012a9e5e7caf6a79a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-03-28 23:50:48&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2126&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:49</sys_created_on>
        <sys_id>7b2c417a2f331110d8a4d5f62799b61f</sys_id>
        <sys_name>AssetManagementPerGlideRecordBaseJob</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_7b2c417a2f331110d8a4d5f62799b61f</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
