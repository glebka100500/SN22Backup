<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0559f113735f0010e37d71ef64f6a715</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ActivityContextServiceSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Gets installed as part of "com.snc.activity_subscriptions" plugin Activity Subscriptions Framework.&amp;#13;
An implementation class to perform activity related operations based on Activity Context&lt;/description&gt;
        &lt;name&gt;ActivityContextServiceSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ActivityContextServiceSNC = Class.create();
ActivityContextServiceSNC.prototype = {
    initialize: function(activitySubContext) {
			this.activityContextDao = new ActivityContextDao(activitySubContext);
    },

    /* 
     * This method returns Activities from multiple source tables based on the given context and activity type definitions
     * @parameter - contextId: sys_id of a record in the Activity Context table
     * @parameter - contextInstanceId: sys_id of a record in the context instance table, ex: sys_id of a contact
     * @parameter - facetIds: comma separated list of facet sys_ids
     * @parameter - recordId: sys_id of a record, applicable in case of dynamic facets
     */
    getActivities: function(reqObj) {
        if (!reqObj.contextId || !reqObj.contextInstanceId) {
            return {
                "status": 400,
                "message": gs.getMessage("Make sure a valid context and context_instance are passed")
            };
        }
        reqObj.pageStart = parseInt(reqObj.stFrom);
        reqObj.pageEnd = parseInt(reqObj.last);
        if (reqObj.pageStart &gt;= 0 &amp;&amp; reqObj.pageEnd &gt;= 0 &amp;&amp; reqObj.pageStart &gt; reqObj.pageEnd) {
            return {
                "status": 400,
                "message": gs.getMessage("stFrom can not be greater than last")
            };
        }
        if ((reqObj.startDate &amp;&amp; !reqObj.endDate) || (reqObj.endDate &amp;&amp; !reqObj.startDate))
            return {
                "status": 400,
                "message": gs.getMessage("Please provide start_date and end_date")
            };
        if (reqObj.startDate &amp;&amp; reqObj.endDate &amp;&amp; reqObj.startDate &gt; reqObj.endDate) {
            return {
                "status": 400,
                "message": gs.getMessage("start_date can not be ahead of end_date")
            };
        }
        /* metaContextGr: GlideRecord of Activity Context table
         * actualContextGr: GlideRecord of a table mentioned in Activity Context table, ex: GlideRecord of account table for the contextInstanceId
         */
        var metaContextGr = this.activityContextDao.activityUtils.getGlideRecord(ActivityConstants.TABLE_ACTIVITY_CONTEXT, {
            "sys_id": reqObj.contextId,
			"module.active": true
        });
        if (!metaContextGr || !metaContextGr.isValidRecord()) {
            return {
                "status": 400,
                "message": gs.getMessage("Provided context is not configured in the system")
            };
        }
        var actualContextGr = this.activityContextDao.activityUtils.getGlideRecord(metaContextGr.context_table, {
            "sys_id": reqObj.contextInstanceId
        }, null, true);
        if (!actualContextGr || !actualContextGr.isValidRecord()) {
            return {
                "status": 400,
                "message": gs.getMessage("Make sure a valid context_instance is passed")
            };
        }
        try {
            reqObj.actualContextGr = actualContextGr;
            reqObj.module = metaContextGr.module + "";
            var results = this.activityContextDao.getActivities(reqObj);
            return {
                "status": 200,
                "data": results
            };
        } catch (err) {
            return {
                "status": "500",
                "message": err.message
            };
        }
    },

    getActivityContexts: function(request) {
        if (!request.activityModule)
            return {
                "status": 400,
                "message": gs.getMessage("Make sure a valid activity module is passed")
            };

        try {
            var contexts = this.activityContextDao.getActivityContexts(request);
            return {
                "status": 200,
                "data": contexts
            };
        } catch (exception) {
            return {
                "status": "500",
                "message": exception.message
            };
        }
    },

    type: 'ActivityContextServiceSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-03-07 11:44:45&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0559f113735f0010e37d71ef64f6a715&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ActivityContextServiceSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Subscriptions and Activity Feed Framework" source="com.snc.activity_subscriptions"&gt;7427f20f2f400110d8a4d5f62799b6eb&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0559f113735f0010e37d71ef64f6a715&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-15 09:11:59&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3984&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:49</sys_created_on>
        <sys_id>ff2c417a2f331110d8a4d5f62799b623</sys_id>
        <sys_name>ActivityContextServiceSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_ff2c417a2f331110d8a4d5f62799b623</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
