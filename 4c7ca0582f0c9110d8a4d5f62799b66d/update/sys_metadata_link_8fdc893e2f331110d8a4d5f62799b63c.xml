<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7b30b50eeb2021003623666cd206fe7d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.cxs_RPConfig&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Configures the Record Producer Configuration [cxs_rp_config] table and manipulates contextual search on record producers.&lt;/description&gt;
        &lt;name&gt;cxs_RPConfig&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var cxs_RPConfig = Class.create();

cxs_RPConfig.prototype = {
    EXCLUDE_FIELDS_FROM_OBJECT: {
        "sys_created_by": true,
        "sys_created_on": true,
        "sys_domain": true,
        "sys_mod_count": true,
        "sys_updated_by": true,
        "sys_updated_on": true,
        "sys_package": true,
        "sys_update_name": true
    },

    RP_MACRO: "cxs_rp_search",

    initialize: function(gr) {
        this._gr = gr;
        this._gru = new GlideRecordUtil();
    },

    setName: function(configName) {
        if (!this._gr || !this._gr.getUniqueValue())
            return false;

        if (configName) {
            this._gr.name = configName;
            return true;
        }

        this._gr.name = this._gr.sc_cat_item.getDisplayValue();

        return true;
    },

    isDuplicate: function() {
        if (!this._gr)
            return false;

        // If this record is being updated and sc_cat_item has not changed
        // we don't need to check if we're creating a duplicate
        if (!this._gr.isNewRecord() &amp;&amp; (!this._gr.sc_cat_item.changes() &amp;&amp; !this._gr.active.changes()))
            return false;

        // Search for an existing record that matches the one we're trying to create/update
        var rpConfigGr = new GlideRecord("cxs_rp_config");
        rpConfigGr.addQuery("sys_id", "!=", this._gr.getUniqueValue());
        rpConfigGr.addQuery("sc_cat_item", this._gr.sc_cat_item);
		rpConfigGr.addActiveQuery();
        rpConfigGr.query();

        return rpConfigGr.hasNext();
    },

    getVariableIds: function() {
        var sysIds = [];

        if (!this._gr)
            return sysIds;

        var variableGr = new GlideRecord("item_option_new");
        variableGr.addQuery("sys_id", "IN", this.getCatItemVariableIds());
        variableGr.query();

        while (variableGr.next())
            sysIds.push(variableGr.getUniqueValue());

        return sysIds;
    },

    getCatItemVariableIds: function() {
        var sysIds = [];

        if (!this._gr)
            return sysIds;

        var catItemId = this._gr.sc_cat_item + "";
        if (!catItemId)
            return sysIds;

        var catItemGr = new GlideRecord("sc_cat_item");
        if (!catItemGr.get(catItemId))
            return sysIds;

        var searchableTypes = new cxs_RPVarTypes().getTypeMap();

        var catItemObj = GlideappCatalogItem.get(catItemId);
        var varsGr = catItemObj.getStandaloneVariables();
        while (varsGr.next())
            if (searchableTypes[varsGr.type])
                sysIds.push(varsGr.getUniqueValue());

        return sysIds;
    },

    getRPConfigObject: function() {
        var rpConfig = {};
        this._gru.populateFromGR(rpConfig, this._gr, this.EXCLUDE_FIELDS_FROM_OBJECT);
        rpConfig.resultsHeaderText = this._gr.getDisplayValue("results_header_text");
        rpConfig.configURL = this._gr.getLink(true);
        rpConfig.configDisplayValue = this._gr.getDisplayValue();
        rpConfig.search_field = {};
        this._gru.populateFromGR(rpConfig.search_field, this._gr.search_variable.getRefRecord(), this.EXCLUDE_FIELDS_FROM_OBJECT);

        return rpConfig;
    },

    isOnRecordProducer: function() {
        var varGr = new GlideRecord("item_option_new");
        varGr.addQuery("cat_item", this._gr.sc_cat_item);
        varGr.addQuery("macro.name", this.RP_MACRO);
        varGr.query();

        return varGr.hasNext();
    },

    addToRecordProducer: function() {
        if (this.isOnRecordProducer())
            return false;
    
        var maxVarOrderGa = new GlideAggregate("item_option_new");
        maxVarOrderGa.addQuery("cat_item", this._gr.sc_cat_item);
        maxVarOrderGa.addAggregate("MAX", "order");
        maxVarOrderGa.groupBy("cat_item");
        maxVarOrderGa.query();

        var order = 100;
        if (maxVarOrderGa.next())
            order = (maxVarOrderGa.getAggregate("MAX", "order") - 0) + 100;

        var varGr = new GlideRecord("item_option_new");
        if (!varGr.canCreate())
            return false;
        varGr.type = 14; // Macro
        varGr.cat_item = this._gr.sc_cat_item;
        varGr.macro.setDisplayValue(this.RP_MACRO);
        varGr.display_title = false;
        varGr.question_text = "Contextual Search Results";
        varGr.name = "contextual_search_results";
        varGr.order = order;
        varGr.insert();

        return true;
    },

    removeFromRecordProducer: function() {
        if (!this.isOnRecordProducer())
            return false;
    
        var varGr = new GlideRecord("item_option_new");
        if (!varGr.canDelete())
            return false;
        varGr.addQuery("cat_item", this._gr.sc_cat_item);
        varGr.addQuery("macro.name", this.RP_MACRO);
        varGr.query();

        if (varGr.next())
            return varGr.deleteRecord();

        return false;
    },

    deleteFilterConfigs: function() {
        var isActive = GlidePluginManager.isActive('com.snc.contextual_search.dynamic_filters');
        if (!isActive || !this._gr || !this._gr.getUniqueValue())
            return false;

        var filterConfigGr = new GlideRecord("cxs_rp_filter_config");
        if (!filterConfigGr.canDelete())
            return false;
        filterConfigGr.addQuery("cxs_rp_config", this._gr.getUniqueValue());
        filterConfigGr.deleteMultiple();
        return true;
    },

    type: 'cxs_RPConfig'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-05-09 10:58:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7b30b50eeb2021003623666cd206fe7d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;81&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;cxs_RPConfig&lt;/sys_name&gt;
        &lt;sys_package display_value="Contextual Search" source="com.snc.contextual_search"&gt;947281c76d6620100acb70b35343306d&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7b30b50eeb2021003623666cd206fe7d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-08-16 00:56:42&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5434&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:46</sys_created_on>
        <sys_id>8fdc893e2f331110d8a4d5f62799b63c</sys_id>
        <sys_name>cxs_RPConfig</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_8fdc893e2f331110d8a4d5f62799b63c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
