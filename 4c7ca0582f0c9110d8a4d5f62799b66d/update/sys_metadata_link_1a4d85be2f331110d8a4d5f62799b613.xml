<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>99ea9a24eb0201100dba9147c152281b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DMScheduler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Schedule Data Managment Delete/update operations&lt;/description&gt;
        &lt;name&gt;DMScheduler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DMScheduler = Class.create();
DMScheduler.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    scheduleDM: function() {

        var dm_table = this.getParameter('sysparm_dm_table');
        var number = this.getParameter('sysparm_number');
        var table = this.getParameter('sysparm_table');
        var condition = this.getParameter('sysparm_condition');
		condition = new GlideStringUtil().unEscapeHTML(condition);
        var setWorkflow = this.getParameter('sysparm_set_workflow');
        var runAt = this.getParameter('sysparm_run_at');
        var sysId = this.getParameter('sysparm_sys_id');

        var setSystemFields = this.getParameter('sysparm_set_system_fields');
        var updateFieldValue = this.getParameter('sysparm_set_value');

        this.schedule(dm_table, number, sysId, table, condition, setWorkflow, setSystemFields, updateFieldValue, runAt);

        return '';
    },

    schedule: function(dm_table, number, sysId, table, condition, setWorkflow, setSystemFields, updateFieldValue, runAt) {
        var jobName;
        var script = "var gr = new GlideRecord('" + dm_table + "');" +
            " gr.addQuery('sys_id', '" + sysId + "');" +
            " gr.query();" +
            " if (gr.next())" +
            " { var dmAPI = new SNC.DataManagementAPI(); ";

        if (dm_table == 'sys_dm_delete') {
            jobName = "Delete Job: " + number;
            script += " dmAPI.executeDelete(gr);}";
        } else if (dm_table == 'sys_dm_update') {
            jobName = "Update Job: " + number;
            script += " dmAPI.executeUpdate(gr);}";
        } else {
            //unknown table
            return '';
        }

        //set run_at time
        var runDt = new GlideDateTime();
        if (!gs.nil(runAt))
            runDt.setDisplayValue(runAt);


        var gr = new GlideRecord(dm_table);
        if (gr.get(sysId)) {
            gr.setValue('table', table);
            gr.setValue('condition', condition);
            gr.setValue('set_workflow', setWorkflow);
            gr.setValue('state', 'scheduled');
            gr.setValue('run_at', runDt);
            if (dm_table == 'sys_dm_update') {
                gr.setValue('set_system_fields', setSystemFields);
                updateFieldValue = new GlideStringUtil().unEscapeHTML(updateFieldValue);
                gr.setValue('set_value', updateFieldValue);
            }

            var trig = new GlideRecord("sys_trigger");
            if (gr.schedule.nil()) {
                // Schedule Job for for future run at date 
                trig.initialize();
                trig.setValue("state", 0); // ready
                trig.setValue("trigger_type", 0); // run once 
                trig.setValue("next_action", runDt);
                trig.setValue("name", jobName);
                trig.setValue("script", script);
                var jobSysId = trig.insert();

                gr.setValue('schedule', jobSysId);
                gr.update();
            } else {
                if (trig.get(gr.schedule)) {
                    trig.setValue("next_action", runDt);
                    trig.setValue("state", 0);
                    trig.update();
                }
				gr.update();
            }
        }
        return '';
    },


    type: 'DMScheduler'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-02 06:58:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;99ea9a24eb0201100dba9147c152281b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DMScheduler&lt;/sys_name&gt;
        &lt;sys_package display_value="Data Management" source="com.glide.data_management"&gt;5a5355e12f221110d8a4d5f62799b631&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_99ea9a24eb0201100dba9147c152281b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-23 18:19:41&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3303&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:30:38</sys_created_on>
        <sys_id>1a4d85be2f331110d8a4d5f62799b613</sys_id>
        <sys_name>DMScheduler</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_1a4d85be2f331110d8a4d5f62799b613</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
