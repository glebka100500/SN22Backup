<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>97b320be53a6101089abddeeff7b1233</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SNHelpDocumentController&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SNHelpDocumentController&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SNHelpDocumentController = Class.create();
SNHelpDocumentController.prototype = {
    initialize: function() {
		this.constants = new SNHelpConstantProvider();
		this.dbController = new SNHelpDBController(this.constants.tables.guidance);
		this._helpUtil = new SNHelpUtil();
		// embedded help version to filter the document
		this.version = gs.getProperty("com.glide.embedded_help.version", gs.getProperty("glide.buildname"));
    },
	/*
	Checks to see if embedded help exists in database for given sys_id then
	checks if the user has a role for the help content
	If it does, return the help content.  If not, return null
	*/
	getById: function(sys_id) {
		var ehContent,
			ehContentController,
			documentKeys,
			ehContentKeys;
		var result = this.dbController.getById(sys_id);

		if (!result)
			return null;

		if(!this.validateRoles(result.roles))
			return null;

		documentKeys = this.constants.restAPIKeys.document;
		result = this._helpUtil.constructPayLoad(documentKeys, [result]);



		if(Array.isArray(result) &amp;&amp; result.length &gt; 0) {
			result = result[0];
			if(result.eh_content) {
				ehContentController = new SNHelpDBController(this.constants.tables.eh_content);
				ehContent = ehContentController.getById(result.eh_content);
				ehContentKeys = this.constants.restAPIKeys.eh_content;
				result.eh_content = this._helpUtil.constructPayLoad(ehContentKeys, [ehContent]);

				if(Array.isArray(result.eh_content) &amp;&amp; result.eh_content.length &gt; 0)
					result.eh_content = result.eh_content[0];
			}
			return result;
		}
		else
			return null;
	},

	searchDocuments : function(context, app_route, routeObj) {
		var i,
			query = "",
			result,
			relatedResults,
			documentKeys,
			orderByField = "order",
			searchResult = [];
		var arrayUtil = new ArrayUtil();
		if(!context)
			return null;

		query = this.getQuery(context, app_route);
		result = this.dbController.getByEncodedQuery(query, orderByField);

		query = this.getRelatedQuery(context, app_route);

		if(query) {
			relatedResults = this.dbController.getByEncodedQuery(query, orderByField);
		}


		if (result.length &amp;&amp; relatedResults.length)
			arrayUtil.concat(result,relatedResults);
		else if (result.length || relatedResults.length)
			result = result.length ? result : relatedResults;
		else
			return null;

		documentKeys = this.constants.restAPIKeys.document;

		for (i = 0; i &lt; result.length; i++) {
			if (this.validateRoles(result[i].roles) &amp;&amp;
				this.isSubSet(routeObj, result[i].route_params))
				searchResult.push.apply(searchResult, this._helpUtil.constructPayLoad(documentKeys, [result[i]]));
		}

		return searchResult;
	},

	getQuery : function(context, app_route) {
		var query = "";

		if (app_route)
			query += "app_route=" + app_route;
		else
			query += "app_route=NULL"; // Should we return all the content here ???
		if (context)
			query += "^context=" + context;
		
		query = this.addFilterQuery(query);
		return query;
	},
	/*
	* if app_route is workspace and context is module/list/listId
	* return documents for  module/list
	* Also, if context is new_record/table return documents for record/table too..
	*
	*/
	getRelatedQuery: function(context, app_route) {
		var separator = this.constants.separator,
			query = "",
			table,
			listWithId,
			newRecord;

		if (app_route &amp;&amp; app_route.indexOf("workspace") === 0) {

			listWithId = ["module", "list", ""].join(separator),
			newRecord = ["new_record", ""].join(separator);

			if (context.indexOf(listWithId) &gt;= 0) {
				query += "app_route=" + app_route;
				query += "^context=" + listWithId.substr(0, listWithId.length - 1);
			} else if (context.indexOf(newRecord) &gt;= 0) {
				query += "app_route=" + app_route;
				table = context.split(separator)[1];
				query += "^context=" + ["record", table].join(separator);
			}
		}
		query = this.addFilterQuery(query);
		return query;
	},
	// if query is not empty add status published &amp; type to embedded help
	addFilterQuery : function(query) {
		var version = this.version ? this.version.toLowerCase() : "";
		if(query) {
			query += "^active=true^status=published^type=embedded_help";
			query += "^version=" + version + "^ORversion=all";
		}
		return query;
	},

	/*
	* Check if guidance has non empty route_params 
	* and is subset of current request route_params
	*/
	isSubSet: function(superSet, subSet) {
		if(!superSet)
			return false;
		
		if(!subSet)
			return true;
		
		try {
			if(typeof subSet === "string")
				subSet = JSON.parse(subSet);
			var self = this;
			return Object.keys(subSet).every(function(key){
				var subsetItem = subSet[key];
				var supersetItem = superSet[key];
				if ((typeof subsetItem === 'object' &amp;&amp; subsetItem !== null) ? !self.isSubSet(supersetItem, subsetItem) : supersetItem != subsetItem) 
				return false;
			return true;
			});
		} catch (ex) {
			return false;
		}
	},

	/*
	* Check if the user has roles to access guidance record
	* returns true, if user has any one role matching list of roles specified on guidance record
	* return true, if there is no roles Specified on guidance record
	* returns false otherwise
	* param : guidance - Guidance record to test if user has role to see this record.
	*/
	validateRoles: function(roles) {
		// Return true for maint user.
		if(gs.getUser().hasRole("maint"))
			return true;

		if (roles) {
			roles = roles.split(",");
			for (var i =0; i &lt; roles.length; i++)
				if(gs.getUser().hasRole(roles[i]))
					return true;
			return false;
		} else {
			// No roles specified on guidance record...
			return true;
		}
	},


    type: 'SNHelpDocumentController'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-08-14 05:26:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;97b320be53a6101089abddeeff7b1233&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;50&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SNHelpDocumentController&lt;/sys_name&gt;
        &lt;sys_package display_value="ServiceNow Help and Guidance Backend" source="com.glide.sn_help"&gt;b9e3c10b6da620100acb70b353433052&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_97b320be53a6101089abddeeff7b1233&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-11 08:30:00&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5580&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:30:04</sys_created_on>
        <sys_id>422d81be2f331110d8a4d5f62799b65c</sys_id>
        <sys_name>SNHelpDocumentController</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_422d81be2f331110d8a4d5f62799b65c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
