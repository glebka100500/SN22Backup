<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>878d1a940b333200572a6f3ef6673a8d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdVerifyEmailProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Extension for Email verification of user input on the second page. &lt;/description&gt;
        &lt;name&gt;PwdVerifyEmailProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdVerifyEmailProcessor = Class.create();

PwdVerifyEmailProcessor.prototype = {
    category: 'password_reset.extension.verification_form_processor',   // DO NOT REMOVE THIS LINE!

    /**********
     * Initialization stuff here...
     **********/
    initialize: function() {
    },

	/**********
	* Process the verification form request, and return whether the user was successfully verified
        * 
	* @param params.resetRequestId The sys-id of the current password-reset request (table: pwd_reset_request)
	* @param params.userId         The sys-id of the user trying to be verified (table: sys_user)
	* @param params.verificationId The sys-id of the verification to be processed (table: pwd_verification)
	* @param request               The form request object. fields in the form can be accessed using: request.getParameter('&lt;element-id&gt;')
	* @return boolean telling whether the user is successfully verified
	**********/
	processForm: function(params, request) {
	   var isVerified = false;
	   try {
	       isVerified = this.verify(params.resetRequestId, params.userId, params.verificationId, request);
	   } catch (scriptErr) {
	       gs.logError("[PwdVerifyEmailProcessor.processForm]: '" + scriptErr + "'");
	       isVerified = false;
	   }
	   return isVerified;
	},
    
    /*********
	
	
	
     * verify - returns true/false whether the user is verified for this verification method.
     *
     * Params: 
	 * @enrolled_user_id
	 * @verification_id
	 * @request - the request object that was submitted by the user in the verification form
     *********/
    verify: function(reset_request_id, enrolled_user_id, verification_id, request) {
		var LOG_ID = '[PwdVerifyEmailProcessor.verify] ';

		var mode = request.getParameter('sysparm_email_verification_mode');
		var answer = request.getParameter('sysparm_answer_email_code').trim();
		gs.log(LOG_ID + "request_id: '" + reset_request_id + "', answer: '" + answer + "'");

		var ret = false;
		var emailMgr = new PwdEmailNotificationManager ();
		if (mode == 'subscription' || mode == 'notEnrolled')
			ret = emailMgr.verifyResetCode(reset_request_id, verification_id, answer);
		else 
			gs.logError(LOG_ID + " unknown operation requested. request_id: '" + reset_request_id + "'");	
		
		//If the code has been previously validated, return that result. 
		//The code is expired after initial validation, resulting in an incorrect result
		
		var reqVerGr = new GlideRecord('pwd_map_request_to_verification');
		reqVerGr.addQuery('verification', verification_id);
		reqVerGr.addQuery('request', reset_request_id);
		reqVerGr.query();
		
		var recordExists = reqVerGr.next();
		if (recordExists &amp;&amp; reqVerGr.getValue('status') == 'verified')
            return true;

        reqVerGr.setValue('status', ret ? 'verified' : 'not_verified');
        if (!recordExists) {
            reqVerGr.setValue('request', reset_request_id);
            reqVerGr.setValue('verification', verification_id);
            reqVerGr.insert();
        }
        else
            reqVerGr.update();


		return ret;
    },
        
    type: 'PwdVerifyEmailProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-07-02 22:04:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;878d1a940b333200572a6f3ef6673a8d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdVerifyEmailProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;a54385836da620100acb70b3534330a5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_878d1a940b333200572a6f3ef6673a8d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-10-26 18:31:19&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3126&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:12</sys_created_on>
        <sys_id>99fcc17e2f331110d8a4d5f62799b6c6</sys_id>
        <sys_name>PwdVerifyEmailProcessor</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_99fcc17e2f331110d8a4d5f62799b6c6</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
