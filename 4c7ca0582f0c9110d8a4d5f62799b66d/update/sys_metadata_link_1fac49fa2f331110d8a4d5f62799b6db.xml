<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>62616b9d9f7012000391b89a442e706d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OCGroup&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Class to represent a sys_user_group object for on-call scheduling.&amp;#13;
&amp;#13;
Extend this class to add or modify behaviour.&lt;/description&gt;
        &lt;name&gt;OCGroup&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var OCGroup = Class.create();
OCGroup.prototype = {
    initialize: function(groupId) {
    	this.log = new GSLog("com.snc.on_call_rotation.log.level", this.type);
		this.groupId = groupId;
    },

	/* Get an array of User objects for active users in a group
	 *
	 * @return [Array]: An array of user objects which each contain two keys, 
	 *				    'sys_id' and 'name' of the sys_user record
	 */
	getMembers: function() {
		var members = [];
		if (JSUtil.nil(this.groupId))
			return members;

		var liveProfile = new GlideappLiveProfile();
		var liveFeedApi = new SNC.LiveFeedApi();
		var gr = new GlideRecord('sys_user_grmember');
		gr.addQuery('group', this.groupId);
		gr.addQuery('user.active', 'true');
		gr.orderBy('user.name');
		gr.query();
		while (gr.next()) {

			var userContactNumber = '';
			if (!this.checkAccess) {
				userContactNumber = (gr.user.mobile_phone + '' != '') ? gr.user.mobile_phone + '' : gr.user.phone + '';
			} else if ((gr.user.mobile_phone + '' != '') &amp;&amp; gr.user.mobile_phone.canRead()){
				userContactNumber = gr.user.mobile_phone + '';
			} else if (gr.user.phone.canRead()) {
				userContactNumber = gr.user.phone + '';
			}
			
			members.push({
					'name': gr.user.name + '',
					'sys_id': gr.user + '',
					'user_email': (!this.checkAccess || gr.user.email.canRead()) ? gr.user.email + '' : '',
					'user_contact_number': userContactNumber,
					'userID': gr.user + '',
					'initials': liveFeedApi.getInitials(gr.user.name + ''),
					'avatar': liveProfile.getAvatar(liveProfile.getID(gr.user.sys_id + ''))
				});
		}
		return members;
	},

	/* Get an array of User objects for active users in a group that are on-call at this point in time
	 *
	 * @return [Array]: An array of user objects which each contain two keys,
	 *				    'sys_id' and 'name' of the sys_user record
	 */
	getOnCallMembers: function() {
		var liveProfile = new GlideappLiveProfile();
		var liveFeedApi = new SNC.LiveFeedApi();
		var spans = new OCRotationV2()
		.setStartDate(this.startDateTime)
		.setEndDate(this.endDateTime)
		.setGroupIds(this.groupId)
		.setRotaIds(this.rotaIds)
		.setRosterIds(this.rosterIds)
		.getSpans();

		var memberSysIds = [];
		for (var i = 0; i &lt; spans.length; i++)
			if (spans[i].table == 'cmn_rota_member')
				memberSysIds.push(spans[i].user_id);

		var members = [];
		var gr = new GlideRecord('sys_user_grmember');
		gr.addQuery('group', this.groupId);
		gr.addQuery('user.active', 'true');
		gr.addQuery('user.sys_id', 'IN', memberSysIds);
		gr.query();
		
		var phone = gr.user.mobile_phone + '' != '' ? gr.user.mobile_phone : gr.user.phone;
		while (gr.next()) {

			var userContactNumber = '';
			if (!this.checkAccess) {
				userContactNumber = (gr.user.mobile_phone + '' != '') ? gr.user.mobile_phone + '' : gr.user.phone + '';
			} else if ((gr.user.mobile_phone + '' != '') &amp;&amp; gr.user.mobile_phone.canRead()){
				userContactNumber = gr.user.mobile_phone + '';
			} else if (gr.user.phone.canRead()) {
				userContactNumber = gr.user.phone + '';
			}
			
			members.push({
					'name': gr.user.name + '',
					'sys_id': gr.user + '',
					'user_email': (!this.checkAccess || gr.user.email.canRead()) ? gr.user.email + '' : '',
					'user_contact_number': userContactNumber + '',
					'userID': gr.user + '',
					'initials': liveFeedApi.getInitials(gr.user.name),
					'avatar': liveProfile.getAvatar(liveProfile.getID(gr.user.sys_id + ''))
				});
		}
		return members;
	},

	/* Get an array of User objects for active users in a group that are NOT on-call at this point in time
	 *
	 * @return [Array]: An array of user objects which each contain two keys, 
	 *				    'sys_id' and 'name' of the sys_user record
	 */
	getAvailableMembers: function() {
		var allMembers = this.getMembers();
		var onCallMembers = this.getOnCallMembers();
		var memberIndex = this._indexFrom(onCallMembers);
		this.log.debug("[getAvailableMembers] allMembers: " + JSON.stringify(allMembers));
		this.log.debug("[getAvailableMembers] onCallMembers: " + JSON.stringify(onCallMembers));
		return this._difference(allMembers, memberIndex, this._hasMember);
	},

	getRefQualAvailableMembers: function(rotaMemberGr, rosterGr) {
		if (!JSUtil.nil(rotaMemberGr) &amp;&amp; !JSUtil.nil(rotaMemberGr.roster.rota.group))
			this.groupId = rotaMemberGr.roster.rota.group;
		else if (!JSUtil.nil(rosterGr) || !JSUtil.nil(rosterGr.rota.group))
			this.groupId = rosterGr.rota.group;
		if (JSUtil.nil(this.groupId))
			return "";
		this.log.debug("[getRefQualAvailableMembers] groupId: " + this.groupId);
		var members = [];
		var gr = new GlideRecord("sys_user_grmember");
		gr.addQuery("group", this.groupId);
		gr.addQuery("user.active", "true");
		gr.orderBy("user.name");
		gr.query();
		while (gr.next())
			members.push(gr.user + "");
		if (members.length &gt; 0)
			return "sys_idIN" + members.join(",");
		return "";
	},
	
	setCheckAccess: function(checkAccess) {
		this.checkAccess = checkAccess;
		return this;
	},

	setGroupId: function(groupId) {
		this.groupId = groupId;
		return this;
	},

	setStartDateTime: function(startDateTime) {
		this.startDateTime = startDateTime;
		return this;
	},

	setEndDateTime: function(endDateTime) {
		this.endDateTime = endDateTime;
		return this;
	},

	setRotaIds: function(rotaIds) {
		this.rotaIds = rotaIds;
		return this;
	},

	setRosterIds: function(rosterIds) {
		this.rosterIds = rosterIds;
		return this;
	},

	_indexFrom: function(members) {
		var index = {};
		for (var i = 0; i &lt; members.length; i++) {
			var subindex = index.hasOwnProperty(members[i].sys_id) ? index[members[i].sys_id] : index[members[i].sys_id] = {};
			subindex[members[i].name] = {};
		}
		return index;
	},

	_hasMember: function (member, index) {
		return index.hasOwnProperty(member.sys_id);
	},

	_difference: function (members, index, has) {
		var result = [];
		for (var i = 0; i &lt; members.length; i++) {
			var member = members[i];
			if (!has(member, index))
				result.push(member);
		}
		return result;
	},

    type: 'OCGroup'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-01-06 10:06:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;62616b9d9f7012000391b89a442e706d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OCGroup&lt;/sys_name&gt;
        &lt;sys_package display_value="On-Call Scheduling" source="com.snc.on_call_rotation"&gt;37d4c9836de620100acb70b3534330d3&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_62616b9d9f7012000391b89a442e706d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-19 06:52:18&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6004&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:58</sys_created_on>
        <sys_id>1fac49fa2f331110d8a4d5f62799b6db</sys_id>
        <sys_name>OCGroup</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_1fac49fa2f331110d8a4d5f62799b6db</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
