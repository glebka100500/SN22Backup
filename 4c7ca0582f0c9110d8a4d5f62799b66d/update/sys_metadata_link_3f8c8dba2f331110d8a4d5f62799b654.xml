<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>508f4cbc0a25810200b051fed91e04c6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.Diagnostics&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Gather various system diagnostic information including node status information&lt;/description&gt;
        &lt;name&gt;Diagnostics&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");

var Diagnostics = Class.create();
Diagnostics.prototype = {
   
   initialize: function() {
      this.fillConditions();
      this.fillNodes();
      this.fillEventCounts();
      this.fillLogCounts();
      this.fillEmailCounts();
      this.fillLogSizes();
      this.nodeIndex = -1;
   },
   
   nextNode: function() {
      if (this.nodeIndex &lt;= this.nodes.length)
          this.nodeIndex++;
          
      return (this.nodeIndex &lt; this.nodes.length);
   },
   
   getNode: function() {
      if (this.nodeIndex &lt; this.nodes.length)
         return this.nodes[this.nodeIndex];
         
      return null;
   },

   fillConditions: function() {
      this.conditions = {};
      var gr = new GlideRecord('sys_properties');
      gr.addQuery('name', 'STARTSWITH', 'diagnostics.condition.');
      gr.query();
      while (gr.next()) {
         var n = gr.name.toString().substring(22);
         var v = gr.value.toString();
         this.conditions[n] = v;
      } 
   },
   
   fillNodes: function() {
      this.nodes = [];
      var gr = new GlideRecord('sys_cluster_state');
      gr.query();
      while (gr.next()) {
         var node = this._fillNode(gr);
         if (node)
            this.nodes.push(node);
      }
   },
   
   _fillNode: function(gr) {
      var systemId = gr.system_id.toString();
      var node;

      if (systemId == GlideServlet.getSystemID()) {
          node = this._fillFromLocal(gr);
      } else {
          node = this._fillFromClusterState(gr);
      }

      node.nameLink = "&lt;a class='linked' href='sys_cluster_state.do?sys_id=" + gr.sys_id.toString() +
                      "&amp;sys_target=node_stats.stats&amp;XML=&amp;sysparm_stack=no' target='_new'&gt;" + node.name + "&lt;/a&gt;";

      return node;
   },

   _fillFromLocal: function(gr) {
      var node = {};
      node.name = gr.system_id.toString();
      node.status = gr.status.toString();
      node.lastDate = gr.nowDateTime();
      node.lastDateDiff = gs.dateDiff(node.lastDate, gs.nowDateTime(), true);

      try {
         var xml = new XMLHelper(new GlideXMLStats().toStringWithInclude(gs.getProperty("glide.cluster.xmlstats")));
         node.stats = xml.toObject();
         return node;
      } catch (ex) {
         gs.log("ERROR: " + ex);
         return null;
      }
   },

   _fillFromClusterState: function(gr) {
      // ignore nodes with empty xml stats
      if (gr.node_stats.stats.nil())
         return null;

      var node = {};
      node.name = gr.system_id.toString();
      node.status = gr.status.toString();
      node.lastDate = gr.most_recent_message.getDisplayValue();
      node.lastDateDiff = gs.dateDiff(node.lastDate, gs.nowDateTime(), true);
      try {
         var xml = new XMLHelper(gr.node_stats.stats.toString());
         node.stats = xml.toObject();
         return node;
      } catch (ex) {
         return null;
      }

   },
   
   fillEventCounts: function() {
      var agg = new GlideAggregate('sysevent');
      agg.addQuery('state', '=', 'ready');
      agg.addAggregate("COUNT");
      agg.query();
      this.eventCount = 0;
      if (agg.next())
         this.eventCount = agg.getAggregate("COUNT");
   },
   
   fillLogCounts: function() {
      var agg = new GlideAggregate('syslog');
      agg.addQuery('sys_created_on', '&gt;', gs.minutesAgo(60));
      agg.addAggregate("COUNT");
      this.logCount = 0;
      agg.query();
      if (agg.next())
         this.logCount = agg.getAggregate("COUNT");
   },
   
   fillEmailCounts: function() {
      var oneHourAgo = gs.minutesAgo(60);
      var agg = new GlideAggregate('sys_email');
      agg.addQuery('type', 'received');
      agg.addQuery('sys_created_on', '&gt;', oneHourAgo);
      agg.addAggregate("COUNT");
      agg.query();
      this.emailReceivedCount = 0;
      if (agg.next())
         this.emailReceivedCount = agg.getAggregate("COUNT");
         
      agg = new GlideAggregate('sys_email');
      agg.addQuery('type', 'sent');
      agg.addQuery('sys_created_on', '&gt;', oneHourAgo);
      agg.addAggregate("COUNT");
      agg.query();
      this.emailSentCount = 0;
      if (agg.next())
         this.emailSentCount = agg.getAggregate("COUNT");
         
      this.pop3Status = '';
      this.smtpStatus = '';
      var gr = new GlideRecord('sys_status');
      gr.addQuery('name', 'glide.pop3.status');
      gr.query();
      if (gr.next())
         this.pop3Status = gr.value.toString();

      gr.initialize(); 
      gr.addQuery('name', 'glide.smtp.status');
      gr.query();
      if (gr.next())
         this.smtpStatus = gr.value.toString();
      else
         this.smtpStatus = gs.getMessage('No emails sent yet');
   },
   
   fillLogSizes: function() {
      
   },

   type: 'Diagnostics'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2008-06-03 22:33:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;508f4cbc0a25810200b051fed91e04c6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;61&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Diagnostics&lt;/sys_name&gt;
        &lt;sys_package display_value="System Diagnostics" source="com.glide.ui.diagnostics"&gt;13f0c1cb6d2620100acb70b353433029&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_508f4cbc0a25810200b051fed91e04c6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2012-06-26 16:05:57&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4754&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:28</sys_created_on>
        <sys_id>3f8c8dba2f331110d8a4d5f62799b654</sys_id>
        <sys_name>Diagnostics</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_3f8c8dba2f331110d8a4d5f62799b654</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
