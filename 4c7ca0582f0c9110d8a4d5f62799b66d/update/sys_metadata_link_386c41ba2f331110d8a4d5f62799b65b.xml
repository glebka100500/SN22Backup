<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>304bb9019f000200598a5bb0657fcf35</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PlanningConsoleSecurityValidator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PlanningConsoleSecurityValidator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PlanningConsoleSecurityValidator = Class.create();
/* Given a Project Id, Derives the access Levels */

PlanningConsoleSecurityValidator.prototype = {
    initialize: function() {
    },

    glideRecord: function(entityClassName) {
        var gr = new GlideRecord(entityClassName);
        gr.initialize();
        return gr;
    },

    planningConsoleEntityPreference: function() {
        return gs.getUser().getPreference(PmFieldConstants.PLANNING_CONSOLE_ENTITY_ID);
    },

    getSysClassName: function() {
        var taskGr = new GlideRecord('planned_task');
        if( taskGr.get(this.planningConsoleEntityPreference())) {
            return taskGr.getValue("sys_class_name");
        }
    },

    canCreate: function(sysClassName) {
        PPMDebug.log("Into PlanningConsoleSecurityValidator.canCreate -&gt; " +  sysClassName);
        sysClassName = sysClassName || this.getSysClassName(this.planningConsoleEntityPreference());
        PPMDebug.log("Into PlanningConsoleSecurityValidator.sysClassName -&gt; " +  sysClassName);
        return this.glideRecord(sysClassName).canCreate();
    },

    canRead: function() {
        var sysClassName = this.getSysClassName(this.planningConsoleEntityPreference());
        return this.glideRecord(sysClassName).canCreate();
    },

    canWrite: function() {
        var sysClassName = this.getSysClassName(this.planningConsoleEntityPreference());
        return this.glideRecord(sysClassName).canWrite();
    },

    canDelete: function() {
        var sysClassName = this.getSysClassName(this.planningConsoleEntityPreference());
        return this.glideRecord(sysClassName).canDelete();
    },

    access: function( entityClassName, entityId ) {
        var access = {
            access: this.hasAccess(entityClassName, entityId),
            crudAccess: this.hasCRUDAccess(entityClassName, entityId)
        };
        //gs.info("access: " + access.access + " ; crudAccess: " + access.crudAccess);
    },

    hasAccess: function(entityClassName, entityId) {
        PPMDebug.log("Into PlanningConsoleSecurityValidator.hasAccess -&gt; " +  entityClassName + " | " + entityId);
        var gr;
        for ( var i=0; i&lt;entityId.length; i++ ) {
            gr = this.glideRecord(entityClassName);
            if ( gr.get(entityId[i]) &amp;&amp; gr.canRead() )
                continue;
            else
                return false;
        }
        return true;
    },
    
    hasCRUDAccess: function(entityClassName, entityId) {
        var gr;
        for ( var i=0; i&lt;entityId.length; i++ ) {
            gr = this.glideRecord(entityClassName);
            if ( gr.get(entityId[i]) &amp;&amp; gr.canRead() &amp;&amp; gr.canCreate() &amp;&amp; gr.canWrite() &amp;&amp; gr.canDelete() )
                continue;
            else
                return false;
        }
        return true;
    },

    createBaselineAccess: function() {
        return gs.hasRole('project_manager');
    },

    createOrUpdateTaskAccess: function(entityClassName) {
        var projectTaskTable = SNC.PPMConfig.getProjectTaskTable(entityClassName);
        //gs.info("createOrUpdateTaskAccess : projectTaskTable --&gt; " + projectTaskTable);
        var gr = new GlideRecord(projectTaskTable);
        return gr.canCreate() || gr.canWrite();
    },

    hasWbAccess: function (entityClassName) {
        PPMDebug.log("Into PlanningConsoleSecurityValidator.hasWbAccess -&gt; " +  entityClassName);
        var role = SNC.PPMConfig.getProjectRole('manager', entityClassName);
        var hasWbAccess = gs.hasRole(role);
        gs.print("Into PlanningConsoleSecurityValidator.hasWbAccess -&gt; " + hasWbAccess + " | " + role);
        return hasWbAccess;
    },

    type: 'PlanningConsoleSecurityValidator'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-05-14 05:17:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;304bb9019f000200598a5bb0657fcf35&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PlanningConsoleSecurityValidator&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;e93557642fc10110d8a4d5f62799b623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_304bb9019f000200598a5bb0657fcf35&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-02-20 11:02:03&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3707&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:42</sys_created_on>
        <sys_id>386c41ba2f331110d8a4d5f62799b65b</sys_id>
        <sys_name>PlanningConsoleSecurityValidator</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_386c41ba2f331110d8a4d5f62799b65b</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
