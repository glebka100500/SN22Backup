<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21cc9718531e01105400ddeeff7b12f2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AISearchGlideSignalsGeniusResultEvent&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Collects GENIUS_RESULT_EVENT metrics for AI search. The collected payload will be sent to Glide Signals API&lt;/description&gt;
        &lt;name&gt;AISearchGlideSignalsGeniusResultEvent&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AISearchGlideSignalsGeniusResultEvent = Class.create();

AISearchGlideSignalsGeniusResultEvent.prototype = Object.extendsObject(global.AISearchGlideSignalsEvent, {
		
	intents:[],
	CATALOG_SOURCE_TABLE:'sc_cat_item',
	USER_SOURCE_TABLE:'sys_user',
	USER_INTENT:'personFind',
	CATALOG_INTENT:'catalogFind',
	
	initialize: function(searchResultMetadata, paramBag) {
		
		global.AISearchGlideSignalsEvent.prototype.initialize.call(this, searchResultMetadata, paramBag);
		
		var intents = searchResultMetadata[global.AISearchConstants.MATCHED_GENIUS_RESULT_INTENTS];
		this.intents = gs.nil(intents) ? [] : intents.split(',');
	},
	
	buildPayload: function(data) {
		
		if (gs.nil(data))
			return;
		
		var propValues = data.propValues;
		var model = data.propValues.model;
		var action = data.propValues.actions[0];
		
		if (gs.nil(model) || gs.nil(action))
			return;
		
		var resultSysId = this.getResultSysId(model);
		
		this.setValue(global.AISearchConstants.RESULT_SYS_ID, resultSysId);
		this.setValue(global.AISearchConstants.LABEL_DESCRIPTION, this._getLabelDescription(model));	
		
		var srcTable = this.getSourceTable(model);
		
		this.setValue(global.AISearchConstants.SOURCE_TABLE, srcTable);
		this.setValue(global.AISearchConstants.CARD_TYPE,  this._getCardType(model));
		this.setValue(global.AISearchConstants.ACTION_TYPE, this._getActionType(action));
		this.setValue(global.AISearchConstants.ACTION_ID, this._getActionId(action));
		this.setValue(global.AISearchConstants.AIS_DOC_ID, this.getAISDocId(srcTable, resultSysId));
		this.setValue(global.AISearchConstants.ACTION_VALUE, this._getActionValue(action));
		this.setValue(global.AISearchConstants.CARD_TYPE, this._getCardType(model));
		this.setValue(global.AISearchConstants.MATCHED_INTENTS_PER_SOURCE, this._getMatchedIntentPerSource(srcTable));
	
	},
	
	_getMatchedIntentPerSource: function(srcTable) {
		
		for(var i=0; i&lt;this.intents.length; i++) {
			var intent = this.intents[i];
			
			if (srcTable == this.CATALOG_SOURCE_TABLE &amp;&amp; intent.toLowerCase().indexOf('catalog') &gt; -1)
				return this.CATALOG_INTENT;
			else if (srcTable == this.USER_SOURCE_TABLE &amp;&amp; intent.toLowerCase().indexOf('person') &gt; -1)
				return this.USER_INTENT;
			
			return '';
		}
	},
	
	_getActionType: function(action) {
		return (!gs.nil(action) &amp;&amp; !gs.nil(action.actionType))? action.actionType : '';
	},
	
	_getActionId: function(action) {
		return (!gs.nil(action) &amp;&amp; !gs.nil(action.actionType) &amp;&amp; !gs.nil(action.assignmentId)) ?  action.assignmentId: '';
	}, 
	
	_getActionValue: function(action) {
		return (!gs.nil(action) &amp;&amp; !gs.nil(action.actionType) &amp;&amp; !gs.nil(action.label)) ?  action.label: '';
	},
	
	_getLabelDescription: function(model) {
		var desc = model['columns.ai_search_teaser_title'] || model['columns.name'] || model['columns.label'];
		return global.AISearchHelper.stripHighlightTags(desc);
	},
	
	_getCardType: function(model) {
		return  model.model || ''; // Model is the type of the Genius Card Template
	},
	
	getEventType: function() {
		return global.AISearchConstants.RESULT_EVENT_TYPE_GENIUS;
	},
	
	type: 'AISearchGlideSignalsGeniusResultEvent'
});														   ]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-14 02:47:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21cc9718531e01105400ddeeff7b12f2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AISearchGlideSignalsGeniusResultEvent&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;f9f62e472f000110d8a4d5f62799b60c&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_21cc9718531e01105400ddeeff7b12f2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-27 22:28:02&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3162&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:24</sys_created_on>
        <sys_id>185cc97a2f331110d8a4d5f62799b6bc</sys_id>
        <sys_name>AISearchGlideSignalsGeniusResultEvent</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_185cc97a2f331110d8a4d5f62799b6bc</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
