<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7adea2dac3f12010456b91f58640dd4e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFArtifactTranslationStatus&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Responsible for returning translation status response for given languages and sys_id.&lt;/description&gt;
        &lt;name&gt;LFArtifactTranslationStatus&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFArtifactTranslationStatus = Class.create();
LFArtifactTranslationStatus.prototype = {

    initialize: function() {
        this.lfUtils = new LFUtils();
        this.lfValidationUtils = new LFValidationUtils();
        this.lfConstants = new LFConstants();
        this.lfReadSaveScriptUtils = new LFReadSaveScriptUtils();
        this.arrayUtil = new ArrayUtil();
    },

    getArtifactsTranslationStatus: function(artifactInternalName, artifactSysIds, additionalInfo) {
        this._validateInputs(artifactInternalName, artifactSysIds, additionalInfo);
        var targetLanguages = this._getValidTargetLanguages(additionalInfo);
        var response = {};
        artifactSysIds = this.arrayUtil.unique(artifactSysIds);
        for (var index in artifactSysIds) {
            var artifactSysId = artifactSysIds[index];
            response[artifactSysId] = this._createTranslationStatusResponse(artifactInternalName, artifactSysId, targetLanguages);
        }
        return response;
    },

    getRequestedItemDetails: function(artifactSysIds, additionalInfo) {
        this.lfValidationUtils.validateIfSysIdsIsListOfStrings(artifactSysIds);
        this._validateAdditionalInfo(additionalInfo);
        var targetLanguages = this._getTargetLanguages(additionalInfo);
        if (targetLanguages.length === 0) {
            targetLanguages = this.lfUtils.getActiveLanguagesList();
        }
        return this._getStatusOfRequestedItems(this.arrayUtil.unique(artifactSysIds), this.arrayUtil.unique(targetLanguages));
    },

    _getValidTargetLanguages: function(additionalInfo) {
        var targetLanguages = this._getTargetLanguages(additionalInfo);
        targetLanguages = this.arrayUtil.unique(targetLanguages);
        if (targetLanguages.length !== 0) {
            this.lfValidationUtils.validateTargetLanguages(targetLanguages);
        } else {
            targetLanguages = this.lfUtils.getActiveLanguagesList();
        }
        return targetLanguages;
    },

    _getStatusOfRequestedItems: function(artifactSysIds, targetLanguages) {
        var statusOfRequestedItems = {};
        for (var sysidIndex in artifactSysIds) {
            var sysId = artifactSysIds[sysidIndex];
            statusOfRequestedItems[sysId] = {};
            for (var langId in targetLanguages) {
                var language = targetLanguages[langId];
                statusOfRequestedItems[sysId][language] = this._getLatestRequestedItemDetails(sysId, language);
            }
        }
        return statusOfRequestedItems;
    },

    _getLatestTask: function(sysId, languageId) {
        var gr = new GlideRecord('sn_lf_task');
        gr.addQuery('document', sysId);
        gr.addQuery('target_language', languageId);
        gr.orderByDesc('sys_created_on');
        gr.setLimit(1);
        gr.query();
        return gr;
    },

    _isTaskTableHaveRequiredFields: function() {
        var gtd = new GlideTableDescriptor('sn_lf_task');
        return gtd.isValidField('document') &amp;&amp; gtd.isValidField('target_language');
    },

    _getTargetLanguages: function(additionalInfo) {
        return (additionalInfo &amp;&amp; additionalInfo.targetLanguages) ? additionalInfo.targetLanguages : [];
    },

    _getLRITMDetails: function(lritm) {
        var lritmUtils = new LFRequestedItemUtils(lritm);
        var itemDetails = {};
        itemDetails['status'] = this.lfConstants.REQUESTED_ITEM_STATES_MAPPING[lritmUtils.getCurrentStateNumber()];

        itemDetails['isClosed'] = lritmUtils.isRequestedItemCompleted();
        if (itemDetails['isClosed']) {
            itemDetails['closedOn'] = lritmUtils.getClosedTime();
        }
        itemDetails['sysId'] = lritmUtils.getSysId();
        itemDetails['number'] = lritmUtils.getNumber();
        itemDetails['link'] = lritmUtils.generateUrlForRequestedItemNumbers([lritmUtils.getNumber()]);
        return itemDetails;
    },

    _getTaskDetails: function(lftask) {
        var taskUtils = new LFTaskUtils(lftask);
        var taskDetails = {};
        taskDetails['status'] = this.lfConstants.TASK_STATUS[taskUtils.getCurrentStateNumber()];
        taskDetails['isClosed'] = taskUtils.isTaskCompleted();
        if (taskDetails['isClosed']) {
            taskDetails['closedOn'] = taskUtils.getClosedTime();
        }
        taskDetails['sysId'] = taskUtils.getSysId();
        taskDetails['number'] = taskUtils.getTaskNumber();
        taskDetails['link'] = taskUtils.generateUrlForTaskNumbers([taskUtils.getTaskNumber()]);
        return taskDetails;
    },

    _getLatestRequestedItemDetails: function(sysId, language) {
        var languageId = this.lfUtils.getLanguageCodeDetails(language).sysId;
        var itemStatus = {
            exists: false
        };
        if (!languageId) {
            return itemStatus;
        }
        var lritm = this._getLatestRequestedItem(sysId, languageId);
        if (lritm.next()) {
            itemStatus.exists = true;
            itemStatus['details'] = this._getLRITMDetails(lritm);
        } else if (this._isTaskTableHaveRequiredFields()) {
            var lftask = this._getLatestTask(sysId, languageId);
            if (lftask.next()) {
                itemStatus.exists = true;
                itemStatus['details'] = this._getTaskDetails(lftask);
            }
        }
        return itemStatus;
    },

    _getLatestRequestedItem: function(sysId, languageId) {
        var gr = new GlideRecord('sn_lf_requested_item');
        gr.addQuery('document', sysId);
        gr.addQuery('target_language', languageId);
        gr.orderByDesc('sys_created_on');
        gr.setLimit(1);
        gr.query();
        return gr;
    },

    _validateInputs: function(artifactInternalName, artifactSysIds, additionalInfo) {
        this.lfValidationUtils.isArtifactTypeInvalid(artifactInternalName);
        this.lfValidationUtils.validateIfSysIdsIsListOfStrings(artifactSysIds);
        this._validateAdditionalInfo(additionalInfo);
        this.lfValidationUtils.validateArtifact(artifactInternalName, this.arrayUtil.unique(artifactSysIds));
    },

    _validateAdditionalInfo: function(additionalInfo) {
        this.lfValidationUtils.isAdditionalInfoInvalid(additionalInfo);
        if (additionalInfo.targetLanguages !== undefined) {
            this.lfValidationUtils.isTargetLanguagesInvalid(additionalInfo.targetLanguages);
        }
    },

    _createTranslationStatusResponse: function(artifactInternalName, sysId, targetLanguages) {
        var finalResponse = {};
        var lfInsight = new LFGenerateLocalizationInsights();
        for (var index in targetLanguages) {
            var translationResponse = {};
            var targetLanguage = targetLanguages[index];
            var docContent = this.lfReadSaveScriptUtils.generateDocumentContent(artifactInternalName, sysId, targetLanguage);
            var translationStatusResponse = lfInsight.calculateStatusAndPercentage(docContent);
            translationResponse["translationStatus"] = this.lfConstants.INSIGHTS_STATUS[translationStatusResponse.status];
            translationResponse["translationPercentage"] = Math.floor(translationStatusResponse.percentage);
            finalResponse[targetLanguage] = translationResponse;
        }
        return finalResponse;
    },

    type: 'LFArtifactTranslationStatus'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-21 17:12:05&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7adea2dac3f12010456b91f58640dd4e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFArtifactTranslationStatus&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;be2124c92f241110d8a4d5f62799b640&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7adea2dac3f12010456b91f58640dd4e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-20 09:40:06&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;7315&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:46</sys_created_on>
        <sys_id>b6dc893e2f331110d8a4d5f62799b638</sys_id>
        <sys_name>LFArtifactTranslationStatus</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_b6dc893e2f331110d8a4d5f62799b638</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
