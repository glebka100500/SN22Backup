<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8a86803a53da20100999ddeeff7b12db</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TriggerRuleTableConfigUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TriggerRuleTableConfigUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TriggerRuleTableConfigUtilSNC = Class.create();

TriggerRuleTableConfigUtilSNC.LOG_PROPERTY = "com.snc.trigger_rules.log.level";

TriggerRuleTableConfigUtilSNC.prototype = {
    TRIGGER_RULE_TABLE_CFG: "trigger_rule_table_cfg",
    TASK: "task",
    TABLE_NAME: "table",

    initialize: function () {
        this._log = new GSLog(TriggerRuleTableConfigUtilSNC.LOG_PROPERTY, this.type);
    },

    process: function () {
        var tableList = this._getTableExtensions(this.TASK);

        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[process] tableList: " + JSON.stringify(tableList));

        var additionalTables = this._getTriggerRuleTables();

        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[process] additionalTables: " + JSON.stringify(additionalTables));

        var uniqueTables = this._uniqueArray(tableList.concat(additionalTables));

        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[process] uniqueTables: " + JSON.stringify(uniqueTables));

        return uniqueTables;
    },

    getTriggerRuleTableConfigRecord: function(tableName) {
        var gr = new GlideRecord(this.TRIGGER_RULE_TABLE_CFG);
        gr.addActiveQuery();
        gr.query();
        while (gr.next()) {
            var tables = this._getTableExtensions(gr.getValue(this.TABLE_NAME));
            if (tables.indexOf(tableName) &gt;= 0)
                return gr;
        }

        return null;
    },

    _getTriggerRuleTables: function () {
        var tables = [];
        var gr = new GlideRecord(this.TRIGGER_RULE_TABLE_CFG);
        gr.addActiveQuery();
        gr.query();
        while (gr.next())
            tables = tables.concat(this._getTableExtensions(gr.getValue(this.TABLE_NAME)));

        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[_getTriggerRuleTables] tables: " + JSON.stringify(tables));

        return tables;
    },

    _getTableExtensions: function (tablename) {
        if (!tablename)
            return [];

        var uniqueTableNames = {};
        var tableExtensions = GlideDBObjectManager.get().getAllExtensions(tablename);
        for (var i = 0; i &lt; tableExtensions.size(); i++)
            uniqueTableNames[tableExtensions.get(i)] = tableExtensions.get(i);

        return Object.keys(uniqueTableNames);
    },

    _uniqueArray: function (arr) {
        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[_uniqueArray] arr: " + JSON.stringify(arr));

        var filteredArray = arr.filter(function (item, pos) {
            return arr.indexOf(item) === pos;
        });

        if (this._log.atLevel(global.GSLog.DEBUG))
            this._log.debug("[_uniqueArray] filteredArray: " + JSON.stringify(filteredArray));

        return filteredArray;
    },

    type: 'TriggerRuleTableConfigUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-16 13:14:00&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8a86803a53da20100999ddeeff7b12db&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;27&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TriggerRuleTableConfigUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="On-Call Scheduling" source="com.snc.on_call_rotation"&gt;37d4c9836de620100acb70b3534330d3&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8a86803a53da20100999ddeeff7b12db&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-12 17:20:39&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2878&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:20</sys_created_on>
        <sys_id>1ffc857e2f331110d8a4d5f62799b6b4</sys_id>
        <sys_name>TriggerRuleTableConfigUtilSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_1ffc857e2f331110d8a4d5f62799b6b4</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
