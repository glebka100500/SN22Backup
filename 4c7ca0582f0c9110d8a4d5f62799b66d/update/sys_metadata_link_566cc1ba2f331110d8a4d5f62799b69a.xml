<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>349825f553b2101034d1ddeeff7b12fa</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.STTRMTransitionSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;ServicenNow code for the STTRMTransition class&lt;/description&gt;
        &lt;name&gt;STTRMTransitionSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var STTRMTransitionSNC = Class.create();
STTRMTransitionSNC.prototype = {
    initialize: function(stateTransitionGr, _gs) {
		this._gr = stateTransitionGr;
		this._gs = _gs || gs;
    },
	
	// Evaluates the conditions associated to this transition against the processGr
	// Returns true if the condition is available
	evaluateConditions: function(processGr) {
		var retVal = this.toJS();
		retVal.transition_available = true;
		retVal.automatic_transition = this._gr.getValue("automatic") === "1" ? true : false;
		retVal.conditions =  [];
		
		var conditionGr = new GlideRecord("sttrm_transition_condition");
		conditionGr.addQuery("sttrm_state_transition", this._gr.getUniqueValue());
		conditionGr.addActiveQuery();
		conditionGr.query();
		
		if (!conditionGr.hasNext())
			return retVal; // If there are no conditions you can always transition
		
		// From this point on we need something to evaluate against
		if (!processGr) {
			retVal.transition_available = false;
			return retVal;
		}
		
		while (conditionGr.next()) {
			var sttrmCondition = new STTRMCondition(conditionGr);
			var condition = {
				"passed": sttrmCondition.evaluate(processGr),
				"condition": sttrmCondition.toJS()
			};
			retVal.transition_available = retVal.transition_available &amp;&amp; condition.passed;
			retVal.conditions.push(condition);
		}

		return retVal;
	},
	
	// Reference Qualifiers used when building models
	getStateRefQual: function() {
		return "sttrm_model=" + this._gr.from_state.getRefRecord().getValue("sttrm_model");
	},

	getTransitionStateRefQual: function() {
		return this.getStateRefQual() + "^sys_id!=" + this._gr.getValue("from_state");
	},

	getTransitionConditions: function() {
		var conditionGr = new GlideRecord("sttrm_transition_condition");
		conditionGr.addQuery("sttrm_state_transition", this._gr.getUniqueValue());
		conditionGr.query();

		return conditionGr;
	},

	toJS: function() {
		return {
			sys_id: this._gr.getUniqueValue(),
			display_value: this._gr.getDisplayValue(),
			from_state: this._gr.from_state.getRefRecord().getValue("state_value"),
			to_state: this._gr.to_state.getRefRecord().getValue("state_value")
		};
	},

    type: 'STTRMTransitionSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-08-23 18:40:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;349825f553b2101034d1ddeeff7b12fa&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;STTRMTransitionSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="State Transition Models" source="com.snc.itsm.state_transition_model"&gt;e2a381876da620100acb70b35343301b&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_349825f553b2101034d1ddeeff7b12fa&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-09-30 13:32:50&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2189&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:48</sys_created_on>
        <sys_id>566cc1ba2f331110d8a4d5f62799b69a</sys_id>
        <sys_name>STTRMTransitionSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_566cc1ba2f331110d8a4d5f62799b69a</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
