<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>665d5a179f403200598a5bb0657fcffd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PlannedTaskRelationDBService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PlannedTaskRelationDBService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PlannedTaskRelationDBService = Class.create();
PlannedTaskRelationDBService.prototype = {
    TABLE: 'planned_task_rel_planned_task',

    initialize: function() {
    
    },

    allRelations: function (taskId, excludeIds) {
        PPMDebug.log("Into PlannedTaskRelationDBService.allRelations -&gt; " + taskId);
        if(JSUtil.notNil(taskId)) {
            var gr = new GlideRecord(this.TABLE);
            gr.addQuery('child', taskId).addOrCondition('parent', taskId);
            if(JSUtil.notNil(excludeIds) &amp;&amp; excludeIds.length &gt; 0)
                gr.addQuery("sys_id", "NOT IN", excludeIds.join(","));
            gr.query();
            PPMDebug.log("Into PlannedTaskRelationDBService.allRelations count -&gt; " + gr.getRowCount() + " - " + 
                gr.getEncodedQuery());
            return gr;
        }
    },

    relations: function (taskId) {
        PPMDebug.log("Into PlannedTaskRelationDBService.relations -&gt; " + taskId);
        if(JSUtil.notNil(taskId)) {
            var gr = new GlideRecord(this.TABLE);
            gr.addQuery('child', taskId);
            gr.query();
            return gr;
        }
    },

    relationsCount: function (taskId) {
        PPMDebug.log("Into PlannedTaskRelationDBService.relationsCount -&gt; " + taskId);
        if(JSUtil.notNil(taskId)) {
            var ga = new GlideAggregate(this.TABLE);
            ga.addAggregate("COUNT", "sys_id");
            ga.addQuery('child', taskId);
            ga.setGroup(false);
            ga.query();
            if(ga.next()) {
                return ga.getAggregate("COUNT", "sys_id");
            }
        }
        return 0;
    },
    
    externalRelationsCount: function(taskId) {
        var ga = new GlideAggregate(this.TABLE);
        ga.addAggregate("COUNT", "sys_id");
        ga.addQuery('child', taskId);
        ga.addNotNullQuery('orig_sys_id');
        ga.setGroup(false);
        ga.query();
        if(ga.next()) {
            return ga.getAggregate("COUNT", "sys_id");
        }
        return 0;
    },

    internalRelationsCount: function(taskId) {
        var ga = new GlideAggregate(this.TABLE);
        ga.addAggregate("COUNT", "sys_id");
        ga.addQuery('child', taskId);
        ga.addQuery('external', 'false');
        ga.addNullQuery('orig_sys_id');
        ga.setGroup(false);
        ga.query();
        if(ga.next()) {
            return ga.getAggregate("COUNT", "sys_id");
        }
        return 0;
    },

    externalRelations: function (sysId, filterQuery) {
        var relations = [], arrayUtil = new ArrayUtil();
        relations.concat(this.incomingExternalRelations(sysId, filterQuery));
        relations.concat(this.outgoingExternalRelations(sysId, filterQuery));
        return relations;
    },

    incomingExternalRelations: function (sysId, filterQuery) {
        PPMDebug.log('PlannedTaskRelationDBService.incomingExternalRelations: ' + sysId + " | " + filterQuery);
        var incomingRelations = [], relation;
        if(JSUtil.notNil(sysId)) {
            var gr = new GlideRecord(this.TABLE);
            gr.addQuery("child_top_task", sysId);
            gr.addQuery("external", "true").addOrCondition("external", "1");
            if(JSUtil.notNil(filterQuery))
                gr.addEncodedQuery(filterQuery);
            gr.query();
            PPMDebug.log('PlannedTaskRelationDBService.incomingExternalRelations - gr: ' + gr.getRowCount() + " | " + gr.getEncodedQuery());
            while(gr.next()) {
                relation = this.getRelationObj(gr, 'in');
                incomingRelations.push(relation);
            }
        }
        return incomingRelations;
    },

    outgoingExternalRelations: function (sysId, filterQuery) {
        PPMDebug.log('PlannedTaskRelationDBService.incomingExternalRelations: ' + sysId + " | " + filterQuery);
        var outgoingRelations = [], relation;
        if(JSUtil.notNil(sysId)) {
            var gr = new GlideRecord(this.TABLE);
            gr.addQuery("parent_top_task", sysId);
            gr.addQuery("external", "true").addOrCondition("external", "1");
            if(JSUtil.notNil(filterQuery))
                gr.addEncodedQuery(filterQuery);
            gr.query();
            PPMDebug.log('PlannedTaskRelationDBService.outgoingExternalRelations - gr: ' + gr.getRowCount() + " | " + gr.getEncodedQuery());
            while(gr.next()) {
                relation = this.getRelationObj(gr, 'out');
                outgoingRelations.push(relation);
            }
        }
        return outgoingRelations;
    },

    getRelationObj: function (gr, boundType) {
        if(JSUtil.notNil(gr)) {
            var parentRec = gr.parent.getRefRecord();
            var childRec = gr.child.getRefRecord();
            var parentTopTaskRec = gr.parent_top_task.getRefRecord();
            var childTopTaskRec = gr.child_top_task.getRefRecord();
            var isPendingNotification = false;
            if(boundType == 'in') {
                isPendingNotification = PlannedTaskNotificationService.getNewNotificationsForTask(childRec.getValue('sys_id')).length &gt; 0;
            } else {
                isPendingNotification = PlannedTaskNotificationService.getNewNotificationsForTask(parentRec.getValue('sys_id')).length &gt; 0;
            }

            return {
                bound_type: boundType,
                sys_id: gr.getValue("sys_id"),
                parent: gr.getValue("parent"),
                parent_number: parentRec.getValue("number"),
                parent_short_description: parentRec.getValue("short_description"),
                child: gr.getValue("child"),
                child_number: childRec.getValue("number"),
                child_short_description: childRec.getValue("short_description"),
                parent_top_task: gr.getValue("parent_top_task"),
                parent_top_task_number: parentTopTaskRec.getValue("number"),
                parent_top_task_short_description: parentTopTaskRec.getValue("short_description"),
                child_top_task: gr.getValue("child_top_task"),
                child_top_task_number: childTopTaskRec.getValue("number"),
                child_top_task_short_description: childTopTaskRec.getValue("short_description"),
                type: gr.getDisplayValue("sub_type"),
                isPendingNotification: isPendingNotification
            };
        }
    },

    type: 'PlannedTaskRelationDBService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-01-06 19:55:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;665d5a179f403200598a5bb0657fcffd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PlannedTaskRelationDBService&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;e93557642fc10110d8a4d5f62799b623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_665d5a179f403200598a5bb0657fcffd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-25 04:18:29&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6418&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:05</sys_created_on>
        <sys_id>05bc0dfa2f331110d8a4d5f62799b63a</sys_id>
        <sys_name>PlannedTaskRelationDBService</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_05bc0dfa2f331110d8a4d5f62799b63a</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
