<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3252f416670732006e6eadab9485ef1b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SLAContractUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Reusable helper classes for use within the SLA application to obtain contracts-related information&lt;/description&gt;
        &lt;name&gt;SLAContractUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLAContractUtilSNC = Class.create();
SLAContractUtilSNC.prototype = {

	TABLE_CONTRACT_REL_CONTRACT_SLA: 'contract_rel_contract_sla',
	TABLE_CONTRACT_SLA: 'contract_sla', // SLA defition
	VIEW_CONTRACT_SLA_CONTRACT: 'contract_sla_contract',
	ATTR_CONTRACT: 'contract',
	ATTR_CONTRACT_SLA: 'contract_sla',
	ATTR_COLLECTION: 'collection',
	PROP_CONTRACT_TABLES: 'com.snc.sla.contract.tables',
	_CONTRACT_PLUGIN_ID: 'com.snc.sla.contract2',

	initialize: function() {
		this.slaUtil = new SLAUtil();
	},

	getAllSLAsQuery: function(collection){
		// Check active SLA Definitions
		var slaGR = new GlideRecord('contract_sla');
		slaGR.addActiveQuery();
		slaGR.addQuery(this.ATTR_COLLECTION, collection);
		this._excludeServiceCommitmentSLAs(slaGR);
		return slaGR;
	},

	slaHasContract: function(slaSysId) {
		var gr = new GlideRecord(this.TABLE_CONTRACT_REL_CONTRACT_SLA);
		gr.addQuery(this.ATTR_CONTRACT_SLA, slaSysId);
		gr.addNotNullQuery(this.ATTR_CONTRACT);
		gr.setLimit(1);
		gr.query();

		return gr.hasNext();
	},

	isContractAttachedToSLA: function(contractSysId, slaSysId) {
		var gr = new GlideRecord(this.TABLE_CONTRACT_REL_CONTRACT_SLA);
		gr.addQuery(this.ATTR_CONTRACT, contractSysId);
		gr.addQuery(this.ATTR_CONTRACT_SLA, slaSysId);
		gr.setLimit(1);
		gr.query();

		return gr.hasNext();
	},

	// Ignore 'Contract SLAs' mode of operation if com.snc.sla.contract.tables (CSV) property exists but does not contain current task.sys_class_name, or contract_rel_contract_sla table does not exist
	ignoreContract: function(classname) {
		if (!GlidePluginManager.isActive(this._CONTRACT_PLUGIN_ID))
			return true;
		var contractTables = gs.getProperty(this.PROP_CONTRACT_TABLES);
		if (contractTables == null)
			return false;
		var list = contractTables.replaceAll(' ', '').split(',');
		return !(new ArrayUtil().contains(list, classname));
	},

	hasContractProperty: function() {
		return gs.getProperty(this.PROP_CONTRACT_TABLES) != null;
	},

	getContractualSLAs: function(contract, collection, includeNonContractual) {
		var gr = this.getAllSLAsQuery(collection);
		var joinQuery = gr.addJoinQuery(this.VIEW_CONTRACT_SLA_CONTRACT, 'sys_id', 'sla_sys_id');
		joinQuery.addCondition("cntr_contract", contract);
		if (includeNonContractual)
			joinQuery.addOrCondition("cntr_contract", 'NULL');
		return gr;
	},

	processNonContractualSLAs: function(contractGR) {
		return contractGR.process_non_contractual_slas == true;
	},

	getNonContractualSLAs: function(collection) {
		var gr = this.getAllSLAsQuery(collection);
		var joinQuery = gr.addJoinQuery(this.VIEW_CONTRACT_SLA_CONTRACT, 'sys_id', 'sla_sys_id');
		joinQuery.addCondition("cntr_contract", 'NULL');
		return gr;
	},

	_excludeServiceCommitmentSLAs: function(slaGR) {
		// always restrict SLA processing to records that have been created in "contract_sla" table only i.e. no records from extended tables
		if (slaGR.isValidField('sys_class_name'))
			slaGR.addQuery('sys_class_name', this.TABLE_CONTRACT_SLA);
		
		// if the new version of SLA Commitments plugin is active exclude SLA Definitions that are Service Commitment only
		if (this.slaUtil.isSLACommitmentsActive())
			slaGR.addNullQuery('service_commitment').addOrCondition('service_commitment', false);
	},
	
	type: 'SLAContractUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-06-01 12:37:23&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3252f416670732006e6eadab9485ef1b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLAContractUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;367209c76d6620100acb70b35343304f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3252f416670732006e6eadab9485ef1b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-13 17:46:12&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3280&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:46</sys_created_on>
        <sys_id>6d6c81ba2f331110d8a4d5f62799b6c1</sys_id>
        <sys_name>SLAContractUtilSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_6d6c81ba2f331110d8a4d5f62799b6c1</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
