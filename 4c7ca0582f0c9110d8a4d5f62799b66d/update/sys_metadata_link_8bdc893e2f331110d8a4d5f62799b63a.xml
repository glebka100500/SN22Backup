<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7b2c3918b713130096c3e4f6ee11a93d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.StandardChangeTemplateSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;StandardChangeTemplateSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var StandardChangeTemplateSNC = Class.create();

StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER = "std_change_record_producer";
StandardChangeTemplateSNC.CHANGE_TEMPLATE = "std_change_template";

StandardChangeTemplateSNC.prototype = Object.extendsObject(ChangeProcess, {

	initialize: function(_gr, _gs) {
		ChangeProcess.prototype.initialize.call(this, _gr, _gs);
	},

	applyToChange: function(changeRequestGr) {
		if (!changeRequestGr)
			return false;

		changeRequestGr.std_change_producer_version = this.getGlideRecord().current_version + "";

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[applyToChange] std_change_producer_version sysId: " + changeRequestGr.std_change_producer_version);

		var isTableExtOfStdChgRecProd = GlideDBObjectManager.getTables(this.getGlideRecord().getTableName()).contains(StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER);

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[applyToChange] isTableExtOfStdChgRecProd: " + isTableExtOfStdChgRecProd);

		if (isTableExtOfStdChgRecProd)
			return new GlideTemplate.getFromRecord(this.getGlideRecord().template.getRefRecord()).apply(changeRequestGr) === 0 ? true : false;

		return false;
	},

	copyAttachments: function(changeRequestGr) {
		// if two step enabled, Business Rule will copy the attachments
		if (new global.StdChangeUtils().isChangeStandardAndTwoStepEnabled(changeRequestGr))
			return true;

		var sourceTable = StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER;
		var sourceId = changeRequestGr.std_change_producer_version.std_change_producer + "";
		var targetTable = changeRequestGr.getTableName();
		var targetId = changeRequestGr.sys_id + "";

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[copyAttachments] sourceTable: " + sourceTable + " sourceId: " + sourceId + " targetTable:" + targetTable + " targetId: " + targetId);

		var attachmentsGr = new GlideSysAttachment().getAttachments(sourceTable, sourceId);
		var attachmentCount = attachmentsGr.getRowCount();

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[copyAttachments] attachmentCount: " + attachmentCount);

		if (attachmentCount &lt; 1)
			return true;

		var attachments = GlideSysAttachment.copy(sourceTable, sourceId, targetTable, targetId);

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[copyAttachments] copied attachments size: " + attachments.size());

		if (attachments.size() !== attachmentCount) {
			if (this._log.atLevel(GSLog.ERROR))
				this._log.error("[copyAttachments] failed to copy attachments to: " + changeRequestGr.getDisplayValue());

			return false;
		}

		return true;
	},

    type: "StandardChangeTemplateSNC"
});

StandardChangeTemplateSNC.findById = function(sysId) {
	if (!sysId)
		return null;

	var changeRecordProducerGr = new GlideRecordSecure(StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER);
	if (!changeRecordProducerGr.get(sysId))
		return null;

	return new StandardChangeTemplate(changeRecordProducerGr);
};

StandardChangeTemplateSNC.findAll = function(orderBy, textSearch, encodedQuery) {
	orderBy = orderBy || ChangeProcess.NAME;

	var changeRecordProducerGr = new GlideRecordSecure(StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER);
	changeRecordProducerGr.addActiveQuery();
	changeRecordProducerGr.addQuery("retired", false);

	if (textSearch !== undefined &amp;&amp; textSearch !== "undefined" &amp;&amp; textSearch.trim() !== "")
		changeRecordProducerGr.addQuery("name", "CONTAINS", textSearch).addOrCondition("short_description", "CONTAINS", textSearch);

	if (encodedQuery !== undefined &amp;&amp; encodedQuery !== "undefined" &amp;&amp; encodedQuery.trim() !== "")
		changeRecordProducerGr.addEncodedQuery(encodedQuery);

	changeRecordProducerGr.orderBy(orderBy);
	changeRecordProducerGr.query();

	//Get a list of readable templates which might have user criteria in place if enabled
	if ((gs.getProperty("com.snc.change_request.standard_change.use_user_criteria", 'true') === 'true') &amp;&amp; (gs.getProperty("glide.sc.use_user_criteria", 'true') === 'true')) {
		var readableRecords = [];
		while (changeRecordProducerGr.next()) {
			var sysId = changeRecordProducerGr.getUniqueValue();
			if (new sn_sc.CatItem(sysId).canView())
				readableRecords.push(sysId);
		}

		changeRecordProducerGr = new GlideRecord(StandardChangeTemplateSNC.CHANGE_RECORD_PRODUCER);
		changeRecordProducerGr.addQuery('sys_id', "IN", readableRecords.join());
		changeRecordProducerGr.query();
	}

	return changeRecordProducerGr;
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-07-10 15:30:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7b2c3918b713130096c3e4f6ee11a93d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;StandardChangeTemplateSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Management - Core" source="com.snc.change_management"&gt;a39309476da620100acb70b35343307a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7b2c3918b713130096c3e4f6ee11a93d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-21 11:24:17&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4451&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:46</sys_created_on>
        <sys_id>8bdc893e2f331110d8a4d5f62799b63a</sys_id>
        <sys_name>StandardChangeTemplateSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_8bdc893e2f331110d8a4d5f62799b63a</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
