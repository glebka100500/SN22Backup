<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0f381e589f011300730e5bb0657fcf83</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RedundantRelationsChecker&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;RedundantRelationsChecker&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RedundantRelationsChecker = Class.create();
RedundantRelationsChecker.prototype = {
    CLASS_NAME: "RedundantRelationsChecker", 

    initialize: function() {
    },

    checkRelations: function (topTaskId) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into checkRelations -&gt; " + topTaskId);
        if(JSUtil.notNil(topTaskId)) {
            var gr = this.getRelations(topTaskId);
            if(JSUtil.notNil(gr)) {
                var relations = [];
                while(gr.next()) {
                    relations.push({   sysId: gr.getValue("sys_id"),
                                parent: gr.getValue("parent"),
                                parent_number: gr.parent.getRefRecord().getValue("number"),
                                child: gr.getValue("child"),
                                child_number: gr.child.getRefRecord().getValue("number")
                                });
                }
                return this.getDuplicateRelations(relations) || [];
            }
        }
        return [];
    },

    getRelations: function (topTaskId) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into getRelations -&gt; " + topTaskId);
        if(JSUtil.notNil(topTaskId)) {
            var gr = new GlideRecord(PmTableConstants.PLANNED_TASK_REL);
            gr.addQuery("parent_top_task", topTaskId);
            gr.addQuery("child_top_task", topTaskId);
            gr.query();
            PmDebugUtil.logMsg(this.CLASS_NAME, "Into getRelations -&gt; " + gr.getRowCount() 
                + " | " + gr.getEncodedQuery());
            return gr;
        }
    },

    getDuplicateRelations: function (relations) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into getDuplicateRelations -&gt; " + JSON.stringify(relations));
        var duplicateRelations = [];
        var message = gs.getMessage('is duplicate of');
        if(JSUtil.notNil(relations)) {
            for (var i = 0; i &lt; relations.length; i++) {
                var relation = relations[i];
                for (var j = 0; j &lt; relations.length; j++) {
                    if(i != j) {
                        var otherRelation = relations[j];
                        if(this.isDuplicateOf(relation, otherRelation)) {
                            otherRelation['duplicate_sys_id'] = relation.sysId;
                            otherRelation['duplicate_parent_number'] = relation.parent_number;
                            otherRelation['duplicate_child_number'] = relation.child_number;
                            otherRelation['message'] = message;
                            duplicateRelations.push(otherRelation);
                        }
                    }
                }
            }
        }
        return duplicateRelations;
    },

    isDuplicateOf: function (relation, otherRelation) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into isDuplicateOf -&gt; " + JSON.stringify(relation) + " | " 
            + JSON.stringify(otherRelation));
        if(JSUtil.notNil(relation) &amp;&amp; JSUtil.notNil(otherRelation)) {
            return (relation.parent == otherRelation.parent) &amp;&amp; this.isChildOf(otherRelation.child, relation.child);
        }
        return false;
    },

    isChildOf: function (taskId, otherParentId) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into isChildOf -&gt; " + taskId + " | " + otherParentId);
        if(JSUtil.notNil(taskId) &amp;&amp; JSUtil.notNil(otherParentId)) {
            var arrayUtil = new ArrayUtil();
            var parentStack = [taskId];
            var parentId = this.getParent(taskId);
            while(JSUtil.notNil(parentId) &amp;&amp; !arrayUtil.contains(parentStack, parentId)) {
                if(parentId == otherParentId)
                    return true;
                parentStack.push(parentId);
                parentId = this.getParent(parentId);
            }
        }
        return false;
    },

    getParent: function (taskId) {
        PmDebugUtil.logMsg(this.CLASS_NAME, "Into getParent -&gt; " + taskId);
        if(JSUtil.notNil(taskId) ) {
            var gr = new GlideRecord("planned_task");
            if(gr.get(taskId)) {
                PmDebugUtil.logMsg(this.CLASS_NAME, "Into getParent: Parent -&gt; " + gr.getValue("parent"));
                return gr.getValue("parent");
            }
        }
    },
    type: 'RedundantRelationsChecker'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-03-20 21:11:31&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0f381e589f011300730e5bb0657fcf83&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RedundantRelationsChecker&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;e93557642fc10110d8a4d5f62799b623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0f381e589f011300730e5bb0657fcf83&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-03-20 22:50:59&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4311&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:59</sys_created_on>
        <sys_id>963c817a2f331110d8a4d5f62799b6cb</sys_id>
        <sys_name>RedundantRelationsChecker</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_963c817a2f331110d8a4d5f62799b6cb</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
