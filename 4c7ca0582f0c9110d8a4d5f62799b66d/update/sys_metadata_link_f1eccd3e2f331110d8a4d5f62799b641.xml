<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8229cbc0731310103bb6a4fa54f6a72b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLULookupIntegrator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NLULookupIntegrator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLULookupIntegrator = Class.create();

(function() {

    var vocabTypes = NLUConstants.VOCAB_TYPES;
    var constants = NLUConstants.constants;

    NLULookupIntegrator.prototype = {
        initialize: function(lookupGR) {
            this.lookupGR = lookupGR;
        },

        train: function(lookupTrainData, solutionOptions, options) {
            var output = {
                lookupDetails: {}
            };
            try {
                var lookupTrainDataStr = JSON.stringify(lookupTrainData);
                gs.debug('NLULookupIntegrator trainJson: ' + lookupTrainDataStr);
                var fuzzyMatcherSolution = this.getFuzzyMatcherSolution();
                if (!fuzzyMatcherSolution)
                    fuzzyMatcherSolution = this.createLookupSolution();

                var solutionInfo = {
                    label: fuzzyMatcherSolution.solutionName
                };

                if (solutionOptions &amp;&amp; !gs.nil(solutionOptions.trainingFrequency))
                    solutionInfo.trainingFrequency = solutionOptions.trainingFrequency;

                var updatedFuzzyMatcherSolution = new sn_ml.FuzzyMatcherSolution(solutionInfo, JSON.parse(lookupTrainDataStr));
                sn_ml.FuzzyMatcherSolutionStore.update(fuzzyMatcherSolution.solutionName, updatedFuzzyMatcherSolution, options);

                var async = this.lookupGR.getValue('type') === vocabTypes.lookup ? true : false;
                var trainingOptions = async ?{}: {
                    trainingMode: 'sync'
                };

                if (options &amp;&amp; typeof options === 'object') {
                    trainingOptions = NLUHelper.extend(trainingOptions, options);
                }

                var solutionVersion = updatedFuzzyMatcherSolution.submitTrainingJob(trainingOptions);
                var solutionStatus = JSON.parse(solutionVersion.getStatus());

                if (async) {
                    if (solutionStatus.hasJobEnded === 'false') {
                        output.status = 'success';
                        output.lookupDetails.state = solutionStatus.state;
                    } else
                        output.lookupDetails.state = output.status = 'failure';
                } else {
                    output.lookupDetails.state = output.status = solutionStatus.state === constants.SOLUTION_COMPLETE ? 'success' : 'failure';
                }

                this.updateSolutionName(fuzzyMatcherSolution.solutionName);

                output.lookupDetails.solutionVersion = solutionVersion.getVersionNumber();
                output.lookupDetails.solutionName = this.lookupGR.getValue('solution_name');
                output.lookupDetails.handleName = this.lookupGR.getValue('name');

            } catch (e) {
                output.status = 'failure';
                output.message = e.message;
            }
            gs.debug('Nlu Lookup training response: ' + JSON.stringify(output));
            return output;
        },

        cancelTraining: function() {
            var result = {};
            try {
                var fuzzyMatcherSolution = this.getFuzzyMatcherSolution();
                if (!fuzzyMatcherSolution)
                    throw new Error(gs.getMessage('Solution object not found!'));
                fuzzyMatcherSolution.solution.cancelTrainingJob();
                result.status = 'success';
            } catch (e) {
                gs.debug('NLU Lookup cancelTraining error' + e.message);
                result.status = 'failure';
                result.message = e.message;
            }
            return result;
        },

        getModelVersion: function(language) {
            var fuzzyMatcherSolution = this.getFuzzyMatcherSolution();
            if (!fuzzyMatcherSolution)
                fuzzyMatcherSolution = this.createLookupSolution();

            var output = JSON.parse(fuzzyMatcherSolution.solution.getModelVersion(language));
            return output.response.version;
        },

        createLookupSolution: function() {
            var solution = new sn_ml.FuzzyMatcherSolution({
                "label": this.lookupGR.getUniqueValue()
            }, {
                dummyKey: 'dummyValue'
            });
            var solutionName = sn_ml.FuzzyMatcherSolutionStore.add(solution);
            return {
                solutionName: solutionName,
                solution: solution
            };
        },

        updateSolutionName: function(solutionName){
            this.lookupGR.setValue('solution_name', solutionName);
            this.lookupGR.update();
        },

        getFuzzyMatcherSolution: function() {
            var result = {};
            try {
                if (gs.nil(result.solutionName = this.lookupGR.getValue('solution_name')) ||
                    !(result.solution = sn_ml.FuzzyMatcherSolutionStore.get(result.solutionName)))
                    return null;
            } catch (e) {
                gs.debug('Error in retrieving fuzzy matcher solution: ' + e.message);
                return null;
            }
            return result;
        },

        getModelStatus: function() {
            var solutionName = '';
            var latestSolution = {};
            var activeSolution = {};
            try {
                var solutionObj = this.getFuzzyMatcherSolution();
                if (!solutionObj) {
                    return {
                        status: 'failure',
                        message: gs.getMessage('Solution object not found!')
                    };
                }
                solutionName = solutionObj.solutionName;
                var solution = solutionObj.solution;
                var latestSolutionVersion = solution.getLatestVersion();
                var latestSolutionStatus = JSON.parse(latestSolutionVersion.getStatus());
                latestSolution.state = latestSolutionStatus.state;
                latestSolution.version = latestSolutionVersion.getVersionNumber();
                var activeSolutionVersion = solution.getActiveVersion();
                var activeSolutionProperties = JSON.parse(activeSolutionVersion.getProperties());
                activeSolution.version = activeSolutionVersion.getVersionNumber();
                var lastSyncedDate = new GlideDateTime(activeSolutionProperties['sys_updated_on']);
                activeSolution.lastSyncedDate = {
                    value: lastSyncedDate.getValue(),
                    displayValue: lastSyncedDate.getDisplayValue()
                };
            } catch (e) {
                gs.debug('NLU Lookup getModelStatus error : ' + e.message);
            }
            return {
                status: 'success',
                solutionName: solutionName,
                activeSolution: activeSolution,
                latestSolution: latestSolution
            };
        },

        getLastTrainedVersion: function() {
            var solution = this.getFuzzyMatcherSolution();
            return solution &amp;&amp; NLUParloIntegrator.getLastTrainedVersion(solution.solution);
        },

        type: 'NLULookupIntegrator'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-09-12 11:12:43&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8229cbc0731310103bb6a4fa54f6a72b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;47&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLULookupIntegrator&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8229cbc0731310103bb6a4fa54f6a72b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-09 06:11:23&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;7135&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:58</sys_created_on>
        <sys_id>f1eccd3e2f331110d8a4d5f62799b641</sys_id>
        <sys_name>NLULookupIntegrator</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_f1eccd3e2f331110d8a4d5f62799b641</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
