<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5df3d8b7c7223200b0ea8b3c5c976342</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.InteractiveAnalysisUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility for Interactive Analysis.&lt;/description&gt;
        &lt;name&gt;InteractiveAnalysisUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InteractiveAnalysisUtil = Class.create();
InteractiveAnalysisUtil.prototype = {
	IA_PREFERENCES: "sys_ia_preferences",
	USER: "user",
	CONDITION: "condition",
	TABLE: "table",
	NAME: "name",
	DEFAULT_VALUE: "default_value",
	VALUE: "value",
	initialize: function() {
	},
	mergeObject: function(savedValue, value) {
		if(!savedValue)
			return value;
		for (var key in value) {
			if (value.hasOwnProperty(key)) {
				savedValue[key] = value[key];
			}
		}
		return savedValue;
	},
	saveDefaultValues: function(tableName, params, value, response) {
		var preferenceGr = new GlideRecordSecure(this.IA_PREFERENCES);
		var sysparmListView = "";
		if(params.sysparm_list_view)
			sysparmListView = params.sysparm_list_view[0];
		
		if(!this._isValidTable(tableName)) {
			return this._invalidTableResponse(tableName, sysparmListView, response);
		}
		
		preferenceGr.addQuery(this.USER, gs.getUserID());
		preferenceGr.addQuery(this.TABLE, tableName);
		preferenceGr.addQuery(this.NAME, this.DEFAULT_VALUE + "-" + sysparmListView);
		preferenceGr.query();
		if(preferenceGr.next()) {
			var savedValue = global.JSON.parse(preferenceGr.getValue(this.VALUE));
			value = this.mergeObject(savedValue, value);
			preferenceGr.setValue(this.VALUE, global.JSON.stringify(value));
			preferenceGr.update();
			value = global.JSON.parse(preferenceGr.getValue(this.VALUE));
		} else {
			var newPreferenceGr = new GlideRecordSecure(this.IA_PREFERENCES);
			newPreferenceGr.initialize();
			newPreferenceGr.setValue(this.USER, gs.getUserID());
			newPreferenceGr.setValue(this.TABLE, tableName);
			newPreferenceGr.setValue(this.NAME, this.DEFAULT_VALUE + "-" + sysparmListView);
			newPreferenceGr.setValue(this.VALUE, global.JSON.stringify(value));
			newPreferenceGr.insert();
			response.setStatus(201);
			value = global.JSON.parse(newPreferenceGr.getValue(this.VALUE));
		}
		return this.parseSavedValues(value);
	},
	deleteSavedValue: function(tableName, params, response) {
		var preferenceGr = new GlideRecordSecure(this.IA_PREFERENCES);
		var sysparmListView = "";
		if(params.sysparm_list_view)
			sysparmListView = params.sysparm_list_view[0];
		
		if(!this._isValidTable(tableName)) {
			return this._invalidTableResponse(tableName, sysparmListView, response);
		}
		preferenceGr.addQuery(this.USER, gs.getUserID());
		preferenceGr.addQuery(this.TABLE, tableName);
		preferenceGr.addQuery(this.NAME, this.DEFAULT_VALUE + "-" + sysparmListView);
		preferenceGr.query();
		if(preferenceGr.next())
			preferenceGr.deleteRecord();
		else {
			var res = {
				status: gs.getMessage("failure"),
				error: {
					message: gs.getMessage("No preference saved with these values."),
					table_name: tableName,
					sysparm_list_view: sysparmListView
				}
			};
			response.setStatus(204);
			response.setContentType('application/json');
			response.getStreamWriter().writeString(global.JSON.stringify(res));
		}
		
	},
	getQueryParts: function(filters) {
		var self = this;
		var IFilterUtils = new InteractiveFilterDefaults();
		for (var key in filters) {
			if (filters.hasOwnProperty(key)) {
				if(filters[key].filter instanceof Array)
					filters[key].queryParts = filters[key].filter.map(IFilterUtils.getQueryPart);
				else {
					var filterObj = filters[key].filter;
					var queryParts = {};
						for (var keyQP in filterObj) {
							if (filterObj.hasOwnProperty(keyQP)) {
								queryParts[keyQP] = filterObj[keyQP].map(IFilterUtils.getQueryPart);
							}
						}
						filters[key].queryParts = queryParts;
					}
				}
			}
			return filters;
		},
		parseSavedValues: function(savedValue) {
			var interactiveFilterUtils = new SNC.InteractiveFilterUtils();
			if(savedValue.filters)
				savedValue.filters = this.getQueryParts(savedValue.filters);
			if(savedValue["stack_by_columns"])
				savedValue["stack_by_columns"] = global.JSON.parse(interactiveFilterUtils.parseColumns(global.JSON.stringify(savedValue["stack_by_columns"])));
			if(savedValue["group_by_columns"])
				savedValue["group_by_columns"] = global.JSON.parse(interactiveFilterUtils.parseColumns(global.JSON.stringify(savedValue["group_by_columns"])));
			return savedValue;
		},
		getDefaultValues: function(tableName, params, response) {
			var preferenceGr = new GlideRecordSecure(this.IA_PREFERENCES);
			var sysparmListView = "";
			if(params.sysparm_list_view)
				sysparmListView = params.sysparm_list_view[0];
			if(!this._isValidTable(tableName)) {
				return this._invalidTableResponse(tableName, sysparmListView, response);
			}
			preferenceGr.addQuery(this.USER, gs.getUserID());
			preferenceGr.addQuery(this.TABLE, tableName);
			preferenceGr.addQuery(this.NAME, this.DEFAULT_VALUE + "-" + sysparmListView);
			preferenceGr.query();
			if(preferenceGr.next()) {
				var savedValue = global.JSON.parse(preferenceGr.getValue(this.VALUE));
				return this.parseSavedValues(savedValue);
			} else {
				var res = {
					status: gs.getMessage("failure"),
					error: {
						message: gs.getMessage("No preference saved with these values."),
						table_name: tableName,
						sysparm_list_view: sysparmListView
					}
				};
				response.setStatus(200);
				response.setContentType('application/json');
				response.getStreamWriter().writeString(global.JSON.stringify(res));
			}
		},
		restErrorHandler: function (e, response) {
			if (!e.error_code)
				throw e;
			var res = {
				status: gs.getMessage("failure"),
				error: {
					message: e.message,
					error_code: e.error_code,
					is_user_message: e.is_user_message
				}
			};
			if (e.status)
				response.setStatus(e.status);
			else
				response.setStatus(400);
			response.setContentType('application/json');
			response.getStreamWriter().writeString(global.JSON.stringify(res));
			return;
		},
		_isValidTable: function(tableName) {
			var table = new TableUtils(tableName);
			return table.tableExists();
		},
		_invalidTableResponse: function(tableName, view, response) {
			var res = {
				status: gs.getMessage("failure"),
				error: {
					message: gs.getMessage("Invalid table {0}", tableName),
					table_name: tableName,
					sysparm_list_view: view
				}
			};
			response.setStatus(400);
			response.setContentType('application/json');
			response.getStreamWriter().writeString(global.JSON.stringify(res));
		},
		type: 'InteractiveAnalysisUtil'
	};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-05-12 05:44:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5df3d8b7c7223200b0ea8b3c5c976342&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InteractiveAnalysisUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Interactive Analysis" source="com.glideapp.interactive_analysis"&gt;7cf3090b6da620100acb70b3534330a0&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5df3d8b7c7223200b0ea8b3c5c976342&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-10-08 13:05:51&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6315&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:50</sys_created_on>
        <sys_id>1dac85fa2f331110d8a4d5f62799b61c</sys_id>
        <sys_name>InteractiveAnalysisUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_1dac85fa2f331110d8a4d5f62799b61c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
