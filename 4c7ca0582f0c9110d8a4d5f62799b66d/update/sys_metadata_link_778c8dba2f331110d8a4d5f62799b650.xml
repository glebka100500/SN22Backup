<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5076fc10d7102200c2f64187ed610363</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PasswordResetUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Utility class for password reset application&lt;/description&gt;
        &lt;name&gt;PasswordResetUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PasswordResetUtil = Class.create();
PasswordResetUtil.prototype = Object.extendsObject(PwdAjaxRequestProcessor, {

	isPublic: function() {
		return true;
	},
	
	validatePassword : function() {
	    var validateErr = SNC.PasswordResetUtil.validateStrongerPassword();
		if ("true" != validateErr) 
			this.setAnswer("false");
		else
			this.setAnswer("true");
	},
	
	sendResetEmail: function() {
		if(!this._validateSecurity()){
			return;
		}
		
		var result = this.newItem("result");
		var userId = gs.getSession().getProperty('sysparm_sys_user_id');
		// We get the requestId from the trustworthy session so no need to sanitize
		var requestId = gs.getSession().getProperty('sysparm_request_id');
		var redirectUrl = gs.getSession().getProperty('pwd_redirect_url');
		gs.getSession().putProperty('pwd_reset_done_redirect', gs.getSession().getProperty('pwd_redirect_url'));
		
		var isRequestInValid = new SNC.PwdTrackingManager().isRequestInvalid(requestId);
		if (isRequestInValid) {
			result.setAttribute("result","true");
		} else {
			this._sendResetEmail(userId,requestId, result, redirectUrl);
		}
	},
	
	_sendResetEmail: function(userId, requestId, result, redirectUrl) {
		var user = this.validateUser(userId);
		if (user == undefined) {
			result.setAttribute("result","false");
			return;
		}
		
		result.setAttribute("result", this.raiseSendEmailEvent(user, requestId, redirectUrl));
	},
	
	sendEmailWithPasswordResetUrl: function(userId, requestId, redirectUrl) {
		var isRequestInvalid = new SNC.PwdTrackingManager().isRequestInvalid(requestId);
		if (isRequestInvalid) {
			return true;
		}
		var user = this.validateUser(userId);
		if (user == undefined)
			return false;
		
		return this.raiseSendEmailEvent(user, requestId, redirectUrl);
	},
	
	validateUser: function(userId) {
		var usr = new GlideRecord('sys_user');
		usr.addQuery('sys_id', userId);
		usr.addQuery('active', 'true');
		usr.queryNoDomain();
		if(!usr.next()){
			gs.log("User : " + userId + " is eiter inactive or doesn't exist on the instance");
			return;
		}
		return usr;
	},
	
	raiseSendEmailEvent: function(user, requestId, redirectUrl) {
		var token = SNC.PasswordResetUtil.generateUniqueUserToken(user.sys_id);
		var resetPasswordURL = '';
		if(GlideStringUtil.notNil(token)) {
			resetPasswordURL = this.getInstanceURL() + '/passwordreset.do?sysparm_id=' + user.sys_id + '&amp;sysparm_request_id=' + requestId + '&amp;sysparm_nostack=true&amp;sysparm_token=' + token;
			if (redirectUrl) {
				resetPasswordURL = resetPasswordURL + '&amp;sysparm_redirect_url='+redirectUrl;
			}
		}
		else {
			logError("Failed to generate unique token for user. Password reset failed for user : " + user.user_name);
			return false;
		}
		var eventName = 'password.reset.url';
		var param1 = GlideProperties.get("glide.pwd_reset.onetime.token.validity","12");
		var param2 = resetPasswordURL;
		gs.eventQueue(eventName, user, param1, param2);
		return true;
	 },

    getInstanceURL: function() {
        var url = gs.getProperty("glide.servlet.uri");
        var overrideUrl = gs.getProperty("glide.email.override.url");
        url = overrideUrl ? overrideUrl : url;
        if (GlideStringUtil.nil(url)) {
            gs.log("glide.servlet.url is empty!");
            return "";
        }
        url = url.trim();
        var len = url.length;
        if (url[len - 1] == '/')
            url = url.substring(0, len - 1);
        if (url.substring(len - 9, len) == "nav_to.do")
            url = url.substring(0, len - 10);

        return url;
    },
	
	getVerificationLabel: function(verificationId) {
		return new SNC.PwdVerification(verificationId).getLabel();
	},
	
	encryptWithKMFModule: function(password) {
		var kmfCryptoOperation = new sn_kmf_ns.KMFCryptoOperation(PwdConstants.PASSWORD_RESET_KMF_MODULE, PwdConstants.SYMMETRIC_WRAPPING).withAlgorithm(PwdConstants.AES_ALGORITHM).withInputFormat("KMFNone");
		return kmfCryptoOperation.doOperation(password);
	},

	useNotifyInPasswordReset: function() {
		var useNotify = GlideProperties.getBoolean('password_reset.sms.use_notify',true);
		return GlidePluginManager.isRegistered('com.snc.notify') &amp;&amp; useNotify;
	},


	updateVerificationResult: function(user, verificationId, contextId, status, requestId) {
		requestId = gs.nil(requestId) ? '' : requestId;
		contextId = gs.nil(contextId) ? requestId : contextId;
		var requestToVerificationManager = new SNC.MapRequestToVerificationManager();
		requestToVerificationManager.createOrUpdate(contextId, verificationId, status);
	},

    type: 'PasswordResetUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-06-24 18:43:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5076fc10d7102200c2f64187ed610363&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PasswordResetUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;a54385836da620100acb70b3534330a5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5076fc10d7102200c2f64187ed610363&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-12 18:23:08&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4549&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:28</sys_created_on>
        <sys_id>778c8dba2f331110d8a4d5f62799b650</sys_id>
        <sys_name>PasswordResetUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_778c8dba2f331110d8a4d5f62799b650</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
