<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2eb5d9343b00330010e4cd62f3efc42c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MLSolutionResult&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utilities to look up ML solution results&lt;/description&gt;
        &lt;name&gt;MLSolutionResult&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MLSolutionResult = Class.create();
MLSolutionResult.prototype = {
	ML_CAPABILITY_DEFINITION_BASE: 'ml_capability_definition_base',
	ML_SOLUTION: 'ml_solution',
	ML_CLUSTER_SUMMARY: 'ml_cluster_summary',
	ML_CLUSTER_DETAIL: 'ml_cluster_detail',
	
    initialize: function() {
    },

	findActiveSolution: function(solutionName) {
		var solutionDef = new GlideRecordSecure(this.ML_CAPABILITY_DEFINITION_BASE);
		solutionDef.addQuery('solution_name', solutionName); 
		solutionDef.addActiveQuery(); 
		solutionDef.query();
		if(!solutionDef.next()) {
			return null;
		}
		
		var solution = new GlideRecordSecure(this.ML_SOLUTION);
		solution.addQuery('ml_capability_definition', solutionDef.getUniqueValue());
		solution.addActiveQuery();
		solution.query();
		
		if (solution.next()) {
			return solution;
		}
		
		return null;
	},
	
	getClusterInfo: function(solutionName, options) {
		var outcomeArr = [];
		
		try {
			var solution = this.findActiveSolution(solutionName);
			if (solution === null) {
				gs.addErrorMessage(solutionName + " is not a valid solution name or is not active");
				return;
			}
			
			var isClusteringSolution = this.isClusteringSolution(solution);
			if (!isClusteringSolution) {
				gs.addErrorMessage("getClusterInfo(solutionName) is only applicable for clustering solution");
				return;
			}
			
			options = options || {};

			var segmentation_field = options.segmentation_field;
			var cluster_id = options.cluster_id;
			var gr = new GlideRecordSecure(this.ML_CLUSTER_SUMMARY);
			gr.addQuery('solution', solution.getUniqueValue());
			if (segmentation_field) {
				gr.addQuery('segmentation_val', segmentation_field);
			}
			if (cluster_id) {
				gr.addQuery('sys_id', cluster_id);
			}
			gr.query();
			while (gr.next()) {
				var outcomeObj = {};
				outcomeObj.cluster_num = gr.getValue('cluster_id');
				outcomeObj.segmentation = gr.getValue('segmentation_val');
				outcomeObj.total_members = gr.getValue('cluster_size');
				outcomeObj.cluster_quality = gr.getValue('cluster_quality');
				outcomeArr.push(outcomeObj);
			}
		} catch (e) {
			gs.logError("Exception caught: "+e, 'MLSolutionResult');
		}
		
		return outcomeArr;
	},
	
	getClusterAssignments: function(solutionName, options) {
		var outcomeArr = [];
		
		try {
			var solution = this.findActiveSolution(solutionName);
			if (solution === null) {
				gs.addErrorMessage(solutionName + " is not a valid solution name or is not active");
				return;
			}
			
			var isClusteringSolution = this.isClusteringSolution(solution);
			if (!isClusteringSolution) {
				gs.addErrorMessage("getClusterAssignments(solutionName, options) is only applicable for clustering solution");
				return;
			}
			
			options = options || {};

			var gr = new GlideRecord(this.ML_CLUSTER_DETAIL);
			gr.addQuery('solution', solution.getUniqueValue());
			var segmentation_field = options.segmentation_field;
			var cluster_id = options.cluster_id;
			var recSysId = options.rec_sys_id;
			if (segmentation_field) {
				gr.addQuery('segmentation_val', segmentation_field);
			}
			if (cluster_id) {
				gr.addQuery('cluster_id', cluster_id);
			}
			if (recSysId) {
				gr.addQuery('rec_sys_id', recSysId);
			}
			gr.query();

			while (gr.next()) {
				var outcomeObj = {};
				outcomeObj.cluster_num = gr.getDisplayValue('cluster_id');
				outcomeObj.segmentation = gr.getValue('segmentation_val');
				outcomeObj.rec_sys_id = gr.getValue('rec_sys_id');
				outcomeObj.rec_display_id = gr.getDisplayValue('rec_sys_id');
				outcomeArr.push(outcomeObj);
			}
		} catch (e) {
			gs.logError("Exception caught: "+e, 'MLSolutionResult');
		}
		
		return outcomeArr;
	},
	
	/**
	 * Returns true if the input solution is of type clustering, otherwise returns false
	 */
	isClusteringSolution: function(solution) {
		var capability = solution.capability;
		return JSUtil.notNil(capability) &amp;&amp; capability == 'clustering_trainer';
	},
	
	type: 'MLSolutionResult'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-05 04:57:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2eb5d9343b00330010e4cd62f3efc42c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;60&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MLSolutionResult&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;fccdbc4b6d2220100acb70b3534330f2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2eb5d9343b00330010e4cd62f3efc42c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-12-05 20:21:51&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3952&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:39</sys_created_on>
        <sys_id>bf5c01ba2f331110d8a4d5f62799b630</sys_id>
        <sys_name>MLSolutionResult</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_bf5c01ba2f331110d8a4d5f62799b630</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
