<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5e5491470775f01028ef0a701ad3001e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUUtterance&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utilties related to NLU Utterances&lt;/description&gt;
        &lt;name&gt;NLUUtterance&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUUtterance = Class.create();

(function() {

    var tables = NLUConstants.tables;
    var FIELDS = {
        UTTERANCE: 'utterance',
        INTENT: 'intent'
    };

    NLUUtterance.getRecordBySysId = function(sysId) {
        var gr = new GlideRecord(tables.SYS_NLU_UTTERANCE);
        return gr.get(sysId) &amp;&amp; gr;
    };

    NLUUtterance.getUtteranceByName = function(utterance, filter) {
        var gr = new GlideRecord(tables.SYS_NLU_UTTERANCE);
        gr.addQuery(FIELDS.UTTERANCE, utterance);
        if (filter) gr.addEncodedQuery(filter);
        gr.query();
        return gr;
    };

    // Pass modelId, just to avoid delete accorss the models
    NLUUtterance.deleteRecords = function(modelId, filter) {
        if (modelId &amp;&amp; filter) {
            var gr = new GlideRecord(tables.SYS_NLU_UTTERANCE);
            gr.addQuery('intent.model', modelId);
            gr.addEncodedQuery(filter);
            gr.deleteMultiple();
        }
    };

    NLUUtterance.addRecord = function(utterance, intentId) {
        var gr = new GlideRecord(tables.SYS_NLU_UTTERANCE);
        gr.newRecord();
        gr.setValue(FIELDS.UTTERANCE, utterance);
        gr.setValue(FIELDS.INTENT, intentId);
        return gr.insert();
    };

    NLUUtterance.getAssociatedEntities = function(utteranceIds) {
        if (!utteranceIds || !Array.isArray(utteranceIds) || utteranceIds.length === 0)
            return [];

        var entitiesIds = [];
        var uttrEntityGr = new GlideRecord(tables.M2M_SYS_NLU_UTTERANCE_ENTITY);
        uttrEntityGr.addQuery('utterance', 'IN', utteranceIds.join(','));
        uttrEntityGr.query();
        while (uttrEntityGr.next())
            entitiesIds.push(uttrEntityGr.getValue('entity'));

        return entitiesIds;
    };

    /**
     * Method that takes care of moving utterances to another intent, clean entities based on usage
     * @param {string} srcIntentId Intent ID from which utterances are moved
     * @param {string} targetIntentId Intent sys_id to which utterances are moved
     * @param {Array[string]} utteranceIds sys_id's of all utterances to be moved
     * @param {Array[string]} entityIds sys_id's of all entities that the moving utterances use
     */
    NLUUtterance.moveUtterancesToIntent = function(srcIntentId, targetIntentId, utteranceIds) {
        var movedEntityIds = [];
        var entitiesToMove = [];
        var entitiesToCopy = [];
        var entitiesToDelete = [];

        try {
            // 1. Update utterance.intent to targetIntentId
            NLUSystemUtil.updateRecords(
                tables.SYS_NLU_UTTERANCE,
                "sys_idIN" + utteranceIds.join(','), {
                    intent: targetIntentId
                }
            );

            var srcNluIntent = new NLUIntent(srcIntentId);
            var tgtNluIntent = new NLUIntent(targetIntentId);

            var srcEntityIds = NLUUtterance.getAssociatedEntities(utteranceIds);
            // 2. Clean up entities
            if (srcEntityIds) {
                var srcEntitiesInUseMap = NLUSystemUtil.getGroupByCount(
                    tables.M2M_SYS_NLU_UTTERANCE_ENTITY,
                    'entity',
                    'entityIN' + srcEntityIds.join(',') + '^utterance.intent=' + srcIntentId + '^utteranceNOTIN' + utteranceIds.join(',')
                );

                var entitiesUsedInTgtIntentMap = NLUSystemUtil.getGroupByCount(
                    tables.M2M_SYS_NLU_INTENT_ENTITY,
                    'entity',
                    'intent=' + targetIntentId + '^entityIN' + srcEntityIds.join(',')
                );

                srcEntityIds.forEach(function(entityId) {
                    if (!srcEntitiesInUseMap[entityId]) srcEntitiesInUseMap[entityId] = 0;
                    if (!entitiesUsedInTgtIntentMap[entityId]) entitiesUsedInTgtIntentMap[entityId] = 0;

                    if (srcEntitiesInUseMap[entityId] === 0 &amp;&amp; entitiesUsedInTgtIntentMap[entityId] === 0) {
                        // move intent entity record: mark it to change the src-intent-entity record's intent id to target-intent-id
                        entitiesToMove.push(entityId);
                    } else if (srcEntitiesInUseMap[entityId] &gt; 0 &amp;&amp; entitiesUsedInTgtIntentMap[entityId] === 0) {
                        // create new intent-entity record for trgt-intent
                        entitiesToCopy.push(entityId);
                    } else if (srcEntitiesInUseMap[entityId] === 0 &amp;&amp; entitiesUsedInTgtIntentMap[entityId] &gt; 0) {
                        // mark for delete
                        entitiesToDelete.push(entityId);
                    }
                });

                // 3. move intent-entites
                if (entitiesToMove.length &gt; 0) {
                    NLUSystemUtil.updateRecords(
                        tables.M2M_SYS_NLU_INTENT_ENTITY,
                        "entityIN" + entitiesToMove.join(',') + "^intent=" + srcIntentId, {
                            intent: targetIntentId
                        }
                    );
                    movedEntityIds = movedEntityIds.concat(entitiesToMove);
                }

                // 4. create intent-entities
                if (entitiesToCopy.length &gt; 0) {
                    var entityData = NLUEntity.getEntityData(entitiesToCopy, 'intent=' + srcIntentId);
                    entityData.forEach(function(eachEntity) {
                        var entityIndex = entitiesToCopy.indexOf(eachEntity.id);
                        if (entityIndex &gt; -1) {
                            tgtNluIntent.createIntentEntityMap(eachEntity.id, eachEntity.relationship);
                            entitiesToCopy.splice(entityIndex, 1);
                        }
                    });
                }

                // 5. delete intent-entities
                if (entitiesToDelete.length &gt; 0) {
                    srcNluIntent.deleteIntentEntities('entityIN' + entitiesToDelete.join(','));
                    movedEntityIds = movedEntityIds.concat(entitiesToDelete);
                }

                return {
                    status: 'success',
                    movedEntityIds: movedEntityIds
                };
            }

            return {
                status: 'success',
                movedEntityIds: null
            };


        } catch (error) {
            return {
                status: 'failure',
                movedEntityIds: null
            };
        }

    };

    NLUUtterance.prototype = {

        initialize: function(utteranceId, utteranceGr) {
            this.sysId = utteranceId;
            if (utteranceGr) {
                this.gr = utteranceGr;
                this.sysId = this.gr.getUniqueValue();
            }
        },

        getGr: function() {
            if (!this.gr) this.gr = NLUUtterance.getRecordBySysId(this.sysId);
            return this.gr;
        },

        updateIntent: function(intentId) {
            var gr = this.getGr();
            gr.setValue(FIELDS.INTENT, intentId);
            return gr.update();
        },

        deleteRecord: function() {
            var gr = this.getGr();
            return gr &amp;&amp; gr.deleteRecord();
        },

        type: 'NLUUtterance'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-10 13:18:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5e5491470775f01028ef0a701ad3001e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUUtterance&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5e5491470775f01028ef0a701ad3001e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-03 18:49:44&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;7233&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:50</sys_created_on>
        <sys_id>95ac85fa2f331110d8a4d5f62799b623</sys_id>
        <sys_name>NLUUtterance</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_95ac85fa2f331110d8a4d5f62799b623</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
