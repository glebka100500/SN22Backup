<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2fad362d07d11010220b0a701ad30069</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUStudioPublisher&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utilities releated to publishing NLU Model from NLU Workbench&lt;/description&gt;
        &lt;name&gt;NLUStudioPublisher&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUStudioPublisher = Class.create();

(function() {

    var constants = NLUConstants.constants;

    NLUStudioPublisher.canPublish = function(modelId) {
        var nluModel = new NLUModel(modelId);
        var modelStatusGr = nluModel.getStatus();
        if (modelStatusGr) {
            var trainedVersion = NLUHelper.getIntValue(modelStatusGr.getValue('trained_version'));
            var publishedVersion = NLUHelper.getIntValue(modelStatusGr.getValue('published_version'));
            return trainedVersion &gt; 0 &amp;&amp; trainedVersion &gt; publishedVersion;
        }
        return false;
    };

    NLUStudioPublisher.publishModel = function(modelId) {
        var nluModel, modelGr, parloIntegrator,
            statusGr, output, trainedVersion, publishedVersion;
        var result = {};

        try {

            nluModel = new NLUModel(modelId);
            modelGr = nluModel.getGR();
            if (!modelGr) throw new Error(gs.getMessage('Model id does not exist'));

            statusGr = nluModel.getStatus();
            trainedVersion = statusGr.getValue('trained_version') ? parseInt(statusGr.getValue('trained_version')) : 0;
            publishedVersion = statusGr.getValue('published_version') ? parseInt(statusGr.getValue('published_version')) : 0;

            if (trainedVersion &gt; 0) {
                if (publishedVersion &gt; 0 &amp;&amp; (trainedVersion &lt;= publishedVersion)) {
                    result.status = 'failure';
                    result.message = gs.getMessage('Invalid trained version.');
                    return result;
                }

                parloIntegrator = new NLUParloIntegrator(modelGr);
                output = parloIntegrator.publish(trainedVersion);
                result.status = output.status;
                if (output.status === 'success') {
                    publishedVersion = output.response.solutionVersion;
                    result.publishedVersion = publishedVersion;

                    nluModel.updateStatus({
                        published_version: publishedVersion,
                        state: 'published',
                        last_published_on: (new GlideDateTime())
                    });
                } else if (output.status === 'failure') {
                    result.errors = NLUHelper.getErrorsFromResponse(output.response);
                }
            } else {
                result.status = 'failure';
                result.message = gs.getMessage('Invalid trained version.');
            }
        } catch (e) {
            result.status = 'failure';
            result.message = e.message;
        }
        return result;
    };

    NLUStudioPublisher.prototype = {
        type: 'NLUStudioPublisher',
        initialize: function() {}
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-06-09 16:28:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2fad362d07d11010220b0a701ad30069&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUStudioPublisher&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2fad362d07d11010220b0a701ad30069&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-07-18 14:03:40&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2762&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:41</sys_created_on>
        <sys_id>6c6c01ba2f331110d8a4d5f62799b6e1</sys_id>
        <sys_name>NLUStudioPublisher</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_6c6c01ba2f331110d8a4d5f62799b6e1</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
