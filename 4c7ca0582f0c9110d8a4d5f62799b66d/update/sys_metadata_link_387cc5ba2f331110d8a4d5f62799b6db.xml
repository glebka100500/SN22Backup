<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3ccfaa880a0a0b840081b39494c1418f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.Scheduler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Facade over our scheduler to make certain operations easier from script.&lt;/description&gt;
        &lt;name&gt;Scheduler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/*
 * Use SchedulerScriptFactory script include to get Scheduler object
 */

gs.include("PrototypeServer");
var Scheduler = Class.create();

Scheduler.prototype = {
   initialize : function() {

      this.local_id = GlideClusterSynchronizer.getSystemID();
   },

   stop : function(node_id) {
      this._queueAction(node_id, 'stop');
   },

   start : function(node_id) {
      this._queueAction(node_id, 'start');

   },

   /*_________________________________________________________________
   * Description: Ensures child sys_trigger entries for the specified node
                  for any run "ALL NODES" scheduled jobs. Handles insertions
                  and deletions of nodes.
   * Parameters:
   * Returns:
   ________________________________________________________________*/
   propagateRATriggersForNode: function(node) {
      var trig = new GlideRecord("sys_trigger");
      trig.addQuery("system_id", "IN", "ALL NODES, ACTIVE NODES");
      trig.query();
      while (trig.next()){
         this._propagateAllNodes(node, trig);
      }
   },

   /*_________________________________________________________________
   * Description: Ensures run "ALL NODES" for a given scheduled job are
                  propagated to all nodes.
   * Parameters:
   * Returns:
   ________________________________________________________________*/
   propagateRANodesForTrigger: function(trigger) {
      var nd = new GlideRecord("sys_cluster_state");
      nd.addQuery("status", "online");
	  if (trigger.system_id == "ACTIVE NODES")
		  nd.addQuery("schedulers", "any");
      nd.query();
      while (nd.next()){
         this._propagateAllNodes(nd, trigger);
      }
   },

   /*_________________________________________________________________
    * Description: Will create or delete sys_trigger entries for run "ALL NODES" jobs.
    * Parameters: GlideRecord(SYS_CLUSTER_STATE), GlideRecord(SYS_TRIGGER)
   ________________________________________________________________*/
   _propagateAllNodes: function(node_gr, trigger_gr) {
      var nc = new GlideRecord("sys_trigger");
      nc.addQuery("sys_id", trigger_gr.sys_id);
      nc.query();
      //Don't recreate in the case of a delete op (ref cascade handles actual delete)
      if (!nc.next())
         return;

	  gs.print("Scheduler()._propogateAllNodes node - "+node_gr.system_id+", job name - "+trigger_gr.name+", job id - "+trigger_gr.sys_id);
      var ch = GlideRecord("sys_trigger");
      ch.addQuery("system_id", node_gr.system_id);
      ch.addQuery("parent", trigger_gr.sys_id);
      ch.query();
	   if (ch.next()) {
	    gs.print("Deleting the existing child job (id- "+ch.sys_id+" ) of parent - "+trigger_gr.name+" for node - "+node_gr.system_id);
        ch.deleteRecord();
	  }

      if (nc.system_id != trigger_gr.system_id)
         return;

      if (node_gr.status == "offline") {
         gs.print("Node " + node_gr.system_id + " status is offline, not adding any child job (for "+trigger_gr.name+") pinned to this node");
         return;
      }

      if (node_gr.schedulers == "none") {
         gs.print("Node " + node_gr.system_id + " scheduler mode is none, not adding any child job (for "+trigger_gr.name+") pinned to this node");
         return;
      }

	  if (trigger_gr.system_id == "ACTIVE NODES" &amp;&amp; node_gr.schedulers != "any") {
		 gs.print("Node scheduler is not set to ANY (mode is "+ node_gr.schedulers+ ") , not adding any child job (for "+trigger_gr.name+") pinned to this node");
		 return;
	  }

      nc.parent = trigger_gr.sys_id;
      nc.system_id = node_gr.system_id;
      nc.insert();
      gs.print("Inserted child entry for parent job "+trigger_gr.name+" for node - "+node_gr.system_id);
   },

   _queueAction : function(node_id, action) {
      this.node_id = node_id;
      var node_list = this._getNodeList();
      for (var i =0; i &lt; node_list.length; i++)
         GlideClusterMessage.postDirected('scheduler.action', action, node_list[i]);

   },

   _getNodeList : function() {
      var node_list = new Array();
      if (this.node_id == 'ALL') {
         var gr = new GlideRecord('sys_cluster_state');
         gr.query();
         while (gr.next())
            node_list.push(gr.system_id + '');
      } else
      node_list.push(this.node_id);

      return node_list;
   }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2008-01-02 23:21:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3ccfaa880a0a0b840081b39494c1418f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;38&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Scheduler&lt;/sys_name&gt;
        &lt;sys_package display_value="System (glidesoft)" source="glidesoft"&gt;079c7c036d2220100acb70b3534330b0&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3ccfaa880a0a0b840081b39494c1418f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-16 09:52:28&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4308&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:59</sys_created_on>
        <sys_id>387cc5ba2f331110d8a4d5f62799b6db</sys_id>
        <sys_name>Scheduler</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_387cc5ba2f331110d8a4d5f62799b6db</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
