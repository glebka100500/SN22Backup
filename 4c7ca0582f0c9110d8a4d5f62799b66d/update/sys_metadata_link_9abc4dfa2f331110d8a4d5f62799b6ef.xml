<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>68be25e2ff111000dadaebcfebffad9a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MetricsTimeline&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Display a timeline view of metric instance durations&lt;/description&gt;
        &lt;name&gt;MetricsTimeline&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[// Class Imports
var TimelineItem = GlideTimelineItem;
var StringUtil = GlideStringUtil;

var ERROR_TITLE = 'Error';
var GANTT_REQUIREMENT = 'This is required for displaying a timeline.';
var ERROR_NO_TASK_ID = 'No "sysparm_task_id" specified in the original Url. ' + GANTT_REQUIREMENT;
var ERROR_NO_GR_TASK = 'Unable to find a matching task record with the specified system id.';
var START_LABEL = gs.getMessage('Start');
var END_LABEL = gs.getMessage('End');
var MESSAGES = [ ERROR_TITLE, ERROR_NO_TASK_ID ];

var MetricsTimeline = Class.create();
MetricsTimeline.prototype = Object.extendsObject(AbstractTimelineSchedulePage, {

	// ////////////////////////////////////////////////////////////////////////////////////////////////
	// GET_ITEMS
	// ////////////////////////////////////////////////////////////////////////////////////////////////

	getItems : function() {
		// this starts everything
		this._getParameters();
		this._getRecord();
		this.setPageTitle(StringUtil.escapeHTML(this.record.getDisplayValue()) + gs.getMessage(' Metrics'));
		this._getDefinitions();
		this._processMetrics();
	},

	_getParameters : function() {
		this.table = this.getParameter("sysparm_timeline_table");
		this.table_id = this.getParameter("sysparm_timeline_id");
	},

	_getRecord : function() {
		var gr = new GlideRecord(this.table);
		gr.get(this.table_id);
		this.record = gr;
	},

	_getDefinitions : function() {
		var def = new GlideRecord("metric_definition");
		//Check for metric definitions on tables that are parents of this.table as well as the this.table itself
		var tablesInHierarchy = GlideDBObjectManager.get().getTables(this.table.toString());
		def.addQuery('table', tablesInHierarchy);
		def.addQuery("timeline", true);
		def.addActiveQuery();
		def.query();
		this.definitions = def;
	},

	_processMetrics : function() {
		var def = this.definitions;
		while (def.next()) {
			var defItem = new TimelineItem("metric_definition", def.getUniqueValue());
			defItem.setLeftLabelText(def.getDisplayValue());
			var valueInstances = {};

			var dur = new GlideDuration();
			var totalDuration;
			var durationAgg = new GlideAggregate("metric_instance");
			durationAgg.addQuery("definition", def.getUniqueValue());
			durationAgg.addQuery("table", this.table);
			durationAgg.addQuery("id", this.table_id);
			durationAgg.addAggregate("SUM", "duration");
			durationAgg.groupBy("definition");
			durationAgg.query();
			if (durationAgg.next()) {
				dur.setValue(durationAgg.getAggregate("SUM", "duration"));
				totalDuration = dur.getNumericValue();

			}

			// create value spans
			var instance = new GlideRecord("metric_instance");
			instance.addQuery("definition", def.getUniqueValue());
			instance.addQuery("table", this.table);
			instance.addQuery("id", this.table_id);
			instance.orderBy("start");
			instance.query();
			var predecessor = null;
			while (instance.next()) {
				var value = instance.value;
				if (value == "")
					value = "(" + gs.getMessage("empty") + ")";
				var instanceID = instance.getUniqueValue();
				gs.print("instanceID: " + instanceID);
				var instanceItem = valueInstances[value];
				if (!instanceItem) {
					instanceItem = new TimelineItem("metric_instance", value);
					instanceItem.setParent(def.getUniqueValue());
					instanceItem.setLeftLabelText(value);
					valueInstances[value] = instanceItem;
				}

				var instanceSpan = instanceItem.createTimelineSpan("value_span", instanceID);
				instanceSpan.setSpanText(value);
				if (predecessor)
					instanceSpan.addPredecessor(predecessor);

				predecessor = instanceID;

				var start = instance.start.getGlideObject().getNumericValue();
				var end = instance.end.getGlideObject().getNumericValue();
				var duration = instance.duration.getGlideObject().getNumericValue();
				var durationPercent = Math.round(duration / totalDuration * 100);

				if (start == 0)
					continue;

				if (end &gt; 0) {
					// span start and end
					instanceSpan.setTimeSpan(start, end);
					instanceSpan.setTooltip(instance.value + " (" + instance.duration.getDisplayValue() + " - " + durationPercent + "%)");
				} else {
					// still open, use point instead of span
					instanceSpan.setTimeSpan(start, start);
					instanceSpan.setPointIconClass("green_circle");
					instanceSpan.setTooltip("current value");
				}
			}

			for ( var i in valueInstances)
				this.add(valueInstances[i]);

			this.add(defItem);
		}
	},

	_noSpanTaskId : function() {
		return this.setStatusError(gs.getMessage(ERROR_TITLE), gs.getMessage(ERROR_NO_GR_TASK));
	}

});
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;john.roberts&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2011-09-27 01:57:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;68be25e2ff111000dadaebcfebffad9a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MetricsTimeline&lt;/sys_name&gt;
        &lt;sys_package display_value="Metric Definition" source="com.glide.metrics"&gt;ff6241c76d6620100acb70b353433041&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_68be25e2ff111000dadaebcfebffad9a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;john.roberts&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2011-12-05 21:05:08&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4691&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:10</sys_created_on>
        <sys_id>9abc4dfa2f331110d8a4d5f62799b6ef</sys_id>
        <sys_name>MetricsTimeline</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_9abc4dfa2f331110d8a4d5f62799b6ef</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
