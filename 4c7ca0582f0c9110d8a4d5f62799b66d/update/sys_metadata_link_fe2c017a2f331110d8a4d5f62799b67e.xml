<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>007e6b39530c511031a5ddeeff7b12ec</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionSLACondition&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Custom SLA condition class for Issue Auto-Resolution. It overwrites the cancel condition to update context record when SLA is canceled.  &lt;/description&gt;
        &lt;name&gt;AutoResolutionSLACondition&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionSLACondition = Class.create();
AutoResolutionSLACondition.prototype = Object.extendsObject(SLAConditionBase, {
    
	cancel: function() {
		this.lu.logInfo('AutoResolutionSLACondition.cancel called');
		if (SLAConditionBase.prototype.cancel.call(this)) {
			//If cancel condition matches, set IAR context to inactive. 
			this._markContextInactive(AutoResolutionConstants.SLA_STATE.CANCELED);
			return true;
		}
		return false;
	},
	
	complete: function() {
		this.lu.logInfo('AutoResolutionSLACondition.complete called');
		if (SLAConditionBase.prototype.complete.call(this)) {
			//If complete condition matches, set IAR context to inactive. 
			this._markContextInactive(AutoResolutionConstants.SLA_STATE.COMPLETED);
			return true;
		}
		return false;		
	},
	
	_markContextInactive: function(contextSLAState) {
		var contextGr = new GlideRecord(AutoResolutionConstants.CONTEXT_TABLE_NAME);
			contextGr.addActiveQuery();
			contextGr.addQuery(AutoResolutionConstants.CONTEXT_TASK_SLA_FIELD_NAME, this.taskSLA.getUniqueValue());
			contextGr.query();
			contextGr.next();
			if(contextGr.isValidRecord()) {
				contextGr.setValue(AutoResolutionConstants.ACTIVE_FIELD_NAME, false);
				contextGr.setValue(AutoResolutionConstants.CONTEXT_SLA_STATE_FIELD_NAME , contextSLAState);
				contextGr.update();
			}
	},
	
    type: 'AutoResolutionSLACondition'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-06-13 20:15:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;007e6b39530c511031a5ddeeff7b12ec&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionSLACondition&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;85493a472f800110d8a4d5f62799b6a9&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_007e6b39530c511031a5ddeeff7b12ec&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-27 18:09:38&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1376&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:45</sys_created_on>
        <sys_id>fe2c017a2f331110d8a4d5f62799b67e</sys_id>
        <sys_name>AutoResolutionSLACondition</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_fe2c017a2f331110d8a4d5f62799b67e</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
