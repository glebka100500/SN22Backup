<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>84aa4d87b70323000999e4f6ee11a9c4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ChangeManagementEventHandlerSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Base Change Association API. Use the "ChangeManagementEventHandlerSNC" script include to override functionality in this script if required&lt;/description&gt;
        &lt;name&gt;ChangeManagementEventHandlerSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ChangeManagementEventHandlerSNC = Class.create();

ChangeManagementEventHandlerSNC.AFFECTED_CREATE = "sn_chg_mgt.affected.CREATE";
ChangeManagementEventHandlerSNC.IMPACTED_CREATE = "sn_chg_mgt.impacted.CREATE";
ChangeManagementEventHandlerSNC.OFFERING_CREATE = "sn_chg_mgt.offering.CREATE";
ChangeManagementEventHandlerSNC.IMPACTED_SERVICES_REFRESH = "sn_chg_mgt.impacted.REFRESH";
ChangeManagementEventHandlerSNC.AVALABLE_SPANS_GET = "sn_chg_mgt.schedule.GET";
ChangeManagementEventHandlerSNC.AVALABLE_SPANS_UPDATE = "sn_chg_mgt.schedule.UPDATE";

ChangeManagementEventHandlerSNC.prototype = {

	initialize: function(chgMgtWorkerGr) {
		this._log = new GSLog(ChangeCommon.LOG_PROPERTY, this.type);
		if (chgMgtWorkerGr)
			this._chgMgtWorker = new global.ChangeManagementWorker(chgMgtWorkerGr);
	},

	/**
	* Handle chgMgt events e.g. sn_chg_mgt.affected.CREATE
	*
	* event.name sn_chg_mgt.&lt;association_type&gt;.&lt;operation&gt;
	* event.parm1 - chg_mgt_worker.sys_id
	* event.parm2 - chg_mgt_worker.request
	*/
	process: function(event) {
		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[process] event: " + JSON.stringify(event));


		var chgMgtWorkerSysId = event.parm1;
		if (!this._chgMgtWorker &amp;&amp; chgMgtWorkerSysId)
			this.setChgMgtWorker(chgMgtWorkerSysId);

		if (!this._chgMgtWorker)
			return;

		if (!this._chgMgtWorker.isWaiting())
			return;

		this._chgMgtWorker.inProgress();

		var nameValuePairs = JSON.parse(event.parm2);
		var eventName = event.name + "";
		var hasDataEnforcement = gs.getProperty(ChangeRequestSNC.ENFORCE_DATA_REQ_PROP) === "true";

		// To collect interactive messages isInteractive based on property
		GlideSession.get().setInteractive(hasDataEnforcement);

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[process] hasDataEnforcement: " + hasDataEnforcement + " isInteractiveSession: " + gs.isInteractiveSession());

		// All functions here should hand off to their own Script Include
		switch(eventName) {
			// Always run complete UNLESS you wish to run secondary async process (and handle your own complete)
			case ChangeManagementEventHandler.AFFECTED_CREATE:
				var affectedCIAssociationManager = new global.ChangeCIAssociationManager(nameValuePairs.task + "", this._chgMgtWorker);
				affectedCIAssociationManager.create(nameValuePairs.cmdb_ci_sys_ids, global.ChangeCIAssociation.AFFECTED, nameValuePairs);
				if ((nameValuePairs.refresh_impacted_services + "").toLowerCase() === "true")
					affectedCIAssociationManager.refreshImpactedServices();
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementEventHandler.IMPACTED_CREATE:
				var impactedCIAssociationManager = new global.ChangeCIAssociationManager(nameValuePairs.task + "", this._chgMgtWorker);
				impactedCIAssociationManager.create(nameValuePairs.cmdb_ci_sys_ids, ChangeCIAssociation.IMPACTED, nameValuePairs);
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementEventHandler.OFFERING_CREATE:
				var offeringAssociationManager = new global.ChangeCIAssociationManager(nameValuePairs.task + "", this._chgMgtWorker);
				offeringAssociationManager.create(nameValuePairs.cmdb_ci_sys_ids, ChangeCIAssociation.OFFERING, nameValuePairs);
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementEventHandler.IMPACTED_SERVICES_REFRESH:
				new global.ChangeCIAssociationManager(nameValuePairs.task + "", this._chgMgtWorker).refreshImpactedServices();
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementEventHandlerSNC.AVALABLE_SPANS_GET:
				new global.ChangeScheduleRESTUtil(this._chgMgtWorker).getSpans(nameValuePairs);
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementEventHandlerSNC.AVALABLE_SPANS_UPDATE:
				new global.ChangeScheduleRESTUtil(this._chgMgtWorker).updateChangeScheduleTime(nameValuePairs);
				this._collectMsgType("error");
				this._collectMsgType("info");
				this._chgMgtWorker.complete();
				break;
			case ChangeManagementWorker.DELETE:
				// code block
				this._chgMgtWorker.complete();
				break;
			default:
				this._chgMgtWorker.addErrorMsg(gs.getMessage("No event handler logic found for event: {0}", [eventName]));
				this._chgMgtWorker.complete();
		}
	},

	setChgMgtWorker: ChangeManagementWorkerSNC.methods.setChgMgtWorker,

	getChgMgtWorker: ChangeManagementWorkerSNC.methods.getChgMgtWorker,

	_collectMsgType: function(type) {
		type = type + "";
		var msg = "";
		var msgs;

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.debug("[_collectMsgType] type: " + type + " isInteractiveSession: " + gs.isInteractiveSession());

		if (type === "error")
			msgs = gs.getErrorMessages();
		else if (type === "info")
			msgs = gs.getInfoMessages();
		else
			return;

		var hasMgs = msgs &amp;&amp; typeof msgs.size === "function" ? msgs.size() &gt; 0 : msgs.length &gt; 0;
		if (hasMgs &amp;&amp; type === "error") {
			msg += " " + msgs;

			if (this.getChgMgtWorker())
				this.getChgMgtWorker().addErrorMsg(msg);
		} else if (hasMgs &amp;&amp; type === "info") {
			this._log.info("[_collectMsgType] infMessage: " + msg);

			if (this.getChgMgtWorker())
				this.getChgMgtWorker().addInfoMsg(msg);
		} else
			return;
	},

	type: "ChangeManagementEventHandlerSNC"
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-01-21 10:52:20&lt;/sys_created_on&gt;
        &lt;sys_id&gt;84aa4d87b70323000999e4f6ee11a9c4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ChangeManagementEventHandlerSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Request" source="com.snc.change_request"&gt;9be0c58b6d2620100acb70b3534330c8&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_84aa4d87b70323000999e4f6ee11a9c4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-02-23 21:21:21&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5534&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:05</sys_created_on>
        <sys_id>abec417e2f331110d8a4d5f62799b6b5</sys_id>
        <sys_name>ChangeManagementEventHandlerSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_abec417e2f331110d8a4d5f62799b6b5</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
