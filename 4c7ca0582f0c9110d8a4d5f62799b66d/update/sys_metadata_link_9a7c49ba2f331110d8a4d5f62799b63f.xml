<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3f1091ea0f020010717cc562ff767edc</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CMNScheduleCrudSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;CRUD wrapper for cmn_schedule table&lt;/description&gt;
        &lt;name&gt;CMNScheduleCrudSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CMNScheduleCrudSNC = Class.create();
CMNScheduleCrudSNC.prototype = {
    initialize: function() {},

    type: 'CMNScheduleCrudSNC',
	create: function(scheduleName, timeZone, domain, type, parent, description){
		var glideScheduleRecord = new GlideRecord("cmn_schedule");
		glideScheduleRecord.initialize();
		glideScheduleRecord.setValue("name", scheduleName);
		glideScheduleRecord.setValue("time_zone", timeZone || "");
		glideScheduleRecord.setValue("sys_domain", domain || "global");
		glideScheduleRecord.setValue("parent", parent || "");
		glideScheduleRecord.setValue("description", description || "");
		glideScheduleRecord.setValue("type", type || "");
		glideScheduleRecord.insert();
		return glideScheduleRecord.sys_id;
	},
	edit: function(scheduleID, scheduleName, timeZone, domain, type, parent, description) {
		var glideScheduleRecord = new GlideRecord("cmn_schedule");
		if (!glideScheduleRecord.get(scheduleID))
			return false;
		
		glideScheduleRecord.setValue("name", scheduleName);
		glideScheduleRecord.setValue("time_zone", timeZone || "");
		glideScheduleRecord.setValue("sys_domain", domain || "global");
		glideScheduleRecord.setValue("parent", parent || "");
		glideScheduleRecord.setValue("description", description || "");
		glideScheduleRecord.setValue("type", type || "");
		return !gs.nil(glideScheduleRecord.update());
	},
	deleteRecord: function(scheduleSysId){
		var sch = new GlideRecord("cmn_schedule");
		if(sch.get(scheduleSysId)){
			sch.deleteRecord();
		}
	}
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-01-02 21:19:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3f1091ea0f020010717cc562ff767edc&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CMNScheduleCrudSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Advanced Schedules Support" source="com.glide.schedules"&gt;92a009c76d2620100acb70b353433070&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3f1091ea0f020010717cc562ff767edc&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-27 16:12:07&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1509&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:05</sys_created_on>
        <sys_id>9a7c49ba2f331110d8a4d5f62799b63f</sys_id>
        <sys_name>CMNScheduleCrudSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_9a7c49ba2f331110d8a4d5f62799b63f</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
