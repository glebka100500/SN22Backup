<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>80de10c35312330012a9ddeeff7b12d4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AssetManagementPerDomainAssetProcessSettingBaseJob&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This is the base job for Domain Asset Process Setting jobs to extend. It supports Domain Separation.&lt;/description&gt;
        &lt;name&gt;AssetManagementPerDomainAssetProcessSettingBaseJob&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AssetManagementPerDomainAssetProcessSettingBaseJob = Class.create();
AssetManagementPerDomainAssetProcessSettingBaseJob.prototype = Object.extendsObject(AssetManagementBaseJob, {
    initialize: function() {
    },
	
	/*
	Override parent function. Get domains under which we want to run job.
	*/
	getDomains: function() {
		var domainArray = [];
		var gr = new GlideRecord('alm_domain_asset_process_setting');
		gr.addQuery('run_asset_process', true);
		gr.query();
		while (gr.next()) {
			domainArray.push(gr.getValue('sys_domain'));
		}
		return domainArray;
	},
	
	runScriptByJob: function(script, time, name, domainSysIdArray, documentKey) {
		if (gs.nil(script)) {
			throw this.type + ': Script is null or empty. Nothing to be ran.';
		}
		var so = new ScheduleOnce();
		if(!gs.nil(time)){
			so.setTime(time);
		}
		if(!gs.nil(name)){
			so.setLabel(name);
		}
		if(!gs.nil(documentKey)){
			so.document_key = documentKey;
		}
		if (!this.fIsDomainDataSeparationEnabled) {
			//run script without being under any domains
			gs.log('Detected domain data separation is not enabled on this instance. Run job immediately.', this.type);
			so.script = script;
		} else {
			/*if domainSysIdArray is not passed (equals to null)
			      run script under all enabled domains reading from [alm_domain_asset_process_setting]
			  else
			      run script under specified domains passed*/
			if (gs.nil(domainSysIdArray)) {
				domainSysIdArray = [];
				var gr = new GlideRecord('alm_domain_asset_process_setting');
				gr.addQuery('run_asset_process', true);
				gr.query();
				while (gr.next()) {
					domainSysIdArray.push(gr.getValue('sys_domain'));
				}
			}
			gs.log("Detected domain data separation is enabled on this instance. Run job under domains '" + this.getDomainNameArray(domainSysIdArray) + "'(" + domainSysIdArray + ")", this.type);
			var scriptWithDomains = "";
			var currentDomainSysId = this.getCurrentDomainSysId();
			for (var i = 0; i &lt; domainSysIdArray.length; i++) {
				if (!gs.nil(domainSysIdArray[i])) {
					scriptWithDomains += "GlideSession.get().setDomainID('" + domainSysIdArray[i] + "');";
					scriptWithDomains += script;
					scriptWithDomains += "GlideSession.get().setDomainID('" + currentDomainSysId + "');";
				}
			}
			so.script = scriptWithDomains;
		}
		gs.log('Running script:\n' + so.script);
		so.schedule();
	},
	
    type: 'AssetManagementPerDomainAssetProcessSettingBaseJob'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-07-01 21:09:05&lt;/sys_created_on&gt;
        &lt;sys_id&gt;80de10c35312330012a9ddeeff7b12d4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AssetManagementPerDomainAssetProcessSettingBaseJob&lt;/sys_name&gt;
        &lt;sys_package display_value="Asset Management" source="com.snc.asset_management"&gt;0ea009c76d2620100acb70b353433049&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_80de10c35312330012a9ddeeff7b12d4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-08-05 21:20:02&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2437&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:56</sys_created_on>
        <sys_id>e1ec8d3e2f331110d8a4d5f62799b6d6</sys_id>
        <sys_name>AssetManagementPerDomainAssetProcessSettingBaseJob</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e1ec8d3e2f331110d8a4d5f62799b6d6</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
