<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>340b86140a0a0aa700d9f0aea1fb399a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.Cart&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility Scripts to make background ordering of catalog items easier.&amp;#13;
&amp;#13;
This has been deprecated. Please dont use this Script Include for any usecase. ServiceNow will deactivate the Script Include in coming release.&amp;#13;
Please move to https://developer.servicenow.com/dev.do#!/reference/api/quebec/server/sn_sc-namespace/c_CartJSScoped&lt;/description&gt;
        &lt;name&gt;Cart&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");

var Cart = Class.create();

Cart.prototype = {
    /**
     * @param cartName - name to use when creating/retrieving a cart. If the name is not passed in
     *            (or if it's null/undefined) the default cart will be used
     * @param userID - sys_id of the user to use when creating/retrieving a cart. It's also the user
     *            that will be used as the openedBy user on the request when an order is placed. If
     *            the user is not passed in (or if it's null/undefined) current user will be used.
     */
    initialize: function(cartName, userID) {
        this.cartName = !cartName ? null : cartName;
        this.userID = !userID ? null : userID;

        this.cart = this.getCart();
        this.clearCart();
    },

    getCart: function() {
        var cart = GlideappCart.getCartForRhino(this.cartName, this.userID);
        return cart.getGlideRecord();
    },

    clearCart: function() {
        var id = this.cart.sys_id;
        var kids = new GlideRecord('sc_cart_item');
        kids.addQuery('cart', id);
        kids.deleteMultiple();
    },
    
    deleteCart: function() {
        var cart = GlideappCart.getCartForRhino(this.cartName, this.userID);
        cart.empty();
    },

    addItem: function(itemID, quantity) {
        if (typeof (quantity) == 'undefined')
            quantity = 1;
		var catItem = GlideappCatalogItem.get(itemID);
		if (catItem != null) {
			var gr = new GlideRecord('sc_cart_item');
			gr.initialize();
			gr.cart = this.cart.sys_id;
			gr.cat_item = itemID;
			gr.quantity = quantity;
			var rc = gr.insert();
			this.prepVariables(itemID, rc);
			return rc;
		} else {
			gs.log("Item does not exist : "+itemID);
			return null;
		}
	},

    prepVariables: function(itemID, cart_id) {
        var ci = GlideappCatalogItem.get(itemID);
		if (ci == null) {
			gs.log("Item does not exist: "+itemID);
			return;
		}
        var gr = ci.getStandaloneVariables();
		var seq = 1;
        while (gr.next()) {
			var question = new GlideappQuestion.getQuestion(gr.sys_id);
            var variable = new GlideRecord('sc_item_option');
            variable.initialize();
            variable.value.setValue(question.getValue());
            variable.item_option_new = gr.sys_id;
            variable.cart_item = cart_id;
			variable.order = seq;
            variable.insert();
			seq++;
        }
    },

    setVariable: function(cartID, variable_name, value) {
        var variable = new GlideRecord('sc_item_option');
        variable.addQuery('cart_item', cartID);
        variable.addQuery('item_option_new', variable_name).addOrCondition('item_option_new.name', variable_name);
        variable.query();
        if (variable.next()) {
			variable.value.setValue(value);
            variable.update();
        }
    },

    placeOrder: function() {
        var cartItemRecord = new GlideRecord("sc_cart_item");
		cartItemRecord.addQuery('cart', this.cart.sys_id);
		cartItemRecord.query();
		if (cartItemRecord.getRowCount() &gt; 0) {
			var req = new GlideappRequestNew();
			var rc = req.copyCart(this.cartName, this.userID);
			this.clearCart();
			return rc;
		} else {
			gs.log("Can not checkout empty cart ");
		}
    }
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2007-04-27 17:16:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;340b86140a0a0aa700d9f0aea1fb399a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;71&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Cart&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;6d218d0f6d2620100acb70b35343303c&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_340b86140a0a0aa700d9f0aea1fb399a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-07 07:24:30&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3239&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:48</sys_created_on>
        <sys_id>0a6cc1ba2f331110d8a4d5f62799b64c</sys_id>
        <sys_name>Cart</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_0a6cc1ba2f331110d8a4d5f62799b64c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
