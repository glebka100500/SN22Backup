<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1ab61e47ef60110098d5925495c0fb79</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ECCPayloadParser&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The class that parses the ECC queue payload&lt;/description&gt;
        &lt;name&gt;ECCPayloadParser&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[
/**
 * The class that parses the ECC queue payload
 * Aleck Lin aleck.lin@servicenow.com
 */

var ECCPayloadParser = Class.create();

ECCPayloadParser.prototype = {
    initialize: function(payload) {
		if (JSUtil.nil(payload))
			return;
		
		this.payload = payload;		
		this.parameters = {};
		
		this._paresParameters();
    },

	setSysId: function(sys_id) {
		var gr = new GlideRecord("ecc_queue");
		if (sys_id &amp;&amp; gr.get('sys_id', sys_id))
			this.payload = gr.payload + '';		
	},
	
	getParameters: function() {
		return this.parameters;
	},

	_paresParameters: function() {
		var XMLUtil = GlideXMLUtil;
		var g_doc = XMLUtil.parse(this.payload);

		var parent = g_doc.getDocumentElement();
		var topTagName = parent.getTagName();

		if (topTagName == "parameters") {
			var nodeList = parent.getElementsByTagName("parameter");
		} else if (topTagName == "probes" || topTagName == "results") {
			var element = XMLUtil.getChildByTagName(parent, "parameters");
			var nodeList = element.getElementsByTagName("parameter")
		} else
			return;
	
		if (JSUtil.nil(nodeList)) {
			gs.log("Unable to find any parameter xml tags from the output payload");
			return;
		}
	
		for (i=0; i&lt;nodeList.getLength(); i++) {
			var attribute = XMLUtil.getAttributesAsMap(nodeList.item(i));
			this.parameters[attribute.get("name")] = attribute.get("value") + '';
		} 
	},
	

	
	
    type: 'ECCPayloadParser'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;aleck.lin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-10-25 20:07:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1ab61e47ef60110098d5925495c0fb79&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ECCPayloadParser&lt;/sys_name&gt;
        &lt;sys_package display_value="MID Server" source="com.glideapp.agent"&gt;881201476d6620100acb70b3534330fa&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1ab61e47ef60110098d5925495c0fb79&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;aleck.lin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2013-10-25 20:39:17&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1399&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:13</sys_created_on>
        <sys_id>654cc57a2f331110d8a4d5f62799b696</sys_id>
        <sys_name>ECCPayloadParser</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_654cc57a2f331110d8a4d5f62799b696</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
