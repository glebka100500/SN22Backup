<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>163b70b1cd5a4910f877b77ab7c509b5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBLFRequestTranslationUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Customers should not change this class directly, rather override methods in the subclass.
This class is never called directly.&lt;/description&gt;
        &lt;name&gt;KBLFRequestTranslationUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBLFRequestTranslationUtilSNC = Class.create();
KBLFRequestTranslationUtilSNC.prototype = {
    initialize: function() {
        this.SUCCESS = 'Success';
        this.SKIPPED = 'Skipped';
        this.FAILED = 'Failed';
        this.REQUEST_ITEM_LINK = '/sn_lf_requested_item_list.do?sysparm_query=numberIN';
        this.lfSettingUtils = new global.LFSettingUtils();
        this.lfUtils = new global.LFUtils();
    },
    /**
     * Accepts the specific result object with keys: [successLFRequestItems,skippedArticleSysIds and failedArticleSysIds] and builds success message.
     *
     * @param result
     *
     * @return message(String)
     */
    getOutputMessage: function(response) {
        var msg = '';
        if (!response.hasOwnProperty('successLFRequestItems') || !response.hasOwnProperty('failedArticleCount') || !response.hasOwnProperty('skippedArticleCount')) {
            msg = 'Failed to request translations.';
        } else {
            var totalItemsSubmittedCount = response.successLFRequestItems.length + response.skippedArticleCount + response.failedArticleCount;
            if (response.successLFRequestItems.length &gt; 0) {
                msg += this._buildMessage(this.SUCCESS, response.successLFRequestItems, totalItemsSubmittedCount);
            }
            if (response.skippedArticleCount &gt; 0) {
                msg += this._buildMessage(this.SKIPPED, response.skippedArticleCount, totalItemsSubmittedCount);
            }
            if (response.failedArticleCount &gt; 0) {
                msg += this._buildMessage(this.FAILED, response.failedArticleCount, totalItemsSubmittedCount);
            }
        }
        return gs.getMessage("{0}", msg);
    },
    /*
     * Build the message based on the result type and resultArray.
     */
    _buildMessage: function(resultType, result, totalItemsSubmittedCount) {
        var msg = '',
            suffixString = '';
        switch (resultType) {
            case this.SUCCESS:
                var linkStr = result.length &gt; 1 ? 'translation requests' : 'translation request';
                var suffixStr = ' ' + (totalItemsSubmittedCount &gt; 1 ? 'created for the selected articles.' : 'created for the selected article.') + ' ';
                var message = result.length + ' &lt;a href="' + this.REQUEST_ITEM_LINK + result.toString() + '"&gt;' + linkStr + '&lt;/a&gt; ' + suffixStr;
                msg += message;
                break;
            case this.SKIPPED:
                suffixString = result != 1 ? ' requests were' : ' request was';
                msg += result + suffixString + ' skipped. ';
                break;
            default:
                suffixString = result != 1 ? ' requests were' : ' request was';
                msg += result + suffixString + ' failed. ';
                break;
        }
        return msg;
    },
    /**
     * Checks whether user can request translations using Localization framework
     *
     * @return {boolean}
     **/
    canRequestTranslation: function(internal_artifact_name) {
        var hasRole = (gs.hasRole('knowledge') &amp;&amp; gs.hasRole('localization_requestor')) || gs.hasRole('admin');
        var isEnabled = gs.getProperty('glide.knowman.translation.enable_lf_article_translation', 'false');
        if (hasRole &amp;&amp; isEnabled == 'true' &amp;&amp; new global.LFUtils().showUIAction(internal_artifact_name))
            return true;
        return false;
    },
    /**
     * returns Array of language objects.getContentType().  
     * Each language object is
     *  a language available in instance and considered as enabled if it is configured in "LF settings for the artifact configuration". otherwise disabled.
     *
     * Sample: [
     * {'label':'English', value:'en',sysId:'aer2312..','isDisabled':'true'},
     * {'label':'German', value:'de',sysId:'qe348..','isDisabled':'true'},
     * ...
     * ]
     */
    getInstanceLanguages: function(artifactInternalName) {
        var configuredLanguagesObj = this.lfSettingUtils.fetchConfiguredLanguages(artifactInternalName);
        var gr = this._getActiveSysLanguages();
        var languagesDetailsArray = [];
        while (gr.next()) {
            var language = {};
            language['label'] = gr.getValue('name');
            language['value'] = gr.getValue('id');
            language['sysId'] = gr.getUniqueValue();
            language['isDisabled'] = false;
            if (configuredLanguagesObj[language['sysId']])
                languagesDetailsArray.push(language);
        }
        this.lfUtils.sortArrayOfJsonBy(languagesDetailsArray, 'isDisabled');
        return languagesDetailsArray;
    },
    /*
     * return all active languages in the instance.
     */
    _getActiveSysLanguages: function() {
        var gr = new GlideRecord('sys_language');
        gr.addActiveQuery();
        gr.orderBy('name');
        gr.query();
        return gr;
    },
    type: 'KBLFRequestTranslationUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-18 06:52:40&lt;/sys_created_on&gt;
        &lt;sys_id&gt;163b70b1cd5a4910f877b77ab7c509b5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBLFRequestTranslationUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Advanced" source="com.snc.knowledge_advanced"&gt;e36e64192f201110d8a4d5f62799b6e9&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_163b70b1cd5a4910f877b77ab7c509b5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-28 17:35:19&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4937&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:08</sys_created_on>
        <sys_id>904c457a2f331110d8a4d5f62799b695</sys_id>
        <sys_name>KBLFRequestTranslationUtilSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_904c457a2f331110d8a4d5f62799b695</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
