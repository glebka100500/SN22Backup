<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3b2c57f27303330080b29ca9faf6a73a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MLSolutionUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.MLSolutionUtil
Designed for extending global.MLSolutionUtil Class&lt;/description&gt;
        &lt;name&gt;MLSolutionUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MLSolutionUtil = Class.create();
MLSolutionUtil.prototype = {
    initialize: function() {
    },

	/**
 	* getPredictions method is used to get ML predictions
 	* Input Parameters (injected into the method) are:
	* 'input' - input can be GlideRecord or array of key-value pairs
 	* 'solutionNames' - array of names of solution against which prediction needs to be run
 	* Output - {JSON}
	* Output format - 
	* { 
	*   solution_name :  {
	*		input_gr_sys_id1/record_number : [
	*						{
	*						  predictedValue : ,
	*						  predictedSysId : ,
	*						  confidence : ,
	*						  threshold : 
	*						},    
	*						{
	*						  predictedValue : "",
	*						  predictedSysId : "",
	*						  confidence : "",
	*						  threshold : ""
	*						}
	*			]
	*		}
	*	}
 	*/
    getPredictions: function(input, solutionNames, options) {
		var predResults = {};
		for (var index=0; index &lt; solutionNames.length; index++) {
			var solutionName = solutionNames[index];
			var mlSolution = sn_ml.MLSolutionFactory.getSolution(solutionName);
			predResults[solutionName] = JSON.parse(mlSolution.predict(input, options));
		}
		return predResults;
    },

    type: 'MLSolutionUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-08-07 23:00:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3b2c57f27303330080b29ca9faf6a73a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MLSolutionUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;fccdbc4b6d2220100acb70b3534330f2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3b2c57f27303330080b29ca9faf6a73a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-10-10 21:33:20&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1174&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:57</sys_created_on>
        <sys_id>ac7cc5ba2f331110d8a4d5f62799b66b</sys_id>
        <sys_name>MLSolutionUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_ac7cc5ba2f331110d8a4d5f62799b66b</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
