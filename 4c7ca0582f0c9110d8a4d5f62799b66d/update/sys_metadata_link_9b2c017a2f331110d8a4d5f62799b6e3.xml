<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>03ae1b1b0f8b0010e6d4fd820b767ed6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ActivityFacetDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Gets installed as part of "com.snc.activity_subscriptions" plugin Activity Subscriptions Framework.&amp;#13;
Contains all the methods to perform Activity Facet related operations.&lt;/description&gt;
        &lt;name&gt;ActivityFacetDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ActivityFacetDAO = Class.create();
ActivityFacetDAO.prototype = {
	initialize: function(activitySubContext) {
		this.ActivityContextDao = new ActivityContextDao(activitySubContext);
		this.cache = new ActivityContextCache();
	},

	getFacetsInfo: function(actContext, sysId, additionalParams) {
		var activityFacets = new GlideRecord(ActivityConstants.TABLE_ACTIVITY_FACET);
		if (additionalParams.facetIds)
			activityFacets.addQuery('sys_id', 'IN', additionalParams.facetIds);
		activityFacets.addQuery('subobject.activity_context', actContext);
		activityFacets.addActiveQuery();
		activityFacets.orderBy('order');
		activityFacets.addQuery('module', additionalParams.module);
		activityFacets.query();
		var activityFacetsInfo = [];
		var currentStaticInfo = {
			"currStaticGroup": '',
			"currStaticGroupLabel": ''
		};

		//If session cache is not available, building all the config related cache for first time, currenlty not doing changes for dynamic building of cache.
		//Reason: If entire cache is not built, for first dynamic child can build it's cahce, but the subsequent facets try to fech from existing cache based on only context id and not based on the facet id or activity type or source mapping which results in empty objects,it founds context id object but it won't have all the data.

		this.cache.buildCache(actContext, additionalParams.module);
		while (activityFacets.next()) {
			if (activityFacets.getValue('facet_type') == ActivityConstants.DYNAMIC_FACET) {
				currentStaticInfo.currStaticGroup = '';
				currentStaticInfo.currStaticGroupLabel = '';
				this._buildDynamicFacetInfo(actContext, activityFacetsInfo, activityFacets, additionalParams);
			} else
				this._buildStaticFacetInfo(actContext, activityFacetsInfo, activityFacets, currentStaticInfo, additionalParams);
		}
		return activityFacetsInfo;
	},

	_buildDynamicFacetInfo: function(actContext, activityFacetsInfo, activityFacets, additionalParams) {
		var facetInfo = {
			'name': activityFacets.name + '',
			'is_dynamic': true,
			'facets': [activityFacets.sys_id + ''],
			'icon': activityFacets.icon + '',
			'children': []
		};

		//fetch dynamic child info, if lazyLoad is true
		if (additionalParams.lazyLoad != 'true') {
			facetInfo.children = this._fetchActivitiesInfo(actContext, false, activityFacets, additionalParams);
			if (additionalParams.getActCount == 'true')
				facetInfo['activity_count'] = facetInfo.children.length;
		}

		activityFacetsInfo.push(facetInfo);
	},

	_buildStaticFacetInfo: function(actContext, activityFacetsInfo, activityFacets, currentStaticInfo, additionalParams) {
		var group = activityFacets.facet_group.getDisplayValue() + '';
		if (!currentStaticInfo.currStaticGroup || group != currentStaticInfo.currStaticGroupLabel) {
			currentStaticInfo.currStaticGroupLabel = group;
			currentStaticInfo.currStaticGroup = {
				"name": currentStaticInfo.currStaticGroupLabel,
				'is_dynamic': false,
				'facets': [],
				'children': []
			};
			if (additionalParams.lazyLoad != 'true' &amp;&amp; additionalParams.getActCount == 'true')
				currentStaticInfo.currStaticGroup['activity_count'] = 0;
			activityFacetsInfo.push(currentStaticInfo.currStaticGroup);
		}
		var facetInfo = {
			"title": activityFacets.name + '',
			'facet': activityFacets.sys_id + '',
			'icon': activityFacets.icon + '',
		};
		if (additionalParams.lazyLoad != 'true' &amp;&amp; additionalParams.getActCount == 'true') {
			var activityCount = this._fetchActivitiesInfo(actContext, true, activityFacets, additionalParams);
			facetInfo['activity_count'] = activityCount;
			currentStaticInfo.currStaticGroup['activity_count'] += activityCount;
		}
		if (!currentStaticInfo.currStaticGroup.name) {
			currentStaticInfo.currStaticGroup.name = facetInfo.title;
			currentStaticInfo.currStaticGroup['icon'] = facetInfo.icon;
		} else
			currentStaticInfo.currStaticGroup.children.push(facetInfo);
		currentStaticInfo.currStaticGroup.facets.push(facetInfo.facet);
	},

	_fetchActivitiesInfo: function(actContext, isStaticFacet, activityFacets, additionalParams) {
		var facetDataToFetchActivities;
		if (!isStaticFacet) {
			var fieldList = activityFacets.subobject_fields + '';
			facetDataToFetchActivities = {
				"titleField": activityFacets.title_field + '',
				"fieldList": (fieldList) ? fieldList.split(',') : [],
				"isStaticFacet": false
			};
		}
		else
			facetDataToFetchActivities = {
				"isStaticFacet": true
			};
		var subobject = activityFacets.subobject;
		if (subobject) subobject = subobject.subobject;
		if (subobject)
			facetDataToFetchActivities["subObjectTable"] = subobject.table_name + '';
		var actReqObj = {
			"contextId": actContext,
			"actualContextGr": this.contextGR,
			"facetIds": activityFacets.sys_id + '',
			"facetInfo": facetDataToFetchActivities,
			'startDate': additionalParams.startDate,
			'endDate': additionalParams.endDate,
			'module': additionalParams.module
		};
		return this.ActivityContextDao.getActivities(actReqObj);
	},

	getActivityContextInfo: function(actContext, sysId) {
		var activityContext = new GlideRecord(ActivityConstants.TABLE_ACTIVITY_CONTEXT);
		activityContext.addActiveQuery();
		activityContext.addQuery('sys_id', actContext);
		activityContext.addQuery('module.active', true);
		activityContext.query();
		if (activityContext.next()) {
			var contextTable = activityContext.context_table + '';
			var contextInfo = new GlideRecord(contextTable);
			contextInfo.addQuery('sys_id', sysId);
			//Do not run BRs, customer_contact has a query BR which is skipping inactive users.
			contextInfo.setWorkflow(false); 
			contextInfo.query();
			if (contextInfo.next()) {
				this.contextGR = contextInfo;
				return {
					'context_name': activityContext.name + '',
					'context_table': contextTable,
					'context_id': actContext,
					'module': activityContext.module + ''
				};
			}
			return;
		}
		return;
	},

	getActContextSubObjects: function(actContext) {
		var actContextSubObj = new GlideRecord(ActivityConstants.TABLE_M2M_CONTEXT_SUBOBJECT);
		actContextSubObj.addQuery('activity_context', actContext);
		actContextSubObj.query();
		var actContextSubObjList = [];
		while (actContextSubObj.next())
			actContextSubObjList.push(actContextSubObj.sys_id + '');
		return actContextSubObjList;
	},

	type: 'ActivityFacetDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-02-24 08:42:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;03ae1b1b0f8b0010e6d4fd820b767ed6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ActivityFacetDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Subscriptions and Activity Feed Framework" source="com.snc.activity_subscriptions"&gt;7427f20f2f400110d8a4d5f62799b6eb&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_03ae1b1b0f8b0010e6d4fd820b767ed6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-15 09:24:53&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6304&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:48</sys_created_on>
        <sys_id>9b2c017a2f331110d8a4d5f62799b6e3</sys_id>
        <sys_name>ActivityFacetDAO</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_9b2c017a2f331110d8a4d5f62799b6e3</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
