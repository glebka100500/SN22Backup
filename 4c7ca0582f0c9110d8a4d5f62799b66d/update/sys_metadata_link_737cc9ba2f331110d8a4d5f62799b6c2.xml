<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4513d3f607411010220b0a701ad30055</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUIntent&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utilties related to NLU Intent&lt;/description&gt;
        &lt;name&gt;NLUIntent&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUIntent = Class.create();

(function() {

    var constants = global.NLUConstants.constants;
    var tables = global.NLUConstants.tables;

    NLUIntent.getGRById = function(intentId) {
        var gr = new GlideRecord(tables.SYS_NLU_INTENT);
        if (gr.get(intentId)) return gr;

        return null;
    };

    NLUIntent.getIntentsGr = function(intentIds) {
        var intentGr = new GlideRecord(tables.SYS_NLU_INTENT);
        intentGr.addQuery('sys_id', intentIds);
        intentGr.query();

        return intentGr;
    };

    NLUIntent.getDataFromGR = function(intentRec) {
        var intents = [];

        while (intentRec.next()) {
            intents.push({
                id: intentRec.getValue('sys_id'),
                name: intentRec.getValue('name'),
                createdOnTimestamp: NLUHelper.toTimezoneAdjustedTimestamp(
                    new GlideDateTime(intentRec.getValue('sys_created_on'))),
                enabled: intentRec.getValue('enable') !== "0"
            });
        }
        return intents;
    };

    NLUIntent.forEachIntentEntityMap = function(intentIds, callback) {
        var ieGr = new GlideRecord(tables.M2M_SYS_NLU_INTENT_ENTITY);
        ieGr.addJoinQuery(tables.SYS_NLU_ENTITY, 'entity', 'sys_id');
        ieGr.addQuery('intent', 'IN', intentIds);
        ieGr.query();

        while (ieGr.next()) {
            var intentId = ieGr.getValue('intent');
            var relationship = ieGr.getValue('relationship');
            var entityGr = ieGr.entity.getRefRecord();
            callback(intentId, relationship, entityGr);
        }
    };

    NLUIntent.prototype = {

        type: 'NLUIntent',

        initialize: function(intentId) {
            this.intentId = intentId;
        },

        createIntentEntityMap: function(entityId, relationship, disableBr) {
            if (!entityId) return;
            var mapGr = new GlideRecord(tables.M2M_SYS_NLU_INTENT_ENTITY);
            mapGr.initialize();
            mapGr.setValue('entity', entityId);
            mapGr.setValue('intent', this.intentId);
            mapGr.setValue('relationship', relationship);
            if (disableBr) mapGr.setWorkflow(false);
            return mapGr.insert();
        },

        getEntities: function(filter) {
            var gr = new GlideRecord(tables.SYS_NLU_ENTITY);
            gr.addNullQuery('model');
            var joinQuery = gr.addJoinQuery(tables.M2M_SYS_NLU_INTENT_ENTITY, 'sys_id', 'entity');
            joinQuery.addCondition('intent', this.intentId);
            if (filter) gr.addEncodedQuery(filter);
            gr.query();

            return gr;
        },

        getUtterances: function(filter) {
            var gr = new GlideRecord(tables.SYS_NLU_UTTERANCE);
            gr.addQuery('intent', this.intentId);
            if (filter) gr.addEncodedQuery(filter);
            gr.query();

            return gr;
        },

        getIntentEntities: function(filter) {
            var gr = new GlideRecord(tables.M2M_SYS_NLU_INTENT_ENTITY);
            gr.addQuery('intent', this.intentId);
            if (filter) gr.addEncodedQuery(filter);
            gr.query();

            return gr;
        },

        deleteIntentEntities: function(filter) {
            var gr = new GlideRecord(tables.M2M_SYS_NLU_INTENT_ENTITY);
            gr.addQuery('intent', this.intentId);
            if (filter) gr.addEncodedQuery(filter);
            gr.deleteMultiple();
        },

        /**
         * Get all unique utterance IDs in a given list of utterance Ids when
         * compared to all the utterances in a given intentId
         * 
         * @param {String} intentId Intent ID whose utterances need to be
         * compared with the given utterances
         * @param {*} utterances A stringified array of objects with below format
         * {
         *  sysId // sys_id of the utterance
         *  text // deserialized text of the utterance
         * }
         */
        getUniqueUtteranceIds: function(data) {

            try {
                var utterances = JSON.parse(data);
                var targetUttrGr = this.getUtterances();
                var targetUttrTexts = [];
                var uniqueUttrIds = [];

                while (targetUttrGr.next()) {
                    targetUttrTexts.push(
                        NLUStudioTrainer.deserialiseUtterance(
                            targetUttrGr.getValue('utterance')
                        )
                    );
                }

                utterances.forEach(function(utterance) {
                    var uttrId = utterance.sysId;
                    var uttrText = utterance.text;

                    if (targetUttrTexts.indexOf(uttrText) &lt; 0) {
                        uniqueUttrIds.push(uttrId);
                    }
                });
            } catch (error) {
                gs.error('NLUIntent: Error while validating unique utterances ' + error);
                return null;
            }

            return uniqueUttrIds;
        }
    };

})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-06-01 06:59:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4513d3f607411010220b0a701ad30055&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUIntent&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4513d3f607411010220b0a701ad30055&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-03 17:14:38&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5049&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:11</sys_created_on>
        <sys_id>737cc9ba2f331110d8a4d5f62799b6c2</sys_id>
        <sys_name>NLUIntent</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_737cc9ba2f331110d8a4d5f62799b6c2</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
