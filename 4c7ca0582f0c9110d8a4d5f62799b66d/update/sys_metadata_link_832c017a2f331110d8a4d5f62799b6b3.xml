<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>01bd698877e23010f853528069106128</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFApprovalUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle approve &amp;amp; request changes in localization tasks. Customers are not expected to override these core functions &lt;/description&gt;
        &lt;name&gt;LFApprovalUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFApprovalUtils = Class.create();
LFApprovalUtils.prototype = {
    initialize: function(taskIdOrNumber, translatedItems, approvalTaskSysId) {
        this.taskUtils = new LFTaskUtils(taskIdOrNumber);
        this.translatedItems = translatedItems;
        this.approvalTaskSysId = approvalTaskSysId;
        this.utils = new LFUtils();
    },

    approveTranslations: function() {
        this._updateApproval(true);
    },

    requestChanges: function(workNotes) {
        this._updateApproval(false, workNotes);
    },

    showVerifyTranslations: function(sourceTableName) {
        if (this.taskUtils.hasValidRecord()) {
            if (sourceTableName == this.taskUtils.tableName) {
                return !this.taskUtils.hasBulkTranslations() &amp;&amp; this.taskUtils.isUnderReview();
            } else if (sourceTableName == "sysapproval_approver") {
                return this.taskUtils.isUnderReview();
            }
        }
        return false;
    },

    _updateApproval: function(isTranslationsApproved, workNotes) {
        if (this.taskUtils.hasValidRecord()) {
            if (this.taskUtils.hasBulkTranslations()) {
                var lfInsights = new LFGenerateLocalizationInsights();
                var lRITMNumbers = Object.keys(this.translatedItems);
                for (var idx = 0; idx &lt; lRITMNumbers.length; idx++) {
                    var requestedItemUtils = new LFRequestedItemUtils(lRITMNumbers[idx]);
                    var documentContent = requestedItemUtils.getDocumentContent();
                    documentContent["content"] = this.translatedItems[lRITMNumbers[idx]].documentContent.content;
                    requestedItemUtils.setStatus(lfInsights.getTranslationStatus(documentContent));
                    requestedItemUtils.setDocumentContent(documentContent);
                    requestedItemUtils.setError(false);
                    requestedItemUtils.setAdditionalInfo({});
                    requestedItemUtils.update();
                }
                if (isTranslationsApproved) {
                    this._updateApprovalTaskState("approved");
                } else {
                    this.taskUtils.addWorkNotes(workNotes);
                    this._updateApprovalTaskState("rejected");
                }
            } else {
                documentContent = this.taskUtils.getDocumentContent();
                var translatedItem = this.translatedItems[this.taskUtils.getTaskNumber()];
                if (translatedItem &amp;&amp; translatedItem.documentContent &amp;&amp; translatedItem.documentContent.content) {
                    documentContent['content'] = translatedItem.documentContent.content;
                    this.taskUtils.setDocumentContent(documentContent);
                    var additionalInfo = this.taskUtils.getAdditionalInfo();
                    additionalInfo["errorDetails"] = {
                        "error": false
                    };
                    this.taskUtils.setAdditionalInfo(additionalInfo);
                }
                if (isTranslationsApproved) {
                    this.taskUtils.moveToTranslationApproved();
                } else {
                    this.taskUtils.addWorkNotes(workNotes);
                    this.taskUtils.assignToFulfillers();
                    this.taskUtils.moveToInProgress();
                }
            }
            this.taskUtils.update();
        }
    },

    _updateApprovalTaskState: function(newState) {
        var gr = new GlideRecord("sysapproval_approver");
        gr.addQuery("sys_id", this.approvalTaskSysId);
        gr.query();
        if (gr.next()) {
            gr.state = newState;
            gr.update();
        }
    },

    type: 'LFApprovalUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-07 14:18:54&lt;/sys_created_on&gt;
        &lt;sys_id&gt;01bd698877e23010f853528069106128&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFApprovalUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;be2124c92f241110d8a4d5f62799b640&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_01bd698877e23010f853528069106128&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-16 11:15:28&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3721&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:46</sys_created_on>
        <sys_id>832c017a2f331110d8a4d5f62799b6b3</sys_id>
        <sys_name>LFApprovalUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_832c017a2f331110d8a4d5f62799b6b3</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
