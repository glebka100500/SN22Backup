<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>672e155c23d323001488dc1756bf65ce</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TaskOfferingSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TaskOfferingSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TaskOfferingSNC = Class.create();
TaskOfferingSNC.prototype = {
    initialize: function() {
    },

	canPopulateServiceOfferings: function(table) {
		if (!table)
			return false;

		return (gs.getProperty("com.snc." + table + ".populate_service_offering", "false") + "" === "true");
	},
	
	removeServiceOffering: function(taskSysId) {
		if (!taskSysId)
			return;

		var m2m = new GlideRecord('task_service_offering');
		m2m.addQuery('task', taskSysId);
		m2m.addQuery('manually_added', false);
		m2m.deleteMultiple();
	},

	addServiceOffering: function(taskSysId, services) {
		if (!taskSysId)
			return;

		var manualAddedOfferings = new TaskUtils().getManuallyAddedRecords(taskSysId, 'task_service_offering', 'service_offering');
		var offerings = this.getOfferings(services);

		if (manualAddedOfferings.length &gt; 0) {
			offerings = offerings.filter( function( el ) {
				return manualAddedOfferings.indexOf( el ) === -1;
			});
		}

		var m2m = new GlideRecord('task_service_offering');
		for (var i = 0; i &lt; offerings.length; i++) {
			m2m.initialize();
			m2m.setValue('task', taskSysId);
			m2m.setValue('service_offering', offerings[i]);
			m2m.setValue('manually_added', false);
			m2m.insert();
		}
	},

	getOfferings: function(services) {
		var offeringGr = new GlideRecord('service_offering');
		offeringGr.addQuery('parent', "IN", services);
		offeringGr.query();

		var offeringArr = [];
		while (offeringGr.next())
			offeringArr.push(offeringGr.getUniqueValue());

      return offeringArr;
	},

    type: 'TaskOfferingSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-01-25 09:30:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;672e155c23d323001488dc1756bf65ce&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TaskOfferingSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Management Basics" source="com.snc.service"&gt;b89005876d2620100acb70b353433001&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_672e155c23d323001488dc1756bf65ce&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-09-17 10:52:17&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1548&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:06</sys_created_on>
        <sys_id>95bc0dfa2f331110d8a4d5f62799b69c</sys_id>
        <sys_name>TaskOfferingSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_95bc0dfa2f331110d8a4d5f62799b69c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
