<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4eac27b2eb0322007c94efc9a206fe42</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.IdentificationEngineOutputUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This is a utility class that provides helper APIs for parsing output payload retured by Identification Engine.&lt;/description&gt;
        &lt;name&gt;IdentificationEngineOutputUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var IdentificationEngineOutputUtil = Class.create();
IdentificationEngineOutputUtil.prototype = {
    initialize: function(output) {
		this.json = new JSON();
		this.result = this.json.decode(output);
		this.Unknown = 'Unknown';
    },

	// Get all sys_ids of items returned in output payload
	getAllItems: function() {
		var sysIds = [];
        if (!JSUtil.nil(this.result)) 
			sysIds = this.getSysIds(this.result.items);
    return sysIds;
	},
	
	// Get all sys_ids of relations returned in output payload
	getAllRelations: function() {
		var sysIds = [];
        if (!JSUtil.nil(this.result)) 
			sysIds = this.getSysIds(this.result.relations);
    return sysIds;
	},

	// Get all errors of items returned in output payload
	getItemErrors: function() {
		var errors = [];
        if (!JSUtil.nil(this.result)) 
			errors = this.getErrors(this.result.items, -1);
    return errors;
	},
	
	// Get errors of specific item returned in output payload
	getErrorsForItem: function(index) {
		var errors = [];
        if (!JSUtil.nil(this.result)) 
			errors = this.getErrors(this.result.items, index);
    return errors;
	},
	
	// Get all errors of relations returned in output payload
	getRelationErrors: function() {
		var errors = [];
        if (!JSUtil.nil(this.result)) 
			errors = this.getErrors(this.result.relations, -1);
    return errors;
	},
	
	// Get errors of specific relation returned in output payload
	getErrorsForRelation: function(index) {
		var errors = [];
        if (!JSUtil.nil(this.result)) 
			errors = this.getErrors(this.result.relations, index);
    return errors;
	},
	
	// Get related sys_ids returned in output payload
	getRelatedSysIds: function() {
		var sysIds = [];
        if (!JSUtil.nil(this.result) &amp;&amp; !JSUtil.nil(this.result.items)) {
			for (var i = 0; i &lt; this.result.items.length; i++) {
				var item = this.result.items[i];
				if (!JSUtil.nil(item.relatedSysIds)) {
 					for (var j = 0; j &lt; item.relatedSysIds.length; j++) {
						sysIds.push(item.relatedSysIds[j]);
					}
				}
			}
		}
    return sysIds;
	},
	
	// Get all duplicate indices returned in output payload
	getDuplicateIndices: function() {
		var indices = [];
        if (!JSUtil.nil(this.result) &amp;&amp; !JSUtil.nil(this.result.items)) {
			for (var i = 0; i &lt; this.result.items.length; i++) {
				var item = this.result.items[i];
				if (!JSUtil.nil(item.duplicateIndices)) {
 					for (var j = 0; j &lt; item.duplicateIndices.length; j++) {
						indices.push(item.duplicateIndices[j]);
					}
				}
			}
		}
    return new ArrayUtil().unique(indices);
	},
	
	// Get sys_ids of CI's that has a relationship with given sys_id as mentioned in output payload
	getCIsWithRelations: function(sysId) {
		var sysIds = [];
        var gr = new GlideRecord('cmdb_rel_ci');
		var relSysIds = this.getAllRelations();
		for (var i = 0; i &lt; relSysIds.length; i++) {
			var relSysId = relSysIds[i];
			if (gr.get(relSysId)) {
				if (gr.getValue('parent') === sysId)
					sysIds.push(gr.getValue('child'));
				else if (gr.getValue('child') === sysId)
					sysIds.push(gr.getValue('parent'));
			}
		}

    return new ArrayUtil().unique(sysIds);
	},
	
	getSysIds: function(list) {
		var sysIds = [];
        if (!JSUtil.nil(list)) 
		{
		    for (var i = 0; i &lt; list.length; i++) {
            var item = list[i];
            if (item.sysId != this.Unknown) 
                sysIds.push(item.sysId);
		    }
		}
    return sysIds;
	},
	
	getErrors: function(list, index) {
		var errors = [];
        if (!JSUtil.nil(list)) 
		{
			if (index &gt;= 0 &amp;&amp; index &lt; list.length) {
				var item = list[index];
				return this.getFormatedErrors(item);
			}
			else {
				for (var i = 0; i &lt; list.length; i++) {
					var itemOne = list[i];
					var itemOneErrs = this.getFormatedErrors(itemOne);
					for (var j = 0; j &lt; itemOneErrs.length; j++) {
						errors.push(itemOneErrs[j]);
					}
				}
			}
				
		}
    return errors;
	},
	
	getFormatedErrors: function(item) {
		var errors = [];
		if (!JSUtil.nil(item.errors)) {
            item.errors.forEach(function(error) {
				errors.push(error.error + ': ' + error.message);
            });
		}
		return errors;
	},
	
    type: 'IdentificationEngineOutputUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-11-16 19:20:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4eac27b2eb0322007c94efc9a206fe42&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;IdentificationEngineOutputUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;c60efc0f6d2220100acb70b3534330c0&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4eac27b2eb0322007c94efc9a206fe42&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-11-16 23:48:23&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4198&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:24</sys_created_on>
        <sys_id>4b8c4dba2f331110d8a4d5f62799b6f5</sys_id>
        <sys_name>IdentificationEngineOutputUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_4b8c4dba2f331110d8a4d5f62799b6f5</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
