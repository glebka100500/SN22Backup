<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>60689e405be500100023fbbeb681c745</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ITOMVisibilityLicenseCounterFactory&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ITOMVisibilityLicenseCounterFactory&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ITOMVisibilityLicenseCounterFactory = Class.create();
ITOMVisibilityLicenseCounterFactory.prototype = {
    initialize: function() {
    },

	getCounter: function() {
		var smPluginActive = pm.isActive('com.snc.service-mapping');
		var svcLicensingUtil = SNC.LicensingUtil;
		var licenseUtil = new sn_itom_license.ITOMLicensingUtils();
        var isOTOMPresent = (licenseUtil.isVisibilityPresent('otm') || licenseUtil.isDiscoveryPresent('otm'));
		if (smPluginActive &amp;&amp; svcLicensingUtil &amp;&amp; this._countLicensableServices()) {
			try {
				return isOTOMPresent ?  new ITOMVisibilityLicenseCounterWithServicesV2() : new ITOMVisibilityLicenseCounterWithServices();
			} catch (e) {
				gs.warn('Failed to initialize ITOMVisibilityLicenseCounterWithServices Script Include: ' + e);
			}
		}

        return isOTOMPresent ? new ITOMVisibilityLicenseCounterV2() : new ITOMVisibilityLicenseCounter();
       
    },

	_countLicensableServices: function() {
		var licensableServiceTypes = gs.getProperty('itom.visibility.licensable_service_types', '');
		var ga = new GlideAggregate('cmdb_ci_service_discovered');
		var services = 0;
		if (ga.isValid()) {
			ga.addAggregate('COUNT');
			ga.addQuery('type', 'IN', licensableServiceTypes);
			ga.query();
			ga.next();
			services = parseInt(ga.getAggregate('COUNT'));
		}

		return services;
	},

    type: 'ITOMVisibilityLicenseCounterFactory'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-01 11:42:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;60689e405be500100023fbbeb681c745&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ITOMVisibilityLicenseCounterFactory&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Automation" source="com.snc.core.automation"&gt;ee2289476d6620100acb70b3534330ff&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_60689e405be500100023fbbeb681c745&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;nitinlaxmanbha.gupta&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-28 17:42:29&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1393&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:55</sys_created_on>
        <sys_id>26ac09fa2f331110d8a4d5f62799b606</sys_id>
        <sys_name>ITOMVisibilityLicenseCounterFactory</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_26ac09fa2f331110d8a4d5f62799b606</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
