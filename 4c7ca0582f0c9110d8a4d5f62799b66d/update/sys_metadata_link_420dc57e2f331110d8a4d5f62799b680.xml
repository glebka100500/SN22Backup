<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8efa59929f30010054005f29468ba355</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdEnrollQuestionsProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Extension handling questions and answers for verification&lt;/description&gt;
        &lt;name&gt;PwdEnrollQuestionsProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdEnrollQuestionsProcessor = Class.create();
/**
 * Handles questions and answers for verification.
 */
PwdEnrollQuestionsProcessor.prototype = {
    category: 'password_reset.extension.enrollment_form_processor', // DO NOT REMOVE THIS LINE!
    
    /**
     * Init method.
     */
    initialize: function() {
    },
    
    /**********
    * Process the enrollment form, and returns a PwdExtensionScriptResponse object, which contains: result, message and value 
    * 
    * @param params.userId                            The sys-id of the user trying to enroll (table: sys_user)
    * @param params.verificationId                    The sys-id of the verification to be enrolled into (table: pwd_verification)
    * @param params.enrollmentId                      The sys-id of this enrollment process.
	* 
    * @param params.getFormParameter(&lt;form element&gt;)  Any of the form elements
	* 
    * @return a map with the attributes: 'result' and 'message' for example: {result: 'success', message : 'bla bla'}
    **********/
    process: function(params) {
        var enrollmentId = params.enrollmentId;
        var verificationId = params.verificationId;

        var mgr = new SNC.PwdQAManager(); 
        var userId = gs.getUserID();
            
        // number of questions and answers to enroll.
        var numEnroll = mgr.getRequiredQuestionCountByVerificationId(verificationId); 
		numEnroll = parseInt(numEnroll);
        

        var answerIdsToKeep = [];
        
        //let's get the stored answer Ids before insert/update operation.
        var storedAnswerIds = mgr.getStoredAnswerIdsByVerificationId(userId,verificationId);
		
		// if answer has not been changed (which means not dirty), do not update.
		var unChangedAnswerIds = [];
		var newAnswers = [];
        
		var response = {result : 'failure', message : 'Error'};
		
        try {
            // this is normal case.
            for(var i=0; i&lt;numEnroll;i++){
                var index = i+1;
				
                var isChanged = params.getFormParameter("changed_"+index);
                var answerId = params.getFormParameter("stored_sys_id_"+index);  // sys_id
                
				if(answerId)
                    answerIdsToKeep[i] =answerId;
				
                if(isChanged !='true') {
					unChangedAnswerIds.push(answerId);
					continue;
				}
            
                // question: name
                var question = params.getFormParameter("question_"+index);
				
                // answer: value.
                var answer = params.getFormParameter("answer_"+index);
            
                if(answer)
                    answer = answer.trim();
				
				newAnswers.push({answerId: answerId, question: question, answer: answer});
			}
			
			if (!this._validateAnswerUniqueness(mgr, unChangedAnswerIds, newAnswers))
				throw {message: gs.getMessage("All answers must be unique")};
			
			newAnswers.forEach(function(newAnswer) {
			    mgr.insertOrUpdateAnswer(enrollmentId, newAnswer.answerId, newAnswer.question, newAnswer.answer);
			});

            //if the # of stored answers is more than numEnroll, delete the extra answers if found.
			//This can happen when reducing numEnroll after users enrolled.
			//This will be a very rare case, but we have to support the use case.
            if(numEnroll &lt; storedAnswerIds.size()){
				mgr.ensureNumEnroll(userId, verificationId, answerIdsToKeep);
            }
            response.result  = 'success';
            response.message = gs.getMessage('Completed Successfully');
        }
        catch(err){
            response.result  = 'failure';
            response.message = err.message;  // does not need translation
        }
		
		return response;
    },
	
	// Validate new answers against old stored answers. 
	// No need to validate new answers to each other as they are already handled on the client side.
	_validateAnswerUniqueness: function(mgr, unChangedAnswerIds, newAnswers) {
		for (var i = 0; i &lt; newAnswers.length; i++) {
			for (var j = 0; j &lt; unChangedAnswerIds.length; j++) {
				// The last parameter is set to false as answers are in plain text format
				if (mgr.compareAnswers(unChangedAnswerIds[j], newAnswers[i].answer, false))
					return false;
			}
		}
		return true;
	},

    type: 'PwdEnrollQuestionsProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-04-19 21:55:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8efa59929f30010054005f29468ba355&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;61&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdEnrollQuestionsProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;a54385836da620100acb70b3534330a5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8efa59929f30010054005f29468ba355&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-09-28 20:09:27&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4316&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:31</sys_created_on>
        <sys_id>420dc57e2f331110d8a4d5f62799b680</sys_id>
        <sys_name>PwdEnrollQuestionsProcessor</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_420dc57e2f331110d8a4d5f62799b680</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
