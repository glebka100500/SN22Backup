<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4c7d460eeb000100d2d5abf11206fe39</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MobileUIPolicyBuilder&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;MobileUIPolicyBuilder&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MobileUIPolicyBuilder = Class.create();
MobileUIPolicyBuilder.prototype = {
    initialize: function() {
    },
	
	/**
	 * Return UI Policy for given table and view
	 */
	getUIPolicy: function(tableName, viewName) {
        var builder = new UIPolicyBuilder();
		builder.setUIScriptType(1); // set compatibility to smartphone
        
        // iterate the sys_ui_policy for this table
        var gr = new GlideRecord('sys_ui_policy');
        gr.addQuery('table', tableName);
        gr.addNullQuery('model_table');
        gr.addActiveQuery();
        gr.addDomainQuery(null);
        gr.addQuery('global', 'true').addOrCondition('view', viewName);
        gr.orderBy('order');
        gr.query();
        builder.process(gr);
        
        // include any inherited policies as well
        var tables = GlideDBObjectManager.getActionTables(tableName);
        // don't mess with the static table list directly, make a copy of it for our purposes
        var tableList = new Packages.java.util.ArrayList(tables);
        tableList.remove(0);
        if (tableList.size() != 0) {
            gr.initialize();
            gr.addQuery('table', tableList);
            gr.addNullQuery('model_table');
            gr.addActiveQuery();
            gr.addQuery('global', 'true').addOrCondition('view', viewName);
            gr.addQuery('inherit', true);
            gr.orderBy('order');
            gr.query();
            builder.process(gr);
        }
    
        var tableListStr = GlideStringUtil.join(tables);
        gr = new GlideRecord('sys_data_policy2');
        if (gr.isValid()){
            gr.addQuery('model_table', tableName);
            gr.addQuery('enforce_ui', '=', 'true');
            gr.addDomainQuery(null);
            gr.addActiveQuery();
            gr.query();
            builder.process(gr, true);        

            gr.initialize();
            gr.addQuery('model_table', 'IN', tableListStr);
            gr.addQuery('enforce_ui', '=', 'true'); 
            gr.addActiveQuery();
            gr.query();
            builder.process(gr, true);
        }

        // TODO: This is probably where we should handle workflow policies that involve model_id

        // handle javascript: values
        builder.updateValues();
        //builder.toStringWithoutScripts();
        return this.mergeScriptsWithPolicies(builder.getFieldPolicies(), builder.getScripts());
    },
	
	/**
	 * At this point, the policies are in one map, and the scripts are in another
	 * 
	 * This function will merge them into the script_true and script_false properties of each
	 */
	mergeScriptsWithPolicies: function(policies, scripts) {
		
		// loop through each policy
		for (var i = 0; i &lt; policies.length; i++) {
			var policy = policies[i];

			// go through the script_true and script_false fields
			var scriptTypes = ['script_true', 'script_false'];
			for (var j = 0; j &lt; scriptTypes.length; j++) {
				var scriptName = policy[ scriptTypes[j] ];

				// if there is no script then continue
				if (!scriptName)
					continue;
				
				var s = {
					name: scriptName,
					script: scripts[scriptName]
				};
				
				policy[ scriptTypes[j] ] = s;
			}
		}
		
		return {
			policy: policies
		};
	},
	
    type: 'MobileUIPolicyBuilder'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-03-13 00:11:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4c7d460eeb000100d2d5abf11206fe39&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MobileUIPolicyBuilder&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile UI" source="com.glide.ui.m"&gt;ec4d7c476d2220100acb70b3534330f4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4c7d460eeb000100d2d5abf11206fe39&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-02-05 01:12:10&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3257&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:21</sys_created_on>
        <sys_id>968c4dba2f331110d8a4d5f62799b699</sys_id>
        <sys_name>MobileUIPolicyBuilder</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_968c4dba2f331110d8a4d5f62799b699</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
