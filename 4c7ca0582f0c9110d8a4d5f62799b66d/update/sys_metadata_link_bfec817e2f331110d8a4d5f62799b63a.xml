<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>855478b753111010bca8ddeeff7b12c8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AisChildTableChoiceUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AisChildTableChoiceUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AisChildTableChoiceUtil = Class.create();
AisChildTableChoiceUtil.prototype = {
    initialize: function() {
    },

	process: function() {
		var result = [];

		if (current &amp;&amp; current.datasource &amp;&amp; current.datasource.source &amp;&amp; new sn_ais.AisUtil().isTableIndexable(current.datasource.source)) {
			var datasourceTable = current.datasource.source;
			var childTables = [];
			var dbManager = GlideDBObjectManager.get();
			// get all child tables
			var list = dbManager.getTableExtensions(current.datasource.source);
			for (var i = 0; i &lt; list.size(); i++)
				childTables.push(list.get(i));
			
			// get child tables belong to other datasources
			var tablesToBeRemoved = {};
			var grDatasource = new GlideRecord('ais_datasource');
			grDatasource.addQuery('source', '!=', datasourceTable);
			grDatasource.query();
			while (grDatasource.next()) {
				var curSource = grDatasource.getValue('source');
				if (dbManager.isInstanceOf(curSource, datasourceTable)) {
					var extensions = dbManager.getAllExtensions(curSource);
					for (var j = 0; j &lt; extensions.size(); j++)
						tablesToBeRemoved[extensions.get(j)] = true;
				}
			}
			
			for (var k = 0; k &lt; childTables.length; k++) {
				if (!(childTables[k] in tablesToBeRemoved))
					result.push(childTables[k]);
			}
		}

		return result;
	},

    type: 'AisChildTableChoiceUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-06-16 06:01:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;855478b753111010bca8ddeeff7b12c8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AisChildTableChoiceUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="AI Search" source="com.glide.ais"&gt;accdbc4b6d2220100acb70b353433053&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_855478b753111010bca8ddeeff7b12c8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-19 23:36:06&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1351&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:06</sys_created_on>
        <sys_id>bfec817e2f331110d8a4d5f62799b63a</sys_id>
        <sys_name>AisChildTableChoiceUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_bfec817e2f331110d8a4d5f62799b63a</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
