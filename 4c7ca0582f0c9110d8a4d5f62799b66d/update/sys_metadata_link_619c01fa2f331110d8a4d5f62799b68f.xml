<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>55112d03eb30310007e48c1cf106fe23</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VTBTaskSecurity&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Task security checker for Visual Task Boards.  Can be used to determine if a user should have access to manipulate a vtb_task record, based on whether the user has write access to a card that links to it.&lt;/description&gt;
        &lt;name&gt;VTBTaskSecurity&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VTBTaskSecurity = (function() {
	function checkAccess(accessCheckFnName) {
		return function(taskSysId) {

			if(!taskSysId || taskSysId == '' || current.isNewRecord()) {
				return true;
			}

			// Currently, vtb_task.* ACL all lead to the same board member check
			// With that in mind, just cache the result for all accessCheck functions based
			// on task.sys_id
			var gc = GlideController,
				hash = [taskSysId].join(':');

			if(gc.exists(hash)) {
				return !!(gc.getGlobal(hash));
			}

			var gr = new GlideRecord('vtb_card');
			var accessCheckResult = false;
			gr.addQuery('task', taskSysId);
			gr.query();

			// Card does not exist yet, permit access if user is owner.
            if (gr.getRowCount() === 0) {
				if (current.getTableName() == 'vtb_task') {
					accessCheckResult = current.owner == gs.getUserID();
				} else {
					accessCheckResult = true;
				}
			}

            while (gr.next()) {
                accessCheckResult = gr[accessCheckFnName]();
                if (accessCheckResult) {
                    break;
                }
            }

            gc.putGlobal(hash, accessCheckResult);
            return accessCheckResult;
		};
	}

	return {
		canWrite  : checkAccess('canWrite'),
		canRead   : checkAccess('canRead'),
		canDelete : checkAccess('canDelete'),
		canCreate : checkAccess('canCreate')
	};
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-05-22 17:41:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;55112d03eb30310007e48c1cf106fe23&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VTBTaskSecurity&lt;/sys_name&gt;
        &lt;sys_package display_value="Visual Task Boards" source="com.glide.ui.vtb"&gt;a16db0c76d2220100acb70b3534330b4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_55112d03eb30310007e48c1cf106fe23&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-12-22 18:18:07&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1364&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:35</sys_created_on>
        <sys_id>619c01fa2f331110d8a4d5f62799b68f</sys_id>
        <sys_name>VTBTaskSecurity</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_619c01fa2f331110d8a4d5f62799b68f</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
