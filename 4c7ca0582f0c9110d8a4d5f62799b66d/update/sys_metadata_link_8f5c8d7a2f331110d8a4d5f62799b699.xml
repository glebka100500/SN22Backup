<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2b394b925333020048ae0f0c36dc3424</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RESTVariableBusinessRuleChecker&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Checks if any associated business rules have all of the REST variables configured.&lt;/description&gt;
        &lt;name&gt;RESTVariableBusinessRuleChecker&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RESTVariableBusinessRuleChecker = Class.create();
RESTVariableBusinessRuleChecker.prototype = {
	businessRuleDisplayCount: 3,
	
    initialize: function(businessRuleDisplayCount) {
		if (businessRuleDisplayCount != undefined &amp;&amp; businessRuleDisplayCount &gt; 0)
			this.businessRuleDisplayCount = businessRuleDisplayCount;
    },

	check: function(grMessage, restMethod) {				
		this._checkAssociatedBusinessRules(grMessage, restMethod);
	},

	_checkAssociatedBusinessRules: function(grMessage, restMethod) {		
		// Get all available Http methods for this rest message		
		grMethod = new GlideRecord('sys_rest_message_fn');
		grMethod.addQuery('rest_message', grMessage.sys_id);
				
		if (restMethod != undefined)
			grMethod.addQuery('function_name', restMethod);
			
		grMethod.query();
				
		while (grMethod.next()) {
			// Get all rest variables for this rest method
			var restClient = new sn_ws.RESTMessageV2(grMessage.name, grMethod.function_name);
			var restVariables = restClient.getVariables();			

			// Get any business rules that are attached to this rest message &amp; method
			var grBusinessRule = new GlideRecord('sys_script');	
			grBusinessRule.addQuery('rest_service', grMessage.sys_id);
			grBusinessRule.addQuery('rest_method', grMethod.sys_id);
			grBusinessRule.query();

			// Evaluate each business rule to see if it contains all of the rest variables
			var exceptionList = [];
			var arrayUtil = new ArrayUtil();
			
			while (grBusinessRule.next()) {				
				var operators = [ 'EQUALTO', 'SAMEAS' ];
				var brVariableNames = [];			
				var brVariables = grBusinessRule.rest_variables.split('^');
				
				// Parse business rule variable names
				for(var i = 0; i &lt; brVariables.length; i++ ) {
					var brv = brVariables[i];

					for (var j = 0; j &lt; operators.length; j++) {
						var opIndex = brv.indexOf(operators[j]);

						if (opIndex == -1)
							continue;

						brVariableNames.push(brv.substring(0, opIndex));
					}
				}
				
				for (var k = 0; k &lt; restVariables.length; k++) {
					if (!arrayUtil.contains(brVariableNames, restVariables[k])) {
						exceptionList.push({ sys_id: grBusinessRule.getValue('sys_id'), name: grBusinessRule.getValue('name') });
						break;
					}
				}				
			}

			// If needed, display any exceptions found
			var businessRuleCount = grBusinessRule.getRowCount();
			if (exceptionList.length &gt; 0) {
				var exceptionMessage = '';			
				
				for (var l = 0; l &lt; exceptionList.length; l++) {
					exceptionMessage += (exceptionMessage != '' ? ', ' : '');
					
					// Only display the specified number of business rules
					if (l &gt;= this.businessRuleDisplayCount) {
						exceptionMessage += '(' 
										 + (businessRuleCount - this.businessRuleDisplayCount)
 										 + ' ' + gs.getMessage('more') + ')';
						break;
					}
					
					exceptionMessage += '&lt;a href="sys_script.do?sys_id=' 
									 + exceptionList[l].sys_id + '"&gt;' 
									 + exceptionList[l].name
									 + '&lt;/a&gt;';			
				}
				
				gs.addInfoMessage(gs.getMessage('RESTVariableBusinessRuleChecker.UnmatchedBusinessRules', 
												 [grMethod.function_name, grMessage.name])
								   + ' ' + exceptionMessage);
			}	
		}		
	},
	
    type: 'RESTVariableBusinessRuleChecker'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;dave.edquilang&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-11-20 19:14:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2b394b925333020048ae0f0c36dc3424&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RESTVariableBusinessRuleChecker&lt;/sys_name&gt;
        &lt;sys_package display_value="Web Service Consumer" source="com.glide.web_service_consumer"&gt;c8dcb8836d2220100acb70b35343301b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2b394b925333020048ae0f0c36dc3424&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;dave.edquilang&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2015-11-25 00:13:32&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3237&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:35</sys_created_on>
        <sys_id>8f5c8d7a2f331110d8a4d5f62799b699</sys_id>
        <sys_name>RESTVariableBusinessRuleChecker</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_8f5c8d7a2f331110d8a4d5f62799b699</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
