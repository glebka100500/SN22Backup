<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6c76e846c3131200bde4beae82d3ae7c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.InteractiveFilterDefaults&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Utility to handle interactive filter defaults.&lt;/description&gt;
        &lt;name&gt;InteractiveFilterDefaults&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InteractiveFilterDefaults = Class.create();
InteractiveFilterDefaults.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    checkCanvasAuthorization: function() {
        var dashboardId = this.getParameter('sysparm_dashboard_id');
        var authFlag = gs.getSession().getClientData(dashboardId);
        if (authFlag == true || authFlag == 'true')
            return true;

        this.setError('User is not authorised to perform this operation');
        return false;
    },
    setDefaultValue: function(canvasSysId, defaultValue) {
        if (!this.checkCanvasAuthorization())
            return;

        var userId = gs.getUserID();
        var grCanvasPreferences = new GlideRecord('sys_canvas_preferences');
        grCanvasPreferences.addQuery('canvas_page', canvasSysId);
        grCanvasPreferences.addQuery('user', userId);
        grCanvasPreferences.addQuery('widget_id', defaultValue.id);
        grCanvasPreferences.addQuery('name', defaultValue.name);
        grCanvasPreferences.query();

        if (grCanvasPreferences.hasNext()) {
            while (grCanvasPreferences.next()) {
                grCanvasPreferences.canvas_page = canvasSysId;
                grCanvasPreferences.user = userId;
                grCanvasPreferences.widget_id = defaultValue.id;
                grCanvasPreferences.name = defaultValue.name;
                grCanvasPreferences.value = JSON.stringify(defaultValue.filter);
                grCanvasPreferences.update();
            }
        } else {
            grCanvasPreferences.initialize();
            grCanvasPreferences.canvas_page = canvasSysId;
            grCanvasPreferences.user = userId;
            grCanvasPreferences.widget_id = defaultValue.id;
            grCanvasPreferences.name = defaultValue.name;
            grCanvasPreferences.value = JSON.stringify(defaultValue.filter);
            grCanvasPreferences.insert();
        }
        return {
            status: "ok"
        };

    },
    removeDefaultValue: function(canvasSysId, widgetId) {
        if (!this.checkCanvasAuthorization())
            return;

        var userId = gs.getUserID();
        var grCanvasPreferences = new GlideRecord('sys_canvas_preferences');
        grCanvasPreferences.addQuery('canvas_page', canvasSysId);
        grCanvasPreferences.addQuery('user', userId);
        grCanvasPreferences.addQuery('widget_id', widgetId);
        grCanvasPreferences.addQuery('name', "default_value");
        grCanvasPreferences.query();
        grCanvasPreferences.next();
        grCanvasPreferences.deleteRecord();
        return {
            status: "ok"
        };

    },
    removeAllDefaultValue: function(canvasSysId) {
        if (!this.checkCanvasAuthorization())
            return;

        var userId = gs.getUserID();
        var grCanvasPreferences = new GlideRecord('sys_canvas_preferences');
        grCanvasPreferences.addQuery('canvas_page', canvasSysId);
        grCanvasPreferences.addQuery('user', userId);
        grCanvasPreferences.addQuery('name', "default_value");
        grCanvasPreferences.deleteMultiple();
        return {
            status: "ok"
        };

    },
    saveDefaultValue: function() {
        var sysId = this.getParameter('sysparm_canvas_id');
        var defaultFilter = JSON.parse(this.getParameter('sysparm_default_filter'));

        this.sendUsage([defaultFilter], sysId, 'filter');

        return this.setDefaultValue(sysId, defaultFilter);
    },
    deleteDefaultValue: function() {
        var sysId = this.getParameter('sysparm_canvas_id');
        var widgetId = this.getParameter('sysparm_default_filter_id');
        return this.removeDefaultValue(sysId, widgetId);
    },
    deleteAllDefaultValue: function() {
        var sysId = this.getParameter('sysparm_canvas_id');
        return this.removeAllDefaultValue(sysId);
    },
    getDefaultValues: function(canvasSysId) {
        var canvasId = canvasSysId ? canvasSysId : this.getParameter('sysparm_canvas_id');
        if (!this.checkCanvasAuthorization())
            return;

        var userId = gs.getUserID();
        var grCanvasPreferences = new GlideRecord('sys_canvas_preferences');
        var defaultFilters = [];
        grCanvasPreferences.addQuery('canvas_page', canvasId);
        grCanvasPreferences.addQuery('user', userId);
        grCanvasPreferences.addQuery('name', 'default_value');
        grCanvasPreferences.query();
        while (grCanvasPreferences.next()) {
            defaultFilters.push(this.getFilterJSON(grCanvasPreferences));
        }
        var result = this.newItem("result");
        result.setAttribute("filters", JSON.stringify(defaultFilters));

        this.sendUsage(defaultFilters, canvasId, 'filters');

        return JSON.stringify(defaultFilters);
    },
    getFilterJSON: function(grCanvasPreference) {
        var defaultFilter = {};
        defaultFilter.id = grCanvasPreference.getValue("widget_id");
        defaultFilter.name = grCanvasPreference.getValue("name");
        defaultFilter.filters = JSON.parse(grCanvasPreference.getValue("value"));
        defaultFilter.queryParts = this.getQueryParts(grCanvasPreference.getValue("value"));
        return defaultFilter;
    },
    getQueryParts: function(conditions) {
        var self = this;
        var queryConditions = JSON.parse(conditions);
        var queryParts = queryConditions.map(self.getQueryPart);
        return queryParts;
    },
    getQueryPart: function(condition) {
        var queryPart = new SNC.InteractiveFilterUtils().getQueryPartForFilter(JSON.stringify(condition));
        return JSON.parse(queryPart);
    },
    getFilterJSONForQueryParts: function(key, filters) {
        var defaultFilter = {};
        defaultFilter.id = key;
        defaultFilter.filters = filters;
        defaultFilter.queryParts = this.getQueryParts(filters);
        return defaultFilter;
    },
    addQueryPartsToHomePageFilters: function(filter) {
        var result = this.newItem("result");
        var filterParam = this.getParameter('sysparm_homepage_filters');
        var homepageFilter = new SNC.InteractiveFilterUtils().getQueryPartsForFilter(filterParam);
        result.setAttribute("filters", homepageFilter);
        return homepageFilter;
    },
	getInteractiveFilterQueryParts: function() {
        var result = this.newItem("result");
        var filterParam = this.getParameter('sysparm_interactive_filters');
        var interactiveFilterParts = new SNC.InteractiveFilterUtils().
		getQueryPartsForFilter(filterParam);
        result.setAttribute("filters", interactiveFilterParts);
        return interactiveFilterParts;
    },
    sendUsage: function(defaultFilters, canvasId, filterAttr) {
        var licensingUtil = new PALicensingUtils('interactiveFilter');

        if (licensingUtil.connect()) {
            var sendJsonInit = {
                canvas_id: canvasId
            };
            for (var k = 0; k &lt; defaultFilters.length; k++) {
                sendJsonInit.filter_id = defaultFilters[k].id;
                var filterList = defaultFilters[k][filterAttr];

                if (Array.isArray(defaultFilters[k][filterAttr])) {
                    for (var i = 0; i &lt; filterList.length; i++) {
                        if (filterList[i].table)
                            licensingUtil.sendUsage(sendJsonInit, filterList[i].table);
                    }
                } else {
                    //group type filters contain filter object lists
                    for (var filterId in defaultFilters[k][filterAttr]) {
                        filterList = defaultFilters[k][filterAttr][filterId];
                        for (var j = 0; j &lt; filterList.length; j++) {
                            if (filterList[j].table)
                                licensingUtil.sendUsage(sendJsonInit, filterList[j].table);
                        }
                    }
                }
            }
            licensingUtil.disconnect();
        }
    },

    type: 'InteractiveFilterDefaults'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-05-11 11:00:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6c76e846c3131200bde4beae82d3ae7c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InteractiveFilterDefaults&lt;/sys_name&gt;
        &lt;sys_package display_value="Responsive Dashboards" source="com.glideapp.dashboards"&gt;77d3cdc76da620100acb70b353433016&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6c76e846c3131200bde4beae82d3ae7c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-05-17 15:00:11&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;8026&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:18</sys_created_on>
        <sys_id>48cc013e2f331110d8a4d5f62799b6db</sys_id>
        <sys_name>InteractiveFilterDefaults</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_48cc013e2f331110d8a4d5f62799b6db</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
