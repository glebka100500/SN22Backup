<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>604184f9c79710108ad4010703c260e7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBSearchDeduplicationSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]&amp;#13;
&amp;#13;
The purpose of this script include is to provide default behaviours for the KBSearchDeduplication script include.&amp;#13;
To change the behaviour of these methods (or add new methods), Customers should override/add new methods to the KBSearchDeduplication script include.&amp;#13;
&amp;#13;
If a search happened within 10 seconds of the previous search in that session and if either of the search term starts with other search term than the previous is marked "Not Final".&amp;#13;
&amp;#13;
Sample usage:&amp;#13;
&amp;#13;
To process all the search that happened yesterday,&amp;#13;
new global.KnowledgeSearchDeduplication().process();&amp;#13;
&amp;#13;
For specific day,&amp;#13;
var gd = new GlideDate():&amp;#13;
gd.setValue('2020-03-27'):&amp;#13;
var searchDedupe = new global.KBSearchDeduplication():&amp;#13;
searchDedupe.process(gd):&amp;#13;
&amp;#13;
Few sessions of a specific day.&amp;#13;
&amp;#13;
var gd = new GlideDate();&amp;#13;
gd.setValue('2020-03-27');&amp;#13;
var searchDedupe = new global.KnowledgeSearchDeduplication();&amp;#13;
searchDedupe.process(gd, 'session_id=123456ABCDE123456');&amp;#13;
&lt;/description&gt;
        &lt;name&gt;KBSearchDeduplicationSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBSearchDeduplicationSNC = Class.create();
KBSearchDeduplicationSNC.prototype = {
    initialize: function() {
        //a search within 10 seconds of another search from the same session will be considered for deduplication.
        this.DUPLICATE_TIME_DIFF = 10;
        this.UPDATE_CHUNK_SIZE = 1000;
    },

    getQuery: function(dateObj) {
        //dateObj is undefined or null then consider yeterday for processing.
        if (!dateObj) {
            dateObj = new GlideDate();
            dateObj.addDays(-1);
        }
        var dt = new GlideDateTime(gs.beginningOfDay(dateObj));
        dt.addSeconds((this.DUPLICATE_TIME_DIFF * -1));
        var startDt = "sys_created_on&gt;=" + dt.getValue();

        dt = new GlideDateTime(gs.endOfDay(dateObj));
        var endDt = "sys_created_on&lt;=" + dt.getValue();
        var query = startDt + '^' + endDt;
        return query;
    },

    process: function(dateObj, encQuery) {
        var timeDiffInMs = this.DUPLICATE_TIME_DIFF * 1000;
        var gr = new GlideRecord("ts_query_kb");
        gr.addQuery(this.getQuery(dateObj));
        if (encQuery)
            gr.addEncodedQuery(encQuery);
        gr.orderBy('session_id');
        gr.orderBy('sys_created_on');
        gr.query();
        gs.log("Job Query : " + gr.getEncodedQuery(), "KBSearchDeduplication");
        var updateIds = [];
        var updateIdsToMarkFalse = [];
        var prevTerm = "";
        var prevSysId = "";
        var prevSessionId = "";
        var prevRecordDate = "";
        var prevFinalSearch = "";
        while (gr.next()) {
            var searchTerm = gr.getValue("search_term");
            var sysId = gr.getValue("sys_id");
            var sessionId = gr.getValue("session_id");
            var recordDate = gr.getValue("sys_created_on");
            var finalSearch = gr.getValue("final_search_term");

            if (prevTerm == "" || prevSessionId == "") {
                prevTerm = searchTerm;
                prevSysId = sysId;
                prevSessionId = sessionId;
                prevRecordDate = recordDate;
                prevFinalSearch = finalSearch;
                continue;
            }

            if (prevSessionId != sessionId) {
                if (prevFinalSearch == "0")
                    updateIds.push(prevSysId);
            } else {
                var date1 = new GlideDateTime();
                date1.setValue(recordDate);
                var date2 = new GlideDateTime();
                date2.setValue(prevRecordDate);
                var diff = date1.getNumericValue() - date2.getNumericValue();
                if (diff &lt;= timeDiffInMs) {
                    if ((searchTerm &amp;&amp; searchTerm.startsWith(prevTerm)) ||
                        (prevTerm &amp;&amp; prevTerm.startsWith(searchTerm))) {
                        //Previous search is duplicate of this search
                        if (prevFinalSearch == "1") //if alreayd marked as final
                            updateIdsToMarkFalse.push(prevSysId);
                    } else {
                        //Previous search is not a duplicate of this search
                        if (prevFinalSearch == "0") //if alreayd marked as not final
                            updateIds.push(prevSysId);
                    }
                } else {
                    if (prevFinalSearch == "0")
                        updateIds.push(prevSysId);
                }
            }
            if (updateIds.length == this.UPDATE_CHUNK_SIZE) {
                this.doUpdate(updateIds, "true");
                updateIds = [];
            }
            if (updateIdsToMarkFalse.length == this.UPDATE_CHUNK_SIZE) {
                this.doUpdate(updateIdsToMarkFalse, "false");
                updateIdsToMarkFalse = [];
            }
            prevTerm = searchTerm;
            prevSysId = sysId;
            prevSessionId = sessionId;
            prevRecordDate = recordDate;
            prevFinalSearch = finalSearch;
        }
        if (prevFinalSearch == "0")
            updateIds.push(prevSysId);

        if (updateIds.length &gt; 0)
            this.doUpdate(updateIds, "true");
        if (updateIdsToMarkFalse.length &gt; 0)
            this.doUpdate(updateIdsToMarkFalse, "false");
    },

    doUpdate: function(finalSearchIds, val) {
        var mu = new GlideMultipleUpdate('ts_query_kb');
        mu.addQuery('sys_id', 'IN', finalSearchIds);
        mu.setValue('final_search_term', val);
        mu.execute();
    },

    type: 'KBSearchDeduplicationSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-09-17 07:09:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;604184f9c79710108ad4010703c260e7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBSearchDeduplicationSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;e011410f6d2620100acb70b353433002&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_604184f9c79710108ad4010703c260e7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-09-18 05:13:11&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4515&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:54</sys_created_on>
        <sys_id>1eac09fa2f331110d8a4d5f62799b601</sys_id>
        <sys_name>KBSearchDeduplicationSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_1eac09fa2f331110d8a4d5f62799b601</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
