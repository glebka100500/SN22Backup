<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5ee03e33d733210013ab49547e610303</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBKnowledgeKeywordSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;KBKnowledgeKeywordSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[KBKnowledgeKeywordSNC = Class.create();

KBKnowledgeKeywordSNC.prototype =  Object.extendsObject(KBCommon, {
	
	PATH_TO_OWNER: "knowledge.kb_knowledge_base.owner",
	PATH_TO_MANAGERS: "knowledge.kb_knowledge_base.kb_managers",
    PATH_TO_OWNER_FROM_KNOWLEDGE: "kb_knowledge_base.owner",
    PATH_TO_MANAGERS_FROM_KNOWLEDGE: "kb_knowledge_base.kb_managers",
    PATH_TO_OWNER_FROM_KB: "owner",
    PATH_TO_MANAGERS_FROM_KB: "kb_managers",
      	
	/**
	 * If the user is a owner/ manager of the KB or knowledge_admin 
	 * they should be able to create kb_knowledge_keyword record
	 *
	 * @param GlideRecord: knowledgeKeywordGr
	 * @return Boolean: can logged in user pin an article
	 */
	canCreate: function(glideRecord) {	

	    if (gs.hasRole("knowledge_admin"))
	    	return true;

	    //check can create for table list view and for new record from kb_knowledge_keyword
	    if (glideRecord === null|| typeof glideRecord === "undefined" || glideRecord.getRecordClassName() === "kb_knowledge_keyword")         {
	        return new KBKnowledgeBase().isManagerOfAny(gs.getUserID());
	    }
	    
	    //check can create for related list view on kb_knowledge record
	    if (glideRecord.getRecordClassName() == "kb_knowledge"){
	        var kbKnowledgeKeyword = new GlideRecord("kb_knowledge_keyword");
	        if (kbKnowledgeKeyword.get("knowledge", glideRecord.sys_id))
	        	return false;
	        
	        return this.isKnowledgeBaseOwner(glideRecord, this.PATH_TO_OWNER_FROM_KNOWLEDGE)|| this.isKnowledgeBaseManager(glideRecord,this.PATH_TO_MANAGERS_FROM_KNOWLEDGE);
	    }
	    
	    //check can create for related list view on kb_knowledge_base record
	    if (glideRecord.getRecordClassName() == "kb_knowledge_base"){
	        return this.isKnowledgeBaseOwner(glideRecord, this.PATH_TO_OWNER_FROM_KB)|| this.isKnowledgeBaseManager(glideRecord,this.PATH_TO_MANAGERS_FROM_KB);
	    }
		
	    return false;
    },
	
	/**
	 * If the user is a knowledge_admin or manager/owner of any knowledge base
	 * they should be able read
	 *
	 * @param GlideRecord: knowledgeKeywordGr
	 * @return Boolean: can logged in user read the record
	 */
	canRead: function(knowledgeKeywordGr) {
	    if (gs.hasRole("knowledge_admin"))
	        return true;
	
	    return new KBKnowledgeBase().isManagerOfAny(gs.getUserID());		
	},
	
	/**
	 * If the user is knowledge_admin or owner/ manager of the KB
	 * they should be able to write
	 *
	 * @param GlideRecord: knowledgeKeywordGr
	 * @return Boolean: can logged in user read the record
	 */
	canWrite: function(knowledgeKeywordGr) {
		if (gs.hasRole("knowledge_admin"))
            return true;
		
	    if (knowledgeKeywordGr.isNewRecord())
	        return this.canCreate(knowledgeKeywordGr);
		
	    return (this.isKnowledgeBaseOwner(knowledgeKeywordGr, this.PATH_TO_OWNER) ||
			this.isKnowledgeBaseManager(knowledgeKeywordGr, this.PATH_TO_MANAGERS));	       
	},
	
	/**
	 * If the user is a owner/ manager of the KB or knowledge_admin
	 * they should be able to delete
	 *
	 * @param GlideRecord: knowledgeKeywordGr
	 * @return Boolean: can logged in user delete the category
	 */
	canDelete: function(knowledgeKeywordGr) {
		if (gs.hasRole("knowledge_admin"))
            return true;
		
         return (this.isKnowledgeBaseOwner(knowledgeKeywordGr, this.PATH_TO_OWNER) ||
			this.isKnowledgeBaseManager(knowledgeKeywordGr, this.PATH_TO_MANAGERS));	
	},
	
	
	/**
	 * Get all the the sys_ids of articles which are not featured and which beloongs to the knowledge base 
	 * that the current user is a manager or owner of
	 * Note: knowledge_admin gets all knowledge bases
	 *
	 * @return Array of sys ids
	 */
	getAvailableArticleIds: function() {
		var result = [];
		var kbGr = new GlideRecord("kb_knowledge_keyword");
		kbGr.query();
		while (kbGr.next()) {
			result.push(kbGr.knowledge+"");
		}
		
		kbGr = new GlideRecord("kb_knowledge");
		var userId = gs.getUserID();
		if (!gs.hasRole("knowledge_admin")) {
			var qc = kbGr.addQuery("kb_knowledge_base.owner", "CONTAINS", userId);
			qc.addOrCondition("kb_knowledge_base.kb_managers", "CONTAINS", userId);
		}
		kbGr.addQuery("sys_id", "NOT IN", result.join());
		kbGr.query();
		
		result = [];
		while (kbGr.next()) {
			result.push(kbGr.sys_id+"");
		}
		
		return result;
	},
	
	
	/**
	 * Get all the the sys_ids of KnowledgeBases for which user can create featured content
	 * Note: knowledge_admin gets all knowledge bases
	 *
	 * @return Array of sys ids
	 */
	getAvailableKbIds: function() {
		var result = [];
		var kbGr = new GlideRecord("kb_knowledge_base");
		var userId = gs.getUserID();
		if (!gs.hasRole("knowledge_admin")) {
			var qc = kbGr.addQuery("owner", "CONTAINS", userId);
			qc.addOrCondition("kb_managers", "CONTAINS", userId);
		}
		kbGr.query();
		while (kbGr.next()) {
			result.push(kbGr.sys_id+"");
		}
		return result;
	},

	type: "KBKnowledgeKeywordSNC"
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-10-23 15:32:32&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5ee03e33d733210013ab49547e610303&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBKnowledgeKeywordSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;e011410f6d2620100acb70b353433002&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5ee03e33d733210013ab49547e610303&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-20 08:13:48&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4894&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:51</sys_created_on>
        <sys_id>25ac85fa2f331110d8a4d5f62799b6eb</sys_id>
        <sys_name>KBKnowledgeKeywordSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_25ac85fa2f331110d8a4d5f62799b6eb</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
