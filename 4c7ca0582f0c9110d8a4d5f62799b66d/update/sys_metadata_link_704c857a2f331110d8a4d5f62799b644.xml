<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>178744e253220110af71ddeeff7b1261</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionAISearchStage&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AutoResolutionAISearchStage&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionAISearchStage = Class.create();
AutoResolutionAISearchStage.prototype = Object.extendsObject(AutoResolutionTaskProcessingStage, {

	getStateValue: function() {
		return AutoResolutionConstants.TASK_PROCESSING_STATE.AI_SEARCH;
	},

	execute: function(contextFieldValueMap) {
		this.prepare(contextFieldValueMap, this.type);

		// Exit if we should not execute AI Search
		if (!this.shouldExecuteAISearch(contextFieldValueMap.matched_topic))
			return this.response;

		if (gs.nil(this.userId)) {
			this.setError('No valid user for AI Search');
			return this.response;
		}

		if (gs.nil(contextFieldValueMap.prediction)) {
			this.setError('There is no prediction record to get a search query from');
			return this.response;
		}

		var searchQuery = AutoResolutionPredictionHelper.getSearchQueryByPredictionId(contextFieldValueMap.prediction);
		if (gs.nil(searchQuery) || searchQuery.trim().length === 0) {
			this.setError('No valid search query');
			return this.response;
		}

		var botUserId = AutoResolutionUtil.getBotUserId(this.taskGr.getTableName());
		var aisStatus = AutoResolutionConstants.AIS_STATUS_SUCCESS;
		var aisStartTs = new GlideDateTime().getNumericValue();
		var searchResults = '';
		var aisMessage = '';

		try {
			searchResults = this.getSearchResults(searchQuery, this.userId, botUserId);
		} catch(e) {
			aisStatus = AutoResolutionConstants.AIS_STATUS_FAILURE;
			aisMessage = e;
			this.setError('Unexpected error performing AI Search');
		}

		var timeDiff = new GlideDateTime().getNumericValue() - aisStartTs;
		var aisSearchResult = this._saveAISearchResults(searchQuery, searchResults, timeDiff, aisStatus, aisMessage);

		if (!gs.nil(aisSearchResult))
			this.setContextValue('ais_result', aisSearchResult.getSysId());

		if (VAAISearchHelperTokyo.doesSearchResultsHaveItems(searchResults)) {
			var aisTopic = this.configGr.getElement('ais_topic').getRefRecord();
			var isAISTopicActive = aisTopic.getValue('active') === '1';
			if (isAISTopicActive) {
				this.setContextValue('matched_topic', aisTopic.getUniqueValue());
				this.LOGGER.debug('Found active AIS display topic: {0}', aisTopic.getValue('name'));
			} else {
				this.setError('AI Search display topic is not active');
			}
		} else {
			var message = 'No AI Search results to display';
			this.LOGGER.info(message);
			this.setError(message);
		}

		return this.response;
	},

	/**
	 * Returns true if AIS is enabled globally and on the IAR configuration
	 * @param {string} matchedTopic - topic found from previous stages
	 * @returns {boolean}
	 */
	shouldExecuteAISearch: function(matchedTopic) {
		return VAAISearchHelper.isSearchEnabled() &amp;&amp;
			this.configGr.getValue('ais_enabled') === '1' &amp;&amp;
			gs.nil(matchedTopic);
	},

	/**
	 * Perform the search result as the notification_user
	 *
	 * @param configGr configuration to read the EVAM and search app from
	 * @param userId user to impersonate for search request
	 * @param botUserId bot user to impersonate back to after search request
	 * @returns {string|*} raw search results
	 */
	getSearchResults: function(searchTerm, userId, botUserId) {
		var evamDefinitionID = this.configGr.getValue('evam_definition');
		var searchAppID = this.configGr.getValue('search_application');
		var locale = AutoResolutionAISearchHelper.getLocaleForAISearch(this.contextGr);
		var searchResults = '';
		var gi = new GlideImpersonate();
		gi.impersonate(userId);
		this.LOGGER.info('Executing AI Search for Auto-Resolution as userId: ' + userId);
		try {
			searchResults = sn_cs.VASystemObject.performAutoResolutionSearch(searchTerm, evamDefinitionID, searchAppID,
				locale, this.LOGGING_UTILS.CONTEXT);
		} catch (e) {
			this.LOGGER.error('Error getting AI Search results: {0}', e);
			throw e;
		} finally {
			gi.impersonate(botUserId);
		}
		return searchResults;
	},

	/**
	 * Persists AI Search result and associate the result with the context_id
	 * @return a instance of AutoResolutionAISearchResult object
	 */
	_saveAISearchResults: function(searchQuery, searchResults, executionTime, status, message) {
		var lang = AutoResolutionAISearchHelper.getLanguageForAISearch(this.contextGr);
		return AutoResolutionAISearchResult.create(this.contextGr, searchQuery, searchResults, executionTime, status,
													message, lang);
	},

	type: 'AutoResolutionAISearchStage'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-01 21:17:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;178744e253220110af71ddeeff7b1261&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionAISearchStage&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;85493a472f800110d8a4d5f62799b6a9&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_178744e253220110af71ddeeff7b1261&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-10 21:44:40&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4353&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:10</sys_created_on>
        <sys_id>704c857a2f331110d8a4d5f62799b644</sys_id>
        <sys_name>AutoResolutionAISearchStage</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_704c857a2f331110d8a4d5f62799b644</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
