<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>29cd108787a38d50c91640c7dabb3570</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;The 'com.glide.interaction.attachments.copy' is set according to the value present in 'com.snc.problem.create_from_interaction.copy_attachments' and 'com.snc.incident.create_from_interaction.copy_attachments'.&lt;/description&gt;
        &lt;name&gt;Set glide copy attachment property&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[executeScript();

function executeScript() {
    if (pm.isZboot())
        return;
    var properties = [{
        name: 'com.snc.problem.create_from_interaction.copy_attachments',
        table: 'problem'
    }, {
        name: 'com.snc.incident.create_from_interaction.copy_attachments',
        table: 'incident'
    }];
    var prevWF = gs.getSession().getWorkflow();
    try {
        gs.getSession().setWorkflow(true);
        properties.forEach(function(property) {
            var propertyValue = gs.getProperty(property.name);
            if (propertyValue !== null) {
                updateNewProperty(propertyValue, property.table);
                deleteOldProperty(property.name);
            }
        });
    } finally {
        gs.getSession().setWorkflow(prevWF);
    }
}

function updateNewProperty(propertyValue, table) {
    var glideProperty = gs.getProperty('com.glide.interaction.attachments.copy');
    if (propertyValue !== 'true') {
        if (glideProperty.includes(table)) {
            glideProperty = glideProperty.replace(table, "").split(",").filter(function(prop) {
                return prop.length &gt; 1;
            }).join();
            gs.setProperty('com.glide.interaction.attachments.copy', glideProperty);
        }
    }
}

function deleteOldProperty(propertyName) {
    var props = new GlideRecord("sys_properties");
    props.addQuery('name', propertyName);
    props.query();
    if (props.next())
        props.deleteRecord();
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-23 05:50:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;29cd108787a38d50c91640c7dabb3570&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;21&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Set glide copy attachment property&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Virtual Agent Lite" source="com.glide.cs.chatbot.lite"&gt;8e077ecb2f400110d8a4d5f62799b62b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_29cd108787a38d50c91640c7dabb3570&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-31 07:55:03&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;true&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:54:24</sys_created_on>
        <sys_id>e6b21d362f731110d8a4d5f62799b62e</sys_id>
        <sys_name>Set glide copy attachment property</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e6b21d362f731110d8a4d5f62799b62e</sys_update_name>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
