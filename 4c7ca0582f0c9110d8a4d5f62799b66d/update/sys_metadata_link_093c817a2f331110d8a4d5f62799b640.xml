<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>09cee175531130103296ddeeff7b1234</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MobilePushNotificationHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Aids in determining what mobile push notifications need to be generated and generating content for those mobile push notifications. &lt;/description&gt;
        &lt;name&gt;MobilePushNotificationHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MobilePushNotificationHelper = Class.create();
MobilePushNotificationHelper.prototype = {
	initialize: function() {},

	getMessagesNeedingNotification: function(consumerAccountId, lastReadMessageId) {	
		// Get any unread messages for this consumer account that is after the last marked read message
		// These are returned in ascending order
		var unreadMessageIds = sn_cs.VASystemObject.getUnreadMessageIdsForConsumerAccount(consumerAccountId, lastReadMessageId);
		var lastNotification = this.getLastNotificationForConsumer(consumerAccountId);
		var messageIdForLastNotification = lastNotification != null ? lastNotification.getValue('message_id') : null;

		// No previous notification --&gt; send notifications for all unread messages
		if(messageIdForLastNotification == null) {
			return unreadMessageIds;
		}

		// None of the unread messages have had a previous notification
		var index = unreadMessageIds.indexOf(messageIdForLastNotification);
		if(index == -1) {
			return unreadMessageIds;
		}

		var messagesPendingNotification = [];

		// Find every message after the last notification and add to list for pending notifications
		for(var i = index + 1; i &lt; unreadMessageIds.length; i++) {
			messagesPendingNotification.push(unreadMessageIds[i]);
		}

		return messagesPendingNotification;
	},

	getLastNotificationForConsumer: function(consumerAccountId) {
		if (!gs.tableExists('sys_cs_message_notification')) {
			return null;
		}

		var lastNotificationGR = new GlideRecord('sys_cs_message_notification');
		lastNotificationGR.addQuery('consumer_account_id', consumerAccountId);
		lastNotificationGR.orderByDesc('message_id.sequence');
		lastNotificationGR.setLimit(1);
		lastNotificationGR.query();

		return lastNotificationGR.next() ? lastNotificationGR : null;
	},

	generateNotifications: function(consumerAccountId, messageIds, userId) {
		if (!gs.tableExists('sys_cs_message_notification')) {
			return;
		}	

		var pushNotifTitle = sn_cs.VASystemObject.getChatHeader();
		for(var i = 0; i &lt; messageIds.length; i++) {
			var notificationGR = new GlideRecord('sys_cs_message_notification');
			notificationGR.setValue('consumer_account_id', consumerAccountId);
			notificationGR.setValue('message_id', messageIds[i]);
			notificationGR.setValue('push_title', pushNotifTitle);
			notificationGR.setValue('user_id', userId);
			notificationGR.insert();
		}
	},

	getConsumerAccountsWithPushRegistered: function() {
		var consumerAccounts = [];
		if (!gs.tableExists('sys_push_notif_app_install')) {
			return consumerAccounts;
		}

		var pushNotifsGR = new GlideRecord('sysevent_email_action');	
		if (!pushNotifsGR.get('32a0d05153b130103296ddeeff7b127d'))
			return consumerAccounts;

		var pushMessages = pushNotifsGR.getValue('message_list');
		var pushAppGR = new GlideRecord('sys_push_notif_msg');
		pushAppGR.addQuery('sys_id', 'IN', pushMessages);
		pushAppGR.query();

		var pushApps = [];
		while (pushAppGR.next()) {
			pushApps.push(pushAppGR.getValue('push_app'));
		}

		// Get Child Apps
		var childPushAppGR = new GlideRecord('sys_push_application');
		childPushAppGR.addQuery('parent_app', 'IN', pushApps);
		childPushAppGR.addActiveQuery();
		childPushAppGR.query();

		while (childPushAppGR.next()) {
			pushApps.push(childPushAppGR.getUniqueValue());
		}

		var pushRegGR = new GlideRecord('sys_push_notif_app_install');
		pushRegGR.addQuery('sys_push_application_id', 'IN', pushApps);
		pushRegGR.addActiveQuery();
		pushRegGR.query();

		var usersWithPush = [];
		while(pushRegGR.next()) {
			usersWithPush.push(pushRegGR.getValue('sys_user_id'));	
		}

		var consumerGR = new GlideRecord('sys_cs_consumer');
		consumerGR.addQuery('user_id', 'IN', usersWithPush);
		consumerGR.query();

		var consumers = [];
		while(consumerGR.next()) {
			consumers.push(consumerGR.getUniqueValue());
		}

		var consumerAccountsGR = new GlideRecord('sys_cs_consumer_account');
		consumerAccountsGR.addQuery('consumer', 'IN', consumers);
		consumerAccountsGR.query();

		while(consumerAccountsGR.next()) {
			consumerAccounts.push(consumerAccountsGR.getUniqueValue());
		}

		return consumerAccounts;
	},

	type: 'MobilePushNotificationHelper'		
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-12 22:24:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;09cee175531130103296ddeeff7b1234&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;52&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MobilePushNotificationHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;f9f62e472f000110d8a4d5f62799b60c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_09cee175531130103296ddeeff7b1234&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-17 20:33:05&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4176&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:55</sys_created_on>
        <sys_id>093c817a2f331110d8a4d5f62799b640</sys_id>
        <sys_name>MobilePushNotificationHelper</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_093c817a2f331110d8a4d5f62799b640</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
