<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3d780d810b2013002defc71437673a5f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ChannelProxyInstallURLGetter&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ChannelProxyInstallURLGetter&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ChannelProxyInstallURLGetter = Class.create();
ChannelProxyInstallURLGetter.prototype = {
    initialize: function(channel, appKey) {
		this.channel = channel;
		this.appKey = appKey;
		this.generator = new sn_channelproxy.InstallURLGenerator(this.channel, this.appKey);
		if (this.channel == 'teams')
			this.generator = this.generator.withParam('response_type', 'code');
		
		if (this.channel == 'workplace')
			this.generator = this.generator.withParam('section', 'apps');
		if (this.channel == 'slack') {  
			this.generator = this.generator.withParam('granular_bot_scope', 1);  
			this.generator = this.generator.withState('version', 2);  
       } 
    },
	
	getURL: function(providedId) {
		if (providedId)
			this.generator.withState('provided_external_id', providedId);
		
		var url = this.generator.getURL();
		if (this.channel == 'workplace')
			return url.replace('client_id=', 'app_id=');
		
		if (this.channel == 'teams' &amp;&amp; providedId)
			return url.replace('/common/', '/' + providedId + '/');	
		return url;
	},
	
	getConfirmationURL: function(externalId) {
		this.generator = this.generator
			.withState('override_existing_id', externalId);
		
		if (this.channel == 'slack')
			return this.generator.withParam('team', externalId).getURL();
		
		if (this.channel == 'teams')
			return this.generator.getURL().replace('/common/', '/' + externalId + '/');
			
		return this.generator.getURL();
	},

    type: 'ChannelProxyInstallURLGetter'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-02-26 02:52:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3d780d810b2013002defc71437673a5f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ChannelProxyInstallURLGetter&lt;/sys_name&gt;
        &lt;sys_package display_value="Channel Proxy" source="com.glide.channelproxy"&gt;0e077ecb2f400110d8a4d5f62799b62c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3d780d810b2013002defc71437673a5f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-22 09:58:39&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1462&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:01</sys_created_on>
        <sys_id>997c09ba2f331110d8a4d5f62799b646</sys_id>
        <sys_name>ChannelProxyInstallURLGetter</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_997c09ba2f331110d8a4d5f62799b646</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
