<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8fd98031df233000cd7da5f59bf26301</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CertificationUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Certification Core Support&lt;/description&gt;
        &lt;name&gt;CertificationUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CertificationUtils = Class.create();
CertificationUtils.prototype = {

	hasChildren: function(recordId, childTable, childColumn) {
		if (!gs.tableExists(childTable))
			return false;
		var children = new GlideRecord(childTable);
		children.addQuery(childColumn, recordId);
		children.setLimit(1);
		children.query();
		return children.getRowCount() &gt; 0;
	},
		   
	  getTriggerNextRunTime: function(isExecutionUpdate, documentName, documentKey){
      
          var associatedTrigger = new GlideRecord("sys_trigger");
          associatedTrigger.addQuery("document", documentName);
          associatedTrigger.addQuery("document_key", documentKey);
          // trigger is not on on demand or start up
          associatedTrigger.addQuery("trigger_type", "!=", 2);
          associatedTrigger.addQuery("trigger_type", "!=", 9);
          if (isExecutionUpdate) {
              // if this is an update from an execution of the script
              // do not include once only triggers (trigger_type == 0)
              // since that trigger would have been the one to cause
              // the update. we don't want to use it again.
              associatedTrigger.addQuery("trigger_type", "!=", 0);
          }
          associatedTrigger.query();
          if (associatedTrigger.next()) {
              if (isExecutionUpdate) {
                  // if this is an update from an execution of the script
                  // the trigger's next action has not yet been updated (that happens
                  // after the execution of the script). so, instead get the calculated
                  // next recurrence of the trigger
                  // (this is the same operation that is done when the trigger
                  // is complete. see com.glide.schedule.JobExecutor.reschedule)
                  var m = GlideARecurrence.get(associatedTrigger);
                  if(m != null) {
                    var nextOccurence = m.next();
                    return nextOccurence;
                  }
              }
              else {
                  // if this is not an update from an execution of the script
                  // the synchronizer has already run, so the trigger's next
                  // action has been updated.
                  return associatedTrigger.next_action;
              }
          }
          return "";
	  },
	  
	  managerHasCertificationRole : function(manager) {
	  	//Get sys_id for the certification role
   		var certificationRole = new GlideRecord("sys_user_role");
   		// If Certification role exists
   		if (certificationRole.get('name', 'certification')) {
   			var hasRole = new GlideRecord('sys_user_has_role');
   			hasRole.addQuery('user', manager);
   			hasRole.addQuery('role', certificationRole.sys_id);
   			hasRole.query();
   			return (hasRole.next());
   		}
   		return false;
	  },

    type: 'CertificationUtils'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-02-14 23:25:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8fd98031df233000cd7da5f59bf26301&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;57&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CertificationUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Certification Core" source="com.snc.certification_core"&gt;d29009876d2620100acb70b353433035&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8fd98031df233000cd7da5f59bf26301&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;giora.tamir&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-10-24 17:38:56&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2893&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:34</sys_created_on>
        <sys_id>360d097e2f331110d8a4d5f62799b6bf</sys_id>
        <sys_name>CertificationUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_360d097e2f331110d8a4d5f62799b6bf</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
