<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>96fce53cc0a801642760dfcee0e04711</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MaintenanceScheduleCalculator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Used to handle maintenance schedule calculations.&lt;/description&gt;
        &lt;name&gt;MaintenanceScheduleCalculator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MaintenanceScheduleCalculator = Class.create();

MaintenanceScheduleCalculator.prototype = {
	initialize: function() {
		this.noMessages = false;
		if (typeof suppressMaintenanceScheduleMessages !== "undefined")
			this.noMessages = true;
	},

	setNoMessages: function(suppressMessages) {
		this.noMessages = suppressMessages;
	},

	/***
	 * For a change record, determine whether the planned dates fall outside maintenance schedules for CIs.
	 * If checkType is null, both primary and affected CIs are checked.
	 * If checkType is "primary" then only the primary CI is checked.
	 * If checkType is something other than null or "primary", it is the SYS_ID for an affected CI and that
	 * affected CI is checked.
	 ***/
	checkChangeAgainstSchedules: function(changeGR, checkType) {

		var startElement = changeGR.getElement("start_date");
		if (startElement.nil())
			return true;

		this.startGDT = startElement.getGlideObject();
		var endElement = changeGR.getElement("end_date");
		if (endElement.nil())
			return true;

		this.endGDT = endElement.getGlideObject();

		this.startSDT = this._GDTToSDT(this.startGDT);
		this.endSDT = this._GDTToSDT(this.endGDT);

		var rv = true;

		if (!checkType || checkType === "primary") {
			var cmdb_ci = changeGR.cmdb_ci;
			if (cmdb_ci) {
				if (!this._checkSchedule("primary", cmdb_ci, changeGR))
					rv = false;
			}
		}

		if (!checkType || (checkType &amp;&amp; checkType !== "primary")) {
			var affectedGR = new GlideRecord("task_ci");
			affectedGR.addQuery("task", changeGR.sys_id);

			if (checkType)
				affectedGR.addQuery("ci_item", checkType);
			else if (!changeGR.cmdb_ci.nil()) // We're here so we know we're checking both primary and affected CIs
				affectedGR.addQuery("ci_item", "!=", changeGR.cmdb_ci); // Ensure we don't check the Primary CI *again*

			affectedGR.addQuery("ci_item.maintenance_schedule", "!=", null);
			affectedGR.query();

			while (affectedGR.next()) {
				if (!this._checkSchedule("affected", affectedGR.ci_item, changeGR))
					rv = false;
			}
		}

		return rv;
	},

	_checkSchedule: function(ciType, cmdb_ci, changeGR) {
		var scheduleID = cmdb_ci.maintenance_schedule;
		if (!scheduleID)
			return true;

		var schedule = new GlideSchedule(scheduleID);

		var scheduleMap = schedule.getTimeMap(this.startGDT, this.endGDT);

		var span = new GlideScheduleDateTimeSpan(this.startSDT, this.endSDT);
		var thisMap = new GlideScheduleTimeMap();
		thisMap.addInclude(span);
		thisMap.buildMap(gs.getSession().getTimeZoneName());
		var overlaps = scheduleMap.overlapsWith(thisMap, schedule.getTimeZone());
		if (!overlaps.isEmpty()) {
			overlaps.buildMap(gs.getSession().getTimeZoneName());
			var overlapSpan = overlaps.next();
			if (overlapSpan.getStart().equals(this.startSDT) &amp;&amp; overlapSpan.getEnd().equals(this.endSDT))
				return true;
		}

		if (!this.noMessages) {
			if (Boolean(changeGR.outside_maintenance_schedule) === false) { // only notify if status changed
				if (ciType === "affected")
					gs.addInfoMessage(gs.getMessage("Change planned times fall outside the maintenance schedule for affected CI: {0}", cmdb_ci.getDisplayValue()));
				else
					gs.addInfoMessage(gs.getMessage("Change planned times fall outside the maintenance schedule for CI: {0}", cmdb_ci.getDisplayValue()));
			}
		}
		return false;
	},

	_GDTToSDT: function(gdt) {
		var tz = gs.getSession().getTimeZoneName();
		var sdt = new GlideScheduleDateTime(gdt);
		sdt.setTimeZone(tz);
		return sdt;
	},

	type: "MaintenanceScheduleCalculator"
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2009-09-08 00:12:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;96fce53cc0a801642760dfcee0e04711&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;39&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MaintenanceScheduleCalculator&lt;/sys_name&gt;
        &lt;sys_package display_value="Maintenance Schedules" source="com.snc.maintenance_schedules"&gt;a3f141c36d6620100acb70b35343304c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_96fce53cc0a801642760dfcee0e04711&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-03-09 14:28:10&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3517&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:51</sys_created_on>
        <sys_id>7e1d8d7e2f331110d8a4d5f62799b6d2</sys_id>
        <sys_name>MaintenanceScheduleCalculator</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_7e1d8d7e2f331110d8a4d5f62799b6d2</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
