<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21573856c799f010c59db91703c26076</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ImportNLUModel&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ImportNLUModel&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ImportNLUModel = Class.create();

var fileConstants = NLUConstants.FILE_CONSTANTS;
var tables = NLUConstants.tables;
var modelStates = NLUConstants.MODEL_STATE_TYPES;

function getOnStartScript(modelId) {
    return "(function runTransformScript(source, map, log, target) { \
        var importSetId = import_set.getUniqueValue(); \
        var dataSource = import_set.getValue('data_source'); \
        log.info('Import model onStart - importSetId: ' + importSetId + '; dataSource: ' + dataSource); \
        var gr = new GlideRecord('sys_data_source'); \
        if (gr.get(dataSource)) { \
            gr.setValue('properties', 'charset=utf-8'); \
            var result = gr.update(); \
            log.info('Import model onStart - update: ' + result); \
        } else { \
            log.info('Import model onStart - dataSource not found! " + modelId + "'); \
        } \
    })(source, map, log, target);";
}

function getOnBeforeScript(modelId) {
    return "(function runTransformScript(source, map, log, target) { \
        var intent = source.getValue('u_intent'); \
        if (!intent) { \
            ignore = true; \
        } else { \
            var intentId; \
            var nluModel = new NLUModel('" + modelId + "'); \
            var intentGr = nluModel.getIntents('name=' + intent); \
            if (intentGr.next()) { \
                intentId = intentGr.getUniqueValue(); \
            } \
            if (!intentId) { \
                var modelGr = nluModel.getGR(); \
                if (modelGr.primary_model) { \
                    var primaryNluModel = new NLUModel(modelGr.primary_model); \
                    primaryNluModel.createIntent(intent); \
                    intentGr = nluModel.getIntents('name=' + intent); \
                    if (intentGr.next()) { \
                        intentId = intentGr.getUniqueValue(); \
                    } \
                } else { \
                    intentId = nluModel.createIntent(intent); \
                } \
                if (intentId) { \
                    NLUSystemUtil.updateOrInsert('sys_nlu_intent', 'sys_id', intentId, { 'enable': true }); \
                } else { \
                    ignore = true; \
                } \
            } \
            target.intent = intentId; \
        } \
        if ((source.getValue('u_utterance') || '').trim() === '') { \
            ignore = true; \
        } \
    })(source, map, log, target);";
}

function getOnCompleteScript(modelId) {
    return "(function runTransformScript(source, map, log, target) { \
        var gr = new GlideRecord('" + tables.SYS_NLU_MODEL_STATUS + "'); \
        gr.addQuery('model', '" + modelId + "'); \
        gr.query(); \
        if (gr.next()) { \
            gr.setValue('state', '" + modelStates.draft + "'); \
            gr.update(); \
        } \
})(source, map, log, target);";
}

ImportNLUModel.importModel = function(data) {
    try {
        var fileName = data.file &amp;&amp; data.file.name;
        var fileSize = data.file &amp;&amp; data.file.size;
        var modelId = data.sysId;
        var language = data.language;
        var modelName = data.displayName;
        var category = data.category;
        var domain = data.modelDomain;
        var ct = data.confidenceThreshold;
        var description = data.description;

        if (data.file) {
            if (!NLUModelFileUtil.checkFileSize(fileSize)) {
                throw new Error(gs.getMessage('File size exceeds max filesize of {0} MB', NLUModelFileUtil.getMaxFileSize()));
            }
            var fileArr = NLUModelFileUtil.getFileNameAndExtension(fileName, fileConstants.VALID_FILE_TYPES);
            if (!fileArr) {
                throw new Error(gs.getMessage('Please upload a file with a valid extension'));
            }
        }

        var fields = [{
                name: 'intent',
                length: 200
            },
            {
                name: 'utterance',
                length: 512
            }
        ];

        var stageTableStructure = NLUModelImportUtils.createStageTable('NLU Model Import Stage Table', fields);
        if (!stageTableStructure) {
            throw new Error(gs.getMessage('Failed to create a staging table for import set'));
        }

        // Create &amp; associate a transform map for the stage table
        var mapSysId = NLUModelImportUtils.createTransformMap('NLU Model CSV Transform Map', stageTableStructure, tables.SYS_NLU_UTTERANCE, ['u_intent']);
        if (!mapSysId) {
            throw new Error(gs.getMessage('Failed to create transform map for staging table: {0}', stageTableStructure['tableName']));
        }

        var modelGr = NLUModel.getGRById(modelId);

        if (modelGr === null) {
            modelGr = new GlideRecord(tables.SYS_NLU_MODEL);
            modelGr.initialize();
            modelGr.setValue('display_name', modelName);
            modelGr.setValue('category', category);
            modelGr.setValue('language', language);
            modelGr.setValue('confidence_threshold', ct);
            modelGr.setValue('description', description);
            if (domain) modelGr.setValue('model_domain', domain);
            modelId = modelGr.insert();
            if (!modelId) {
                throw new Error(gs.getMessage('Error while creating model'));
            }
        }

        NLUModelImportUtils.createTransformMapScripts(mapSysId, [{
                event: 'onStart',
                script: getOnStartScript(modelId)
            },
            {
                event: 'onBefore',
                script: getOnBeforeScript(modelId)
            },
            {
                event: 'onComplete',
                script: getOnCompleteScript(modelId)
            }
        ], ['global']);

        var statusGr = NLUModel.getModelStatusGr(modelId);
        statusGr.setValue('state', modelStates.importing);
        statusGr.update();

        return {
            status: 'success',
            modelId: modelId,
            stageTable: stageTableStructure['tableName'],
            transformMap: mapSysId
        };
    } catch (e) {
        return {
            status: 'failure',
            message: e.message
        };
    }
};

ImportNLUModel.prototype = {
    initialize: function() {},
    type: 'ImportNLUModel'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-14 06:42:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21573856c799f010c59db91703c26076&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;55&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ImportNLUModel&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;04dd388b6d2220100acb70b35343302f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_21573856c799f010c59db91703c26076&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-08-19 04:02:12&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6302&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:23</sys_created_on>
        <sys_id>005cc97a2f331110d8a4d5f62799b6b8</sys_id>
        <sys_name>ImportNLUModel</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_005cc97a2f331110d8a4d5f62799b6b8</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
