<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>22585ce80b0033005775aabcb4673a01</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ConferenceFactory&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Creates Notify conference related objects&lt;/description&gt;
        &lt;name&gt;ConferenceFactory&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * @typedef {{
 	conferenceObj: global.NotifyConferenceAPI;
	isAvailable(): boolean;
	getConferenceTableName(): string;
	getParticipantTableName(): string;
	getEventHandlerAPI(): global.ConferenceEventHandlerConstructor;
	createEventHandlerInstance(): global.ConferenceEventHandler;
	getConferenceAPI(): global.NotifyConferenceAPIConstructor;
	createConferenceInstance(): global.NotifyConferenceAPI;
	getParticipantAPI(): global.NotifyConferenceParticipantConstructor;
	createParticipantInstance(): global.NotifyConferenceParticipant;
	throwImplementationError():  Error;
	getName(): string;
	initialize(confInstance?: global.NotifyConferenceAPI): void;
	setConferenceObject(confInstance: global.NotifyConferenceAPI): void;
	startConference(confObj: global.NotifyConferenceAPI, participants: Array&lt;global.NotifyConferenceParticipant&gt;, sourceGR: GlideRecord): global.ConferenceActionResult;
	validateConferenceObject(): Error | void;
	isValidConferenceObject(): boolean;
	addParticipant(participant: global.NotifyConferenceParticipant): global.ConferenceActionResult;
	addParticipants(participants: Array&lt;global.NotifyConferenceParticipant&gt;): global.ConferenceActionResult;
	mute(participant: global.NotifyConferenceParticipant): global.ConferenceActionResult;
	multiMute(paticipants: Array&lt;global.NotifyConferenceParticipant&gt;): global.ConferenceActionResult;
	unmute(participant: global.NotifyConferenceParticipant): global.ConferenceActionResult;
	multiUnmute(participants: Array&lt;global.NotifyConferenceParticipant&gt;): global.ConferenceActionResult;
	removeParticipant(participant: global.NotifyConferenceParticipant): global.ConferenceActionResult;
	removeParticipants(participants: Array&lt;global.NotifyConferenceParticipant&gt;): global.ConferenceActionResult;
	endConference(): global.ConferenceActionResult;
	getCapabilities(): {[name: string]: number;};
	makeHost(participant: global.NotifyConferenceParticipant): global.ConferenceActionResult;
 }} global.NotifyConferenceDriver
 */

var ConferenceFactory = Class.create();
ConferenceFactory.getCapabilityTypes = function () {
	return {
		NOT_SUPPORTED: 0,
		FULLY_SUPPORTED: 1
	};
};
ConferenceFactory.getCapabilitiesTemplate = function () {
	return {
		start: {
			isSupported: 0,
			meta: {}
		},
		end: {
			isSupported: 0,
			meta: {}
		},
		selfJoin: {
			isSupported: 0,
			meta: {}
		},
		join: {
			isSupported: 0,
			meta: {}
		},
		multiJoin: {
			isSupported: 0,
			meta: {}
		},
		mute: {
			isSupported: 0,
			meta: {}
		},
		multiMute: {
			isSupported: 0,
			meta: {}
		},
		unmute: {
			isSupported: 0,
			meta: {}
		},
		multiUnmute: {
			isSupported: 0,
			meta: {}
		},
		kick: {
			isSupported: 0,
			meta: {}
		},
		multiKick: {
			isSupported: 0,
			meta: {}
		},
		record: {
			isSupported: 0,
			meta: {}
		},
		speaking: {
			isSupported: 0,
			meta: {}
		},
		recording: {
			isSupported: 0,
			meta: {}
		},
		screenSharing: {
			isSupported: 0,
			meta: {}
		},
		fileSharing: {
			isSupported: 0,
			meta: {}
		},
		archive: {
			isSupported: 0,
			meta: {}
		},
		muteOnJoin: {
			isSupported: 0,
			meta: {}
		},
		beepOnJoin: {
			isSupported: 0,
			meta: {}
		},
		beepOnLeave: {
			isSupported: 0,
			meta: {}
		},
		hideCallInfo: {
			isSupported: 0,
			meta: {}
		},
		title: {
			isSupported: 0,
			meta: {}
		}
	};
};
/**
 * @param {NotifyParticipantGR} participantGR
 * @returns {global.NotifyConferenceAPI}
*/
ConferenceFactory.createConferenceObjectFromParticipantGR = function (participantGR) {
	var confUtils = new NotifyConferenceUtils();
	if (!confUtils.isValidParticipantGR(participantGR))
		throw new Error('Invalid parameters passed');
	if (participantGR.notify_conference_call.nil())
		throw new Error('Found null conference record');
	var confGR = participantGR.notify_conference_call.getRefRecord();
	return ConferenceFactory.createConferenceObjectFromConferenceGR(confGR);
};
/**
 * @param {string} confId
 * @returns {global.NotifyConferenceAPI}
 */
ConferenceFactory.createConferenceObjectFromConferenceId = function (confId) {
	var db = new NotifyDatabase();
	var confGR = /** @type {NotifyConferenceCallGR}*/(db.getConferenceGRFromConfId(confId));
	return ConferenceFactory.createConferenceObjectFromConferenceGR(confGR);
};
/**
 * @param {NotifyConferenceCallGR} confGR - 'notify_conference_call' or sub class
 * @returns {global.NotifyConferenceAPI}
 */
ConferenceFactory.createConferenceObjectFromConferenceGR = function (confGR) {
	var confUtils = new NotifyConferenceUtils();
	if (!confUtils.isValidConfGR(confGR))
		throw new Error('Invalid conference record passed');
	var serviceProvider = '';
	if (confGR.service_provider.nil()) {
		confGR = confUtils.fixServiceProviderDetails(confGR);
		if (confGR.notify_number.nil())
			throw new Error('Unable find driver implementation');
		serviceProvider = confUtils.DEFAULT_TELEPHONY_SERVICE_PROVIDER;
	} else
		serviceProvider = confGR.service_provider + '';
	if (serviceProvider.length === 0)
		throw new Error('Unable to find service provider implementation');
	var confObj = ConferenceFactory.createConferenceInstance(serviceProvider);
	confObj.setActiveConferenceGR(confGR);
	return confObj;
};

/**
 * @param {string} serviceProviderName
 * @returns {global.NotifyConferenceDriver}
 */
ConferenceFactory.getDriverInstance = function (serviceProviderName) {
	if (typeof serviceProviderName !== 'string')
		throw new Error('Service provider name must be a string');
	if (serviceProviderName.length === 0)
		throw new Error('Invalid driver name');
	var confUtils = new NotifyConferenceUtils();
	var spMap = confUtils.getServiceProviderMap();
	if (!spMap[serviceProviderName])
		throw new Error("We didn't find any service provider with name '" + serviceProviderName + "', please provide valid service provider");
	return spMap[serviceProviderName];
};

/**
 * @param {string} serviceProviderName
 * @returns {global.NotifyConferenceAPI}
 */
ConferenceFactory.createConferenceInstance = function (serviceProviderName) {
	/**
	 * @type {global.NotifyConferenceDriver}
	 */
	var driver = ConferenceFactory.getDriverInstance(serviceProviderName);
	return driver.createConferenceInstance();
};

/**
 * @param {string} serviceProviderName
 * @returns {global.NotifyConferenceParticipant}
 */
ConferenceFactory.createParticipantInstance = function (serviceProviderName) {
	/**
	 * @type {global.NotifyConferenceDriver}
	 */
	var driver = ConferenceFactory.getDriverInstance(serviceProviderName);
	return driver.createParticipantInstance();
};

/**
 * @param {string} serviceProviderName
 * @returns {global.ConferenceEventHandler}
 */
ConferenceFactory.createEventHandlerInstance = function (serviceProviderName) {
	/**
	 * @type {global.NotifyConferenceDriver}
	 */
	var driver = ConferenceFactory.getDriverInstance(serviceProviderName);
	return driver.createEventHandlerInstance();
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-04 05:55:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;22585ce80b0033005775aabcb4673a01&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;54&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConferenceFactory&lt;/sys_name&gt;
        &lt;sys_package display_value="Notify" source="com.snc.notify"&gt;b567f9452f140110d8a4d5f62799b6e4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_22585ce80b0033005775aabcb4673a01&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-11-26 11:43:06&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6846&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:24</sys_created_on>
        <sys_id>d45cc97a2f331110d8a4d5f62799b6f1</sys_id>
        <sys_name>ConferenceFactory</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_d45cc97a2f331110d8a4d5f62799b6f1</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
