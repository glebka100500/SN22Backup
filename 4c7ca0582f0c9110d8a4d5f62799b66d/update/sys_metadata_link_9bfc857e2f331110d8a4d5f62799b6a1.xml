<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8a1a8d33c302210028d7d56bc3d3ae20</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ScrumUserGroupsAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Returns groups name and sysids for scrum users.&lt;/description&gt;
        &lt;name&gt;ScrumUserGroupsAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ScrumUserGroupsAjax = Class.create();

ScrumUserGroupsAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {


    _getRoleIds: function() {
        var arrRoleNames = ["scrum_user", "scrum_admin", "scrum_release_planner", "scrum_sprint_planner", "scrum_story_creator"];
        var arrRoleIds = [];
        var record = new GlideRecord("sys_user_role");
        record.addQuery("name", "IN", arrRoleNames.join(","));
        record.query();
        while (record.next())
            arrRoleIds.push(record.sys_id + "");
        return arrRoleIds;
    },

    _hasScrumRole: function(roleSysId, arrScrumRoleSysIds) {
        // Case1: the passed in role is scrum role
        for (var index = 0; index &lt; arrScrumRoleSysIds.length; ++index)
            if (arrScrumRoleSysIds[index] == "" + roleSysId)
                return true;
        return false;
    },

    _getAllroleIds: function(arrScrumRoleIds) {
        var record = new GlideRecord("sys_user_role_contains");
        record.addQuery("contains", "IN", arrScrumRoleIds.join(","));
        record.query();
        while (record.next())
            arrScrumRoleIds.push(record.role + "");
        return arrScrumRoleIds;
    },

    _getGroupIds: function() {
        var arrScrumRoleIds = this._getRoleIds();
        arrScrumRoleIds = this._getAllroleIds(arrScrumRoleIds);
        var arrGroupIds = [];
        var record = new GlideRecord("sys_group_has_role");
        record.addQuery("role", "IN", arrScrumRoleIds.join(","));
        record.query();
        while (record.next()) {
            arrGroupIds.push(record.group + "");
        }
        return arrGroupIds;
    },

    getGroupInfo: function() {
        var arrGroupIds = this._getGroupIds();
        var record = new GlideRecord("sys_user_group");
        record.addQuery("sys_id", "IN", arrGroupIds.join(","));
        record.query();
        while (record.next()) {
            this._addGroup(record.name, record.sys_id);
        }
    },

    _addGroup: function(name, sysid) {
        this._addCustomItem('group', name, sysid);
    },

    _addCustomItem: function(itemName, name, sysid) {
        var item = this.newItem(itemName);
        item.setAttribute("name", name);
        item.setAttribute("sysid", sysid);
    },

    _addTeam: function(name, sysid) {
        this._addCustomItem('team', name, sysid);
    },

    getTeamInfo: function () {
        var scrumReleaseTeamSysId = this.getParameter('sysparm_scrum_team_sysid');
        var recTeam = new GlideRecord ("scrum_pp_team");
        recTeam.addQuery("sys_id", "!=", scrumReleaseTeamSysId);
        recTeam.query ();
        while (recTeam.next ()) {
            this._addTeamInfo(recTeam);
        }
    },

    _addTeamInfo: function(teamRecord) {
        var recTeamName = new GlideRecord ("scrum_pp_team_name");
        if (recTeamName.get(teamRecord.getValue('team_name'))) {
            if( recTeamName.getValue('name') ) {
                this._addTeam(recTeamName.getValue('name'), teamRecord.getValue('sys_id'));
            }
        }
    },

    type: 'ScrumUserGroupsAjax'

});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-07-28 08:15:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8a1a8d33c302210028d7d56bc3d3ae20&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ScrumUserGroupsAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="Agile Development" source="com.snc.sdlc.scrum.pp"&gt;4e159f242fc10110d8a4d5f62799b627&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8a1a8d33c302210028d7d56bc3d3ae20&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-09-25 10:41:59&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3098&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:20</sys_created_on>
        <sys_id>9bfc857e2f331110d8a4d5f62799b6a1</sys_id>
        <sys_name>ScrumUserGroupsAjax</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_9bfc857e2f331110d8a4d5f62799b6a1</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
