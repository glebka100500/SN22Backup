<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1606e9622f600110d8a4d5f62799b62c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UserGroupFilterUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UserGroupFilterUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UserGroupFilterUtil = Class.create();
UserGroupFilterUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	
	initialize: function () {
		AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		this.getUserItilGroups = this.getUserItilGroups.bind(this);
		this.filterItilGroups = this.filterItilGroups.bind(this);

	},
	
	getUserItilGroups: function (groupType){
		var groups = gs.getUser().getMyGroups().toArray();
		if (groupType == "")
			return groups.filter(this.filterItilGroups);
		else {
			var result = [];
			for (var i in groups){
				if (this.filterGroupsByType(groupType, groups[i]))
					result.push(groups[i]);
			}
			return result;
		}
	},
	
	filterItilGroups: function (group){
		return this.filterGroupsByType('itil', group);	
	},
	
	filterGroupsByType: function (typeName, group){ // sys id of group of type name
		var grGroup = new GlideRecord('sys_user_group');
		grGroup.addQuery('sys_id', group.toString());
		grGroup.query();
		if (grGroup.next()){ // check if this group contains a type
			var groupTypes = grGroup.type.toString().split(','); // toArray() doesn't work, this is alternative
			for (var type in groupTypes){
				var grType = new GlideRecord('sys_user_group_type');
				grType.query('sys_id', groupTypes[type]);
				grType.query();
				if (grType.next() &amp;&amp; grType.name == typeName){
					return true;
				}
			}
		}
		return false;
	},
    type: 'UserGroupFilterUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-12-23 18:22:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1606e9622f600110d8a4d5f62799b62c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;59&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UserGroupFilterUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1606e9622f600110d8a4d5f62799b62c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-12-30 14:19:26&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1483&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:08</sys_created_on>
        <sys_id>9c4c457a2f331110d8a4d5f62799b692</sys_id>
        <sys_name>UserGroupFilterUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_9c4c457a2f331110d8a4d5f62799b692</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
