<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>49a98ae33b1323006fa0870044efc4d2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBScopedKnowledgeSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This is a helper class for scoped ACLs to evaluate access to knowledge base and articles.&lt;/description&gt;
        &lt;name&gt;KBScopedKnowledgeSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBScopedKnowledgeSNC = Class.create();
KBScopedKnowledgeSNC.prototype = Object.extendsObject(KBCommon, {
	
    initialize: function() {
    },

	/**
	 * Can the logged in user create knowledge base.
	 *
	 * @param GlideRecord: kb_knowledge_base
	 * @return Boolean: true if logged in user can create knowledge base
	 */
	canCreateKnowledgeBase: function(knowledgeBaseGr) {
		var kbKnowledgeBase = new global.KBKnowledgeBase();
		return kbKnowledgeBase.canCreate(knowledgeBaseGr);
	},

	/**
	 * Can the logged in user read knowledge base contents.
	 *
	 * @param GlideRecord: kb_knowledge_base
	 * @return Boolean: true if logged in user can read knowledge base
	 */
	canReadKnowledgeBase: function(knowledgeBaseGr) {
		var kbKnowledgeBase = new global.KBKnowledgeBase();
		return kbKnowledgeBase.canRead(knowledgeBaseGr);
	},

	/**
	 * Only manager and owner of the knowledge base is allowed to update knowledge base
	 *
	 * @param GlideRecord: kb_knowledge_base
	 * @return Boolean: true if logged in user update knowledge base
	 */
	canWriteKnowledgeBase: function(knowledgeBaseGr) {
		var kbKnowledgeBase = new global.KBKnowledgeBase();
		return kbKnowledgeBase.canWrite(knowledgeBaseGr);
	},

	/**
	 * No one is allowed to allowed to delete a knowledge base.
	 *
	 * @param GlideRecord: kb_knowledge_base
	 * @return Boolean: true if logged in user can delete knowledge base
	 */
	canDeleteKnowledgeBase: function(knowledgeBaseGr) {
		var kbKnowledgeBase = new global.KBKnowledgeBase();
		return kbKnowledgeBase.canDelete(knowledgeBaseGr);
	},
	
	/**
	 * Determine if the logged in user has manager right to the knowledge base
	 *
	 * @param GlideRecord kb_knowledge_base or kb_knowledge
	 *
	 * @return boolean
	 */
	canManageKnowledgeBase: function(knowledgeBaseGr) {
		return new global.KnowledgeAccess().managerRights(knowledgeBaseGr);
	},

	/**
	 * Can the logged in user create article.
	 *
	 * @param GlideRecord: kb_knowledge
	 * @return Boolean: true if logged in user can create article
	 */
	canCreateArticle: function(knowledgeGr) {
		var kbKnowledge = new global.KBKnowledge();
		return kbKnowledge.canCreate(knowledgeGr);
	},

	/**
	 * Can the logged in user read article.
	 *
	 * @param GlideRecord: kb_knowledge
	 * @return Boolean: true if logged in user can read article
	 */
	canReadArticle: function(knowledgeGr) {
		var kbKnowledge = new global.KBKnowledge();
		if(kbKnowledge.isMultipleKnowledgeUpdate())
			return true;
		else if (knowledgeGr.isNewRecord()) 
			return true;
		else if (!this.isPartialRecord(knowledgeGr))
			return kbKnowledge.canRead(knowledgeGr);
		else if(!gs.nil(knowledgeGr.sys_id)) {
			var article = new GlideRecord("kb_knowledge");
			if(article.get(knowledgeGr.sys_id))
				return kbKnowledge.canRead(article);
		}
		return false;
	},

	/**
	 * Can the logged in user update article.
	 *
	 * @param GlideRecord: kb_knowledge
	 * @return Boolean: true if logged in can user update article
	 */
	canWriteArticle: function(knowledgeGr) {
		var kbKnowledge = new global.KBKnowledge();
		if(kbKnowledge.isMultipleKnowledgeUpdate())
			return true;
		else 
			return kbKnowledge.canWrite(knowledgeGr);
	},

	/**
	 * Can the logged in user update article based on the user criteria configuration.
	 *
	 * @param GlideRecord: kb_knowledge_base
	 * @return Boolean: can logged in user update the kb_knowledge_base
	 */
	canDeleteArticle: function(knowledgeGr) {
		var kbKnowledge = new global.KBKnowledge();
		return kbKnowledge.canDelete(knowledgeGr);
	},
	
    type: 'KBScopedKnowledgeSNC'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-02-04 15:16:45&lt;/sys_created_on&gt;
        &lt;sys_id&gt;49a98ae33b1323006fa0870044efc4d2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBScopedKnowledgeSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;e011410f6d2620100acb70b353433002&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_49a98ae33b1323006fa0870044efc4d2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-20 08:55:02&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3543&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:17</sys_created_on>
        <sys_id>958c4dba2f331110d8a4d5f62799b61a</sys_id>
        <sys_name>KBScopedKnowledgeSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_958c4dba2f331110d8a4d5f62799b61a</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
