<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>68803b19537b2300b18addeeff7b128b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OnCallConferenceParticipants&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.ConferenceParticipants&lt;/description&gt;
        &lt;name&gt;OnCallConferenceParticipants&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * @typedef {{
			table: string,
			sysId: string,
			confId?: string,
			}} InputData
 * @typedef {Array&lt;{
					 name: string,
					 id: string,
					 phoneNumber?: string,
					 showGroupName?: boolean,
					 users?: Array&lt;{name: string, id: string, phoneNumber?: string}&gt;}&gt;} ParticipantData
 * @typedef {{table: string, sysId: string, confId: string, items: ParticipantData}} ConfInputData
*/
var OnCallConferenceParticipants = Class.create();
OnCallConferenceParticipants.prototype = {
    initialize: function() {
        this.ocr = new OnCallRotation();
        this.notifyUtils = new global.NotifyUtils();
        this.onCallNotifyUtil = new global.OnCallNotifyUtil();
    },

    /**
     * @param {string} table
     * @param {string} id
     * @returns {GlideRecord &amp; RecordMetaInfo}
     */
    _getRecordBySysID: function(table, id) {
        var record = new GlideRecord(table);
        if (record.get(id))
            return record;
    },

    /**
     * @param {string} id
     * @returns {SysUserGR}
     */
    _getUserByID: function(id) {
        return this._getRecordBySysID('sys_user', id);
    },

    /**
     * @param {string} groupId
     */
    _whoIsOnCall: function(groupId) {

        if (groupId) {
            var escalatees = this.ocr.getEscalatees(groupId);
            for (var i = 0; i &lt; escalatees.length; i++) {
                var userGr = this._getUserByID(escalatees[i].userId);
                if (!userGr)
                    continue;
                escalatees[i].name = userGr.name + "";
                escalatees[i].rosterName = this._getRosterName(escalatees[i].roster);
            }
            return escalatees;
        }
    },

    _getRosterName: function(rosterId) {
        var rosterGr = new GlideRecord('cmn_rota_roster');
        if (rosterGr.get(rosterId))
            return rosterGr.name;
    },

    /**
     * @param {SysUserGroupGR} groupGr
     * @param {string} tableName
     * @param {string} sysId
     * @returns {Array&lt;any&gt;}
     */
    _getOnCallResourcesForGroup: function(groupGr, tableName, sysId, type) {
        var onCallResources = [];
        if (!groupGr)
            return onCallResources;
        var gr = new GlideRecord(tableName);
        if (!gr.get(sysId))
            return onCallResources;

        if (!this._groupHasRotas(groupGr))
            return onCallResources;
        var escalatees = this._whoIsOnCall(groupGr.sys_id + "");
        var groupName = groupGr.name + '';
        var result = [];
        // iterate over contacts in the escalation plan
        var userObject;

        var escalationLevel = this.onCallNotifyUtil.getOnCallEscalationLevel(tableName);
        var displayPlanSize = ((escalationLevel == -1) || escalationLevel &gt;= escalatees.length) ? escalatees.length : escalationLevel;
        for (var i = 0; i &lt; displayPlanSize; i++) {
            var contact = escalatees[i];
            userObject = this._getUserContactObject(contact.userId + '', contact.rosterName, groupName, type);
            if (userObject) {
                result.push(userObject);
            }
            var userIds = contact.userIds;
            if (userIds) {
                for (var k = 0; k &lt; userIds.length; k++) {
                    userObject = this._getUserContactObject(userIds[k], contact.rosterName, groupName, type);
                    if (userObject) {
                        result.push(userObject);
                    }
                }
            }
        }
        return result;
    },

    _getUserContactObject: function(userId, rosterName, groupName, type) {
        rosterName = rosterName || '';
        var userGr = this._getUserByID(userId);
        if (!userGr)
            return;
        if (!userGr.active)
            return;

        var name;
        if (rosterName)
            name = gs.getMessage("{0} ({1} {2})", [userGr.getDisplayValue(), rosterName, groupName]);
        else
            name = gs.getMessage("{0} ({1})", [userGr.getDisplayValue(), groupName]);

        var numbers = this.notifyUtils.getUniquePhoneNumbersForUsersAndGroups([], [userId], [], type);
        return {
            name: name,
            id: userId,
            phoneNumber: numbers.length &gt; 0 ? numbers[0] : ''
        };
    },

    /**
     * @param {SysUserGroupGR} groupGr
     * @returns {boolean}
     */
    _groupHasRotas: function(groupGr) {
        if (groupGr) {
            var rota = new GlideRecord('cmn_rota');
            rota.addActiveQuery();
            rota.addQuery('group', groupGr.sys_id + '');
            rota.query();
            return rota.next();
        }
        return false;
    },

    /**
     * @param {string} groupId
     * @param {string} tableName
     * @param {string} sysId
     */
    _getOnCallResourcesForGroupId: function(groupId, tableName, sysId, type) {
        var gr = new GlideRecord("sys_user_group");
        if (!gr.get(groupId))
            return [];
        return this._getOnCallResourcesForGroup(gr, tableName, sysId, type);
    },

    /**
     * @param {InputData} inputData
     * @param {ParticipantData} previousContacts
     * @returns {ParticipantData}
     */
    getContacts: function(inputData, previousContacts, type) {
        return []; // On-Call has no users to resolve to for a given context record
    },

    /**
     * @param {string} groupId
     * @param {InputData} inputData
     * @param {ParticipantData} groupData
     * @returns {ParticipantData}
     */
    getGroupDetails: function(groupId, inputData, alreadyGotGroupDetails, type) {

        if (alreadyGotGroupDetails &amp;&amp; alreadyGotGroupDetails.users &amp;&amp; alreadyGotGroupDetails.users.length) // Some extension already resolved the members?
            // This extension is non-cooperative and empties out that list.
            alreadyGotGroupDetails.users.splice(0, alreadyGotGroupDetails.users.length);

        var response = {};
        var users;
        var grpGr = new GlideRecord("sys_user_group");
        if (!grpGr.get(groupId))
            return;

        var followOnCallEscalationEnabled = this.onCallNotifyUtil.isFollowOnCallEscalationEnabled(inputData.table);
        if (followOnCallEscalationEnabled) {
            var currentOncallEscalatees = [];
            if (this.ocr &amp;&amp; this._groupHasRotas(grpGr)) {
                /* IMP NOTE: depth should always be 1 (one) as followOnCallEscalation is enabled. */
                var depth = 1;
                var taskGr = new GlideRecord(inputData.table);
                if (!taskGr.get(inputData.sysId))
                    return;
                var escalationPlan = this.ocr.getEscalationPlan(groupId, null, "", taskGr);
                var planSize = escalationPlan.length;
                var displayPlanSize = ((depth == -1) || (depth &gt;= planSize)) ? planSize : depth;

                for (var i = 0; i &lt; displayPlanSize; i++) {
                    var escalatee = escalationPlan[i];
                    this.onCallNotifyUtil.addEscalatee(escalatee, currentOncallEscalatees, grpGr, followOnCallEscalationEnabled);
                    for (var j = 0; j &lt; escalatee.additionalEscalatees.length; j++) {
                        var additionalEscalatee = escalatee.additionalEscalatees[j];
                        this.onCallNotifyUtil.addEscalatee(additionalEscalatee, currentOncallEscalatees, grpGr, followOnCallEscalationEnabled);
                    }
                }
                users = this.onCallNotifyUtil.fetchUsersOnEscalateesPreferences(groupId, inputData, currentOncallEscalatees, type);
            }
            response = {
                showGroupName: this.onCallNotifyUtil.isFollowOnCallEscalationEnabled(inputData.table),
                users: users
            };
        } else {
            response = {
                users: this._getOnCallResourcesForGroupId(groupId, inputData.table, inputData.sysId, type)
            };
        }
        return response;

    },

    /**
     * @param {GlideRecord} sourceGr
     * @param {string} userId
     */
    isConferenceLeader: function(sourceGr, /* optional */ userId) {},

    /**
     * The extension point implementations are invoked in no specific order, the first one to respond
     * its response will be taken. If no implementations return then default notify for task number will
     * will be used.
     * @param {GlideRecord} sourceGr
     * @returns (string} undefined / a valid Notify number as string
     */
    getNotifyNumber: function(sourceGr) {},

    /**
     * @param {string} actionName
     * @param {GlideRecord} sourceGr
     * @param {string} userId
     */
    isActionAllowed: function(actionName, sourceGr, /* Optional */ userId) {},

    type: 'OnCallConferenceParticipants'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-02-22 19:14:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;68803b19537b2300b18addeeff7b128b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OnCallConferenceParticipants&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_68803b19537b2300b18addeeff7b128b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-07 02:10:53&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;8731&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:09</sys_created_on>
        <sys_id>86bc4dfa2f331110d8a4d5f62799b6a6</sys_id>
        <sys_name>OnCallConferenceParticipants</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_86bc4dfa2f331110d8a4d5f62799b6a6</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
