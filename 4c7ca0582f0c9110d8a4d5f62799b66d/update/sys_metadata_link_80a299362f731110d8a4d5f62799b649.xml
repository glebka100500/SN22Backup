<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>24013a82f33102002e6bae4716612be2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;true&lt;/before&gt;
        &lt;description&gt;This script performs cleanup of svc_ci_assoc and svc_rel_assoc in order to remove duplicate records (same ci_id/relation_id and service_id) before setting unique composite index&lt;/description&gt;
        &lt;name&gt;Remove duplications from assoc. tables&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[processAssocTable('svc_ci_assoc', 'ci_id');
processAssocTable('svc_rel_assoc', 'relation_id');

function processAssocTable(tableName, keyAttr) {
	if (isTableExist(tableName)) {
		if (!isCompositeIndexExist(tableName, keyAttr)) {
			var agg = getDuplications(tableName, keyAttr);
			deleteDuplications(agg, tableName);
		}else
			gs.log('Composite unique index already exists for ' + tableName);
	}
}

//This boolean function checks if given table exists in DB
function isTableExist(tableName) {
	var gr = new GlideRecord(tableName);
	return gr.isValid();
}

//This boolean function checks if unique composite index
//with field 'service_id' and given field (either 'ci_id' or 'relation_id')
//exists in DB table
function isCompositeIndexExist(tableName, keyAttr) {
	var td = GlideTableDescriptor.get(tableName);
	var allIndexDescrMap = td.getIndexDescriptors();
	var res = 0;
	
	var indexDescriptor;
	var indexFields;
	var indexField;
	var attrCount;
	var i;
	
	for (var iter = allIndexDescrMap.values().iterator(); iter.hasNext();) {
		indexDescriptor = iter.next();
		indexFields = indexDescriptor.getFields();

		if (!indexDescriptor.isUnique() || indexFields.size() != 2)
			continue;
		
		attrCount = 0;
		for (i = 0; i &lt; indexFields.size(); i++) {
			indexField = indexFields.get(i).toLowerCase();
			if (indexField == 'service_id' || indexField == keyAttr)
				attrCount++;
		}
		if (attrCount == 2)
			res = 1;
	}
	return res;
}

//This function obtains all duplication (i.e. same service_id and ci_id/relation_id)
//that weill prevent from applying new unique index
//It issues SQL query: select service_id, ci_id, count(*) from svc_ci_id group by (service_id, ci_id) having (count(*) &gt; 1)
function getDuplications(tableName, keyAttr) {
	var agg = new GlideAggregate(tableName);
	agg.addAggregate('COUNT', null);
	agg.groupBy('service_id');
	agg.groupBy(keyAttr);
	agg.addHaving('COUNT', '&gt;', '1');
	agg.query();
    return agg;
}

//This function deletes all duplication (i.e. same service_id and ci_id/relation_id)
//that weill prevent from applying new unique index
//It leaves only one of each such group
function deleteDuplications(agg, tableName) {
	var toDelete = [];
	var count = 0;
	var total = 0;
	
	var allFields;
	var gr, grToProcess;
	var limit;
	var field;
	var i,n;

	while (agg.next()){
		allFields = agg.getFields();
		gr = new GlideRecord(tableName);
		limit = parseInt(agg.getAggregate('COUNT', null))-1;
		total += limit;
		gr.setLimit(limit);
		for (i = 0; i &lt; allFields.size(); i++) {
			field = allFields.get(i);
			if (!field.hasValue())
				continue;
			gr.addQuery(field.getName(), agg.getValue(field.getName()));
		}
		toDelete[count++] = gr;
	}

	for (n = 0; n &lt; count; n++) {
		grToProcess = toDelete[n];
		grToProcess.query();
		grToProcess.deleteMultiple();
	}
	if (total &gt; 0)
		gs.log(total.toString() + ' records deleted from ' + tableName);
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-08-12 11:52:54&lt;/sys_created_on&gt;
        &lt;sys_id&gt;24013a82f33102002e6bae4716612be2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;62&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Cleanup of svc tables&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;c60efc0f6d2220100acb70b3534330c0&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_24013a82f33102002e6bae4716612be2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2015-08-13 11:23:33&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:53:58</sys_created_on>
        <sys_id>80a299362f731110d8a4d5f62799b649</sys_id>
        <sys_name>Remove duplications from assoc. tables</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_80a299362f731110d8a4d5f62799b649</sys_update_name>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
