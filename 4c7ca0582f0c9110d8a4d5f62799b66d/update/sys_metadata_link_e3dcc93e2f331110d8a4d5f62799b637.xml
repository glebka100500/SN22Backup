<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7d48846573003300b39f84c2c4f6a79f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.InstanceCloneUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;InstanceCloneUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InstanceCloneUtil = Class.create();
InstanceCloneUtil.prototype = {
	initialize: function() {
	},

	type: 'InstanceCloneUtil'
};

InstanceCloneUtil.generateRecurringClones = function(parentCloneRec) {
	if(gs.nil(parentCloneRec)) 
		return;

	var cloneFrequency = parentCloneRec.getValue('clone_frequency');
	if(gs.nil(cloneFrequency) || parentCloneRec.getValue('recurring') == 0) 
		return;
	
	var cloneCount = 1;
	var maxOccurrences = parentCloneRec.getValue('occurrences');
	var cloneRequestedTime = parentCloneRec.getValue('scheduled');
	if(gs.nil(cloneRequestedTime)) 
		cloneRequestedTime = new GlideDateTime();

	var cloneScheduledTime = new GlideDateTime(cloneRequestedTime);

	if(gs.nil(maxOccurrences) || maxOccurrences == 1) 
		return;

	var upperBoundForMaxOccurrences = 50;// Never allow more than upperBoundForMaxOccurrences clones to be scheduled via recurring

	while(cloneCount &lt; maxOccurrences &amp;&amp; cloneCount &lt;= upperBoundForMaxOccurrences) {

		if(cloneFrequency == 1) 
			cloneScheduledTime.addDaysUTC(7);
		else if(cloneFrequency == 2) 
			cloneScheduledTime.addDaysUTC(14);
		else if(cloneFrequency == 3) 
			cloneScheduledTime.addMonthsUTC(1);
		
		var parentCloneGr = new GlideRecord('clone_instance');
		parentCloneGr.addQuery('sys_id', parentCloneRec.getValue('sys_id'));
		parentCloneGr.query();
		
		if(parentCloneGr.next()) {
			parentCloneGr.setValue('scheduled', cloneScheduledTime);
			parentCloneGr.setValue('parent', parentCloneRec.getValue('sys_id'));
			parentCloneGr.setValue('clone_id', '');
			parentCloneGr.setValue('clone_frequency', '');
			parentCloneGr.insert();
		}
		
		cloneCount ++;
	}
	
	parentCloneRec.setValue('parent', parentCloneRec.getValue('sys_id'));
	parentCloneRec.setWorkflow(false);
	parentCloneRec.update();
};

InstanceCloneUtil.getOptionsJson = function(defaultOptions) {
	var options = {};

	if(gs.nil(defaultOptions)) 
		return '';

	for(var key in defaultOptions) {
		var label = defaultOptions[key];
		var value = defaultOptions[key];
		options[label] = value;
	}

	return options;
};

InstanceCloneUtil.getRecurringCloneEndDate = function(cloneRequestedTime, cloneFrequency, maxOccurrences) {
	if(gs.nil(cloneFrequency) || gs.nil(maxOccurrences)) 
		return;

	if(gs.nil(cloneRequestedTime)) 
		cloneRequestedTime = new GlideDateTime();

	var currentScheduledDate = new GlideDateTime(cloneRequestedTime),
		multiplier = maxOccurrences - 1;
	
	if(maxOccurrences &lt;= 1)
		return currentScheduledDate.getDate().getDisplayValue();

	if(cloneFrequency == 1) 
		currentScheduledDate.addDaysUTC(7 * multiplier);
	else if(cloneFrequency == 2) 
		currentScheduledDate.addDaysUTC(14 * multiplier);
	else if (cloneFrequency == 3) 
		currentScheduledDate.addMonthsUTC(multiplier);

	return currentScheduledDate.getDate().getDisplayValue();
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-07 07:15:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7d48846573003300b39f84c2c4f6a79f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InstanceCloneUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="High Availability Cloning" source="com.snc.ha"&gt;e9adf40b6d2220100acb70b35343303a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7d48846573003300b39f84c2c4f6a79f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-02 18:38:50&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2798&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:48</sys_created_on>
        <sys_id>e3dcc93e2f331110d8a4d5f62799b637</sys_id>
        <sys_name>InstanceCloneUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e3dcc93e2f331110d8a4d5f62799b637</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
