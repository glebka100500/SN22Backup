<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>10327958533201104ea9ddeeff7b1202</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SentimentAnalysisOutputProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SentimentAnalysisOutputProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[// Template script to process response from ONE API call. 
// For every service plan in one_api_service_plan table, there should be a output processor script.

var SentimentAnalysisOutputProcessor = Class.create();
SentimentAnalysisOutputProcessor.prototype = {
    initialize: function() {
        this.LOGGER = new SentimentAnalysisLogger("SentimentAnalysis");
    },

    // Mandatory function in every processor. This method is called after a completed response is received from One API invocation.
    processCompleted: function(oneApiResponse) {
        this.LOGGER.info('SentimentAnalysisOutputProcessor input oneApiResponse - {0}', JSON.stringify(oneApiResponse));
        var SentimentAnalysisfeature = 'Sentiment Analysis';
        var feature = oneApiResponse.features[SentimentAnalysisfeature];

        if (feature) {
            this.LOGGER.info('SentimentAnalysisOutputProcessor input feature - {0}', JSON.stringify(feature));
            var result = feature.result;
            var conversationId = result.conversationId;
            var factor = result.factor;
            var conversationScore = 0;
            var sentimentScore = result.sentimentScore;
            if (sentimentScore) {

                var messageIds = Object.keys(sentimentScore);
                var n = messageIds.length;

                for (var i = 0; i &lt; n; i++) {
                    var key = messageIds[i];
                    var normalisedSentiment = sn_cs.VASystemObject.getSentimentNormalisedScore(factor, sentimentScore[key]);
                    if (normalisedSentiment) {
                        normalisedSentiment = JSON.parse(normalisedSentiment);
                        conversationScore += normalisedSentiment.score;
                        new global.SentimentUtil().updateMessageSentiment(key, normalisedSentiment.score, normalisedSentiment.sentiment);
                    }

                }

                var conversationSentiment = sn_cs.VASystemObject.getSentimentNormalisedScore(n, conversationScore);
                if (conversationSentiment) {
                    conversationSentiment = JSON.parse(conversationSentiment);
                    new global.SentimentUtil().updateConversationSentiment(conversationId, conversationSentiment.score, conversationSentiment.sentiment);
                }

                this.LOGGER.info('SentimentAnalysisOutputProcessor updated sentiment successfully');
            }
        }

    },

    // Mandatory function in every processor. This method is called after an error response is received from One API invocation.
    processErrored: function(contextId, documentId, error) {
        this.LOGGER.error('Error occured while runnig one api runner - {0}', error);
    },

    // Mandatory function in every processor. This method is called if the one api call is cancelled.
    processCancelled: function(contextId, documentId) {
        this.LOGGER.info('Process cancelled');
    },

    type: 'SentimentAnalysisOutputProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-07 15:33:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;10327958533201104ea9ddeeff7b1202&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SentimentAnalysisOutputProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Sentiment Analysis" source="com.glide.cs.sentiment"&gt;ddd395252f221110d8a4d5f62799b608&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_10327958533201104ea9ddeeff7b1202&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-19 08:51:42&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2999&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:02</sys_created_on>
        <sys_id>3a3cc17a2f331110d8a4d5f62799b62e</sys_id>
        <sys_name>SentimentAnalysisOutputProcessor</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_3a3cc17a2f331110d8a4d5f62799b62e</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
