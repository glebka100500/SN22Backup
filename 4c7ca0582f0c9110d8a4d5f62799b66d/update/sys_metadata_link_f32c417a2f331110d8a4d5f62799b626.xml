<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>055e19b20b21230001d36c4d37673ae9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MultiSSOv2_SAML2_internal&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Logic to process SAML 2.0 Update 1 authentication for a multi-tenant single sign-on.&lt;/description&gt;
        &lt;name&gt;MultiSSOv2_SAML2_internal&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");
gs.include("SAML2_custom");

var MultiSSOv2_SAML2_internal = Class.create();
MultiSSOv2_SAML2_internal.prototype = Object.extend(new MultiSSO_Abstract_Core(), {

    initialize: function() {
        this.propertiesGR = null;
        this.SAML2 = new SAML2_custom();
    },

    /*
    return user_name or error code
    */
    process: function() {
        try {
            this.redirectURL = null;
            this.requestType = "request";
            return this.processSAMLMessage();
        } finally {
            this.setActionRedirectURL();
        }
    },
    setActionRedirectURL: function() {
        var url = null;
        if (this.SAML2.isTestSAMLConnection()) {
            url = SNC.GlideSAML2Tester.getActionRedirectURL(this.requestType);
        } else if (this.redirectURL) {
            url = this.redirectURL;
        }
        if (url) {
            this.logDebug("We will be redirecting user to the URL: " + url);
            action.setRedirect(url);
        }
    },

    getSAML2: function() {
        return this.SAML2;
    },

    //override parent
    setSSORecord: function(gr) {
        this.propertiesGR = gr;
        this.SAML2.setSSORecord(this.propertiesGR);
        // set it to session so the response can find the right idp
        if (!this.SAML2.isTestSAMLConnection()) {
            var request = GlideTransaction.get().getRequest();
            request.getSession().setAttribute(SNC.SSOUtils.SSOID(), this.propertiesGR.getUniqueValue());
        }
    },

    //return user_name or errcode including 'failed_authentication', 'logout_success'
    processSAMLMessage: function() {
        if (this.SAML2.isSAMLLoginResponse()) {
            var error = this.SAML2.doValidateLoginResponse();

            var errorUrl = this.SAML2.getErrorURL();
            var subject = this.SAML2.getSubjectName();
            if (subject &amp;&amp; !errorUrl) {
                return this.loginProcess(subject);
            }

            if (errorUrl) {
                return this.SAML2.getErrorURL(); //value of ssorecord.failed_requirement_redirect
            }

            return error;
        } else if (this.SAML2.isSAMLLogoutResponse()) {
            this.requestType = "logoutResponse";
            return this.SAML2.doValidateLogoutResponse();
        } else {
            return this.SAML2.doAuthnRequest();
        }
    },

    loginProcess: function(subjectUserName) {
        return this.loginUser(subjectUserName);
    },

    getResponseElement: function() {
        return this.SAML2.getResponseElement();
    },

    //return user_name or 'failed_authentication'
    loginUser: function(subjectUserName) {
        var eventLogParm1 = "user_name=" + subjectUserName;
        var respType = this.SAML2.isIdPInitiated() ? "IdP" : "SP";
        var eventLogParm2 = "initiator=" + respType + ",multisso=true,idpsysid=" + this.propGR.getUniqueValue();
        var userField = this.propertiesGR.user_field;

        if (subjectUserName == null) {
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", "", eventLogParm2);
            return this.propertiesGR.failed_requirement_redirect;
        }

        if (!SNC.AuthenticationHelper.isUsernameValid(subjectUserName)) {
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
            this.SAML2.logError(gs.getMessage("Subject Username validation failed"));
            return "failed_authentication";
        }

        if (!userField || userField == '') {
            var errorMessage = gs.getMessage("User Field validation failed");
            SNC.SSOUtils.writeLogSummary(false, errorMessage, gs.getMessage("Ensure that the 'User Field' field is not null or blank"));
            this.SAML2.logError(errorMessage);
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
            return "failed_authentication";
        } else if (!GlideTableDescriptor.fieldExists('sys_user', userField)) {
            var errorMessage = gs.getMessage("Invalid User Field. {0} is not a field on the sys_user table.", userField);
            SNC.SSOUtils.writeLogSummary(false, gs.getMessage("User Field validation failed"), errorMessage);
            this.SAML2.logError(errorMessage);
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
            return "failed_authentication";
        }


        var ugr = new GlideRecord("sys_user");
        ugr.addQuery(this.propertiesGR.user_field, subjectUserName);
        ugr.setWorkflow(false);
        ugr.query();
        var foundUser = false;
        while (ugr.next()) {
            if (ugr.getValue("active") != 0) {
                foundUser = true;
                break;
            }
        }
        if (foundUser) {
            if (!(this.SAML2.isTestSAMLConnection() || this.isAutoRedirectIDP(this.propertiesGR.sys_id))) {
                var userSsoSource = ugr.getValue('sso_source');
                var companySysId = ugr.getValue('company');
                if (!GlideStringUtil.nil(userSsoSource)) {
                    var userSso = userSsoSource.split(':');
                    if (!GlideStringUtil.nil(userSso[1]) &amp;&amp; userSso[1] != this.propertiesGR.sys_id) {
                        var errorMessage = gs.getMessage("Ensure that the user you are trying to login is from the correct source, as mentioned in user's sso source field in servicenow instance.");
                        this.SAML2.logError(errorMessage);
                        return;
                    }
                } else if (!GlideStringUtil.nil(companySysId)) {
                    var cgr = new GlideRecord("core_company");
                    cgr.get(companySysId);
                    var companySsoSource = cgr.getValue('sso_source');
                    if (!GlideStringUtil.nil(companySsoSource)) {
                        var companySso = companySsoSource.split(':');
                        if (!GlideStringUtil.nil(companySso[1]) &amp;&amp; companySso[1] != this.propertiesGR.sys_id) {
                            var errorMessage = gs.getMessage("Ensure that the user you are trying to login is from the correct source, as mentioned in company's sso source field for user in servicenow instance.");
                            this.SAML2.logError(errorMessage);
                            return;
                        }
                    }
                }
            }
            this.logDebug("Test connection or auto-redirect IDP, Skipping SSO source field validation.");
            this.importOrUpdateSAMLUser(true);
        } else {
            if (ugr.isValidRecord() &amp;&amp; ugr.getValue("active") == 0) {
                errorMessage = gs.getMessage("User: {0} is not active", subjectUserName);
                this.SAML2.logError(errorMessage);
                SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
                return "failed_authentication";
            }
            if (!this.SAML2.isTestSAMLConnection()) {
                this.importOrUpdateSAMLUser(false);
                ugr.query(); // query again to make sure import is successful
                foundUser = ugr.next();
            }
            if (!foundUser) {
                var errorMessage = gs.getMessage("User: {0} not found", subjectUserName);
                SNC.SSOUtils.writeMultipleLogSummary(false, errorMessage, gs.getMessage("Ensure that the user you are trying the test connection with is present in the system."), 'userField');
                this.SAML2.logError(errorMessage);
                SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
                return "failed_authentication";
            }
        }

        var userName = ugr.getValue("user_name");
        if (GlideStringUtil.nil(userName)) {
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "failure", eventLogParm1, eventLogParm2);
            this.SAML2.logError("user_name value is empty.");
            return "failed_authentication";
        }


        if (this.SAML2.isTestSAMLConnection()) {
            var result = SNC.GlideSAML2Tester.validateUserRecord(ugr);
            if ("failed_authentication" == result) {
                return result;
            }
        }
        if (!this.SAML2.isTestSAMLConnection()) {
			//Fetching redirect url based on whether relay state contains sys_id or url.
			if((this.SAML2.isIdPInitiated() &amp;&amp; GlideStringUtil.nil(this.SAML2.getInResponseTo())) || !GlideProperties.getBoolean("glide.authenticate.sso.saml2.enable_relay_state_with_id", false)) {
				this.redirectURL = request.getSession().getAttribute("SAML_RelayState");				
				if (!this.redirectURL) {				
					this.logDebug("SAML_RelayState is not available in the session, try the RelayState in the request.");	
					this.redirectURL = request.getParameter("RelayState");
				}
			} else {
				//RelayState contains sysID of the requestID record.
				var requestSysID = request.getParameter("RelayState");
				// Get the Relay State for the given SysId/StateId, which was persisted in the DB during SAML request Flow
				this.redirectURL = this.SAML2.getRelayStateById(requestSysID);

				if (!this.redirectURL) {
					this.logDebug("RelayState is not available in the DB for requestID, getting relay state from session");
					this.redirectURL = request.getSession().getAttribute("SAML_RelayState");
				}
			}
			
            SNC.SecurityEventSender.sendLoginGCFEvent("SAML", "success", eventLogParm1, eventLogParm2);
            request.getSession().setAttribute("SAML_RelayState", null);
            // successfully logged in. we need set sso_id cookie
            this.SAML2.saveSSOIdInCookie(this.propertiesGR.sys_id);
            request.getSession().setAttribute("glide.authenticate.multisso.login.method", "saml");
        }
        return userName;
    },

    importOrUpdateSAMLUser: function(isUserUpdate) {
        var samlapi = this.SAML2.getGlideSaml2Api();
        samlapi.loadImportSet(this.getAttributesMap(), isUserUpdate);
    },

    getAttributesMap: function() {
        return this.SAML2.getGlideSaml2Api().calculateResponseAttributes();
    },

    isAutoRedirectIDP: function(sysId) {
        return new SNC.GlideMultiSSO().isAutoRedirectIdp(sysId);
    },

    logDebug: function(msg) {
        this.SAML2.logDebug(msg);
    },

    type: 'MultiSSOv2_SAML2_internal'

});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-11-07 04:05:45&lt;/sys_created_on&gt;
        &lt;sys_id&gt;055e19b20b21230001d36c4d37673ae9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;120&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MultiSSOv2_SAML2_internal&lt;/sys_name&gt;
        &lt;sys_package display_value="Integration - Multiple Provider Single Sign-On (do not activate...use 'Integration - Multiple Provid" source="com.snc.integration.sso.multi"&gt;4762a9692fe21110d8a4d5f62799b613&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_055e19b20b21230001d36c4d37673ae9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-10 06:52:03&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;10509&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:49</sys_created_on>
        <sys_id>f32c417a2f331110d8a4d5f62799b626</sys_id>
        <sys_name>MultiSSOv2_SAML2_internal</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_f32c417a2f331110d8a4d5f62799b626</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
