<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>88bf1a9b7f120300995cbaf8befa91c4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SaOperationsWrapper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SaOperationsWrapper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SaOperationsWrapper = Class.create();
SaOperationsWrapper.prototype = {
    initialize: function (handlerClass) {
        this.handler = new handlerClass();
    },

    process: function (request, response, action, hasBody) {
        //extract parameters from request and create paramsDTO
        var serviceId = '';
        var refererParams = this.getRefererParameters(request);
        var paramsDTO = new SNC.RequestParametersDTO();
        var queryParams = request.queryParams;
        var params = [];
        for (var queryParam in queryParams) {
            if (queryParams.hasOwnProperty(queryParam)) {
                if (queryParam == 'bsId')
                    serviceId = String(queryParams[queryParam]);
                params.push(queryParam);
                paramsDTO.setParameter(queryParam, queryParams[queryParam]);
            }
        }

        if (hasBody) {
            var bodyParams;
            var requestBody = request.body;
            var requestData = requestBody.data; //May be an array or a single object
            if (requestData instanceof Array) {
                bodyParams = requestData[0];
            }
            else {
                bodyParams = requestData;
            }
            for (var bodyParam in bodyParams) {
                if (bodyParams.hasOwnProperty(bodyParam)) {
                    if (queryParam == 'bsId')
                        serviceId = String(bodyParams[bodyParam]);
                    params.push(bodyParam);
                    paramsDTO.setParameter(bodyParam, bodyParams[bodyParam]);
                }
            }
        }


        var responseString = 'FALLBACK';

        if (serviceId.startsWith('PREVIEW')) {
            gs.log('SaOperationsWrapper Preview: ' + serviceId);
            var pmh = new sn_sm_scoped_app.PreviewMapHandler();
            responseString = String(pmh.process(serviceId, action, paramsDTO));
        }

        if (responseString == 'FALLBACK') {
            responseString = String(this.handler.callAction(action, paramsDTO));
            if (action == 'getMap') {
                gs.log('SaOperationsWrapper serviceId: ' + serviceId);
                gs.log('SaOperationsWrapper response: ' + responseString);
            }

        }

        response.setStatus(this.handler.getResponseStatus());
        response.setContentType(this.handler.getResponseContentType());

        var writer = response.getStreamWriter();
        writer.writeString(responseString);
    },

    processStreams: function (request, response, action, hasBody) {
        //extract parameters from request and create paramsDTO
        var paramsDTO = new SNC.RequestParametersDTO();
        var queryParams = request.queryParams;
        for (var queryParam in queryParams) {
            if (queryParams.hasOwnProperty(queryParam))
                paramsDTO.setParameter(queryParam, queryParams[queryParam]);
        }

        if (hasBody) {
            var requestBody = request.body;
            var inputDataStream = requestBody.dataStream;
            var outputStream = response.getStreamWriter();
            this.handler.callActionStream(action, paramsDTO, inputDataStream, outputStream);
        } else {
            this.handler.callActionStream(action, paramsDTO, null, response.getStreamWriter());
        }

        response.setStatus(this.handler.getResponseStatus());

    },


    type: 'SaOperationsWrapper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-11-13 13:09:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;88bf1a9b7f120300995cbaf8befa91c4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SaOperationsWrapper&lt;/sys_name&gt;
        &lt;sys_package display_value="Application Service" source="com.snc.cmdb.it_service"&gt;72b4cdcf6da620100acb70b353433039&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_88bf1a9b7f120300995cbaf8befa91c4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-15 19:16:19&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3427&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:15</sys_created_on>
        <sys_id>cefc457e2f331110d8a4d5f62799b605</sys_id>
        <sys_name>SaOperationsWrapper</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_cefc457e2f331110d8a4d5f62799b605</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
