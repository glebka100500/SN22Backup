<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>97685e2237402000627d8c00dfbe5df0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ServiceRegistryQuery&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Maps Shazzam! service registry query results against a port probe. Child classes provide specifics on mapping.&lt;/description&gt;
        &lt;name&gt;ServiceRegistryQuery&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[// Discovery
/***********************************************************************************************************************
 * Discovery - Service Registry Query
 * Maps Shazzam! service registry query results against a port probe. Child classes provide specifics on mapping.
 * @author Roy Laurie &lt;roy.laurie@service-now.com&gt;
 * @abstract
 **********************************************************************************************************************/
var ServiceRegistryQuery = Class.create();

ServiceRegistryQuery.TABLE = 'service_reg_query';
ServiceRegistryQuery.FIELD_PORT_PROBE = 'port_probe';
ServiceRegistryQuery.ENTRY_CACHE = new SNC.ServiceRegQueryCache();
ServiceRegistryQuery.USE_CACHE = true;

/**
 * Parses an array of ids.
 * @param PortProbe portProbe
 * @return ServiceRegistryQuery[]
 */
ServiceRegistryQuery.findForPortProbe = function(portProbe) {
    var related, registries = [];
    if(ServiceRegistryQuery.USE_CACHE){
        related = ServiceRegistryQuery.ENTRY_CACHE.getForPortProbe(portProbe.sysID);
		
        for (var i = 0; i &lt; related.length; i++)
            registries.push(ServiceRegistryQuery.get(related[i].sys_id));
    } else {
        var related = new GlideRecord(ServiceRegistryQuery.TABLE);
        related.addQuery(ServiceRegistryQuery.FIELD_PORT_PROBE, portProbe.sysID);
        related.query();
        
        while (related.next())
    	    registries.push(ServiceRegistryQuery.get(related));
    }

    return registries; 
};

/**
 * Factory method to retrieve a registry service by id, regardless of child class.
 * @param GlideRecord|string Record or sys id
 * @return ServiceRegistryQuery
 */
ServiceRegistryQuery.get = function(source) {
    if (!source) 
        throw new IllegalArgumentException('Service Registry Query source not specified.');
        
    var baseRecord = null;
    if (source instanceof GlideRecord)
        baseRecord = source;
    else if (ServiceRegistryQuery.USE_CACHE &amp;&amp; typeof source == "string")
        baseRecord = ServiceRegistryQuery.ENTRY_CACHE.getEntry(source);
    
    if  (baseRecord == null) {
        var baseId = '' + source;
        baseRecord = new GlideRecord(ServiceRegistryQuery.TABLE);
        if (!baseRecord.get('sys_id', baseId))
            throw new IllegalArgumentException('Service Registry Query `' + baseId + '` does not exist.');
    }
    
    var table = '' + baseRecord.sys_class_name;
	var childSource = ( table == baseRecord.getTableName() ? baseRecord : '' + baseRecord.sys_id );
    switch (table) {
    case SLPServiceRegistryQuery.TABLE:
        return new SLPServiceRegistryQuery(childSource);
    default:
        throw new IllegalArgumentException('Service Registry Query `' + baseRecord.sys_id + '` uses an invalid child class `' + table + '`.');
    }
};

ServiceRegistryQuery.prototype = Object.extend(new AbstractDBObject(), {
    /**
     * Override in child.
     * @param GlideRecord|string source The record or id
     */
    initialize: function(source) {
        if (source === undefined) // extend properly
            return;
        if (!source)
            throw new IllegalArgumentException('Invalid Service Registry Query source.');
        
        var record = (source instanceof GlideRecord || source instanceof ServiceRegQueryCacheEntry) ? source : this._getRecord(source, ServiceRegistryQuery.TABLE);
            
        if (record === null)
            throw new IllegalArgumentException('Invalid Service Registry Query source.');

        this._sysID = '' + record.sys_id;
    },
    
    /**
     * Creates XML output for Shazzam! port probes.
     * @return string
     */
    toPortProbeXml: function() {
        var xml = '&lt;serviceRegistryQuery querierClassname=\'' + this.getShazzamQuerierClassname() + '\'&gt;';
        var map = this.toPortProbeMap();
        for (var key in map) {
            var value = map[key];
            if (value instanceof Array)
                for (var i = 0, n = value.length; i &lt; n; ++i)
                    xml += this._createXmlElement(key, value);
            else
                xml += this._createXmlElement(key, value);
        }
        
        xml += '&lt;/serviceRegistryQuery&gt;';
        return xml;
    },
    
    _createXmlElement: function(name, value) {
        return '&lt;' + name + '&gt;' + value + '&lt;/' + name + '&gt;';
    },
    
    /**
     * Retrieves an XML.
     * Contract: Child calls super first.
     * @abstract
     */
    toPortProbeMap: function() {
        var map = {};
        return map;
    },
    
    /**
     * @abstract
     * @return string
     */
    getShazzamQuerierClassname: function() {
        throw new UnimplimentedOperationException();
    },
    
    type: 'ServiceRegistryQuery'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2012-02-10 22:08:29&lt;/sys_created_on&gt;
        &lt;sys_id&gt;97685e2237402000627d8c00dfbe5df0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;107&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ServiceRegistryQuery&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Automation" source="com.snc.core.automation"&gt;ee2289476d6620100acb70b3534330ff&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_97685e2237402000627d8c00dfbe5df0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;scott.marshall&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2013-06-24 21:39:14&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4729&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:56</sys_created_on>
        <sys_id>002dcd7e2f331110d8a4d5f62799b6e4</sys_id>
        <sys_name>ServiceRegistryQuery</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_002dcd7e2f331110d8a4d5f62799b6e4</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
