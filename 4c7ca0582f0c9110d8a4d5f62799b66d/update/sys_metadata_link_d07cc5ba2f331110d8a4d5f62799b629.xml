<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3ade1dc037330200455726877e41f19d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PlannedTaskConsoleMetadata&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PlannedTaskConsoleMetadata&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PlannedTaskConsoleMetadata = Class.create();
PlannedTaskConsoleMetadata.prototype = {
    initialize: function(consoleId) {
		this.console = new PlannedTaskCustomConsole(consoleId);
    },
	
	getCurrencyCode: function() {
		if ( GlidePluginManager.isActive('com.snc.financial_planning_pmo') ) 
			return PPMCurrencyHelper.defaultCurrencySymbol();
		else {
			var currencyCode;
			if( GlidePropertiesDB.get('glide.i18n.single_currency') == 'true' ) 
				currencyCode = GlidePropertiesDB.get('glide.i18n.single_currency.code');
			if (!currencyCode) 
				currencyCode = 'USD';
			var currencyTypes = new GlideRecord('fx_currency');
			currencyTypes.addQuery('code', currencyCode);
			currencyTypes.query();
			currencyTypes.next();
			return currencyTypes.symbol + '';
		}			
	},
    
	 portalMetadata: function(entity,context) {		
		var columnConfig = (new SNC.PlannedTaskAPI()).entityMetadata(entity, context);
        columnConfig = (new JSON()).decode(columnConfig);
		
		var glideSession = gs.getSession();
		 
        return {
            columnConfig: columnConfig,
            tooltipConfig: ['state', 'time_constraint', 'start_date', 'end_date', 'duration', 'percent_complete'],
            workbenchUrl: '#',
            canAddPhase: false,
            currencySymbol: this.getCurrencyCode(),
            timeZone: glideSession.getTimeZoneName(),
            brMode: false,
            calculation_type: "automatic",
			childSysClass: "planned_task",
			title: this.console.name(),
			dateFormat: gs.getDateFormat(),
			dateTimeFormat: gs.getDateTimeFormat()
        };
    },
	
    metadata: function() {		
		var columnConfig = (new SNC.PlannedTaskAPI()).entityMetadata('pm_project', 'my_gantt');
        columnConfig = (new JSON()).decode(columnConfig);
		
		var glideSession = gs.getSession();
		
		return {
            columnConfig: columnConfig,
            tooltipConfig: ['state', 'time_constraint', 'start_date', 'end_date', 'duration', 'percent_complete'],
            workbenchUrl: '#',
            canAddPhase: false,
            currencySymbol: this.getCurrencyCode(),
            timeZone: glideSession.getTimeZoneName(),
            brMode: false,
            calculation_type: "automatic",
			childSysClass: "planned_task",
			title: this.console.name(),
			dateFormat: gs.getDateFormat(),
			dateTimeFormat: gs.getDateTimeFormat()
        };
    },
	
	overviewTableMetadata: function(reqdColumns, metadata) {
		var tableColumns = [];
		reqdColumns.forEach(function(c) {
			var tc = metadata.columnConfig.filter(function(mc) {
				return c.trim() == mc.json_column.trim();
			});
			if ( tc.length &gt; 0 ) 
				tableColumns.push(tc[0]);
		});
		var tableMetadata = [];
		tableColumns.forEach(function(tc) {
			var col = tc.json_column;
			if ( tc.type == 'glide_duration' || tc.type == 'choice' || tc.type == 'reference' )
				col = 'dv_' + tc.json_column;			
			tableMetadata.push({column: col, label: tc.label, type: tc.type});
		});
		return tableMetadata;
	},
	
    type: 'PlannedTaskConsoleMetadata'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-11-13 10:19:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3ade1dc037330200455726877e41f19d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;29&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PlannedTaskConsoleMetadata&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;e93557642fc10110d8a4d5f62799b623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3ade1dc037330200455726877e41f19d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-22 06:20:34&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3032&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:57</sys_created_on>
        <sys_id>d07cc5ba2f331110d8a4d5f62799b629</sys_id>
        <sys_name>PlannedTaskConsoleMetadata</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_d07cc5ba2f331110d8a4d5f62799b629</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
