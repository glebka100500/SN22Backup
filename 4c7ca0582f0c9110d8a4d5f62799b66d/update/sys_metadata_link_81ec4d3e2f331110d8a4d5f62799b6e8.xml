<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7fa15b4459161410f877a820247284bf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ApprovalDelegationUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;This script include contains APIs which act as a wrapper for older approval delegation and granular approval delegation APIs.&lt;/description&gt;
        &lt;name&gt;ApprovalDelegationUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ApprovalDelegationUtil = Class.create();
ApprovalDelegationUtil.prototype = {
    initialize: function() {},

    getAllMyApprovals: function() {
        var approval_delegation_version = GlideProperties.get("glide.approval.delegation.version", "v1");
        switch (String(approval_delegation_version)) {
            case "v1":
                return this._getMyApprovalsWithOnlyApprovalDelegationPlugin();
            case "v2":
                return this._getMyApprovalsWithOnlyGranularApprovalDelegationPlugin();
            case "v3":
                return this._getMyApprovalsWithBothApprovalDelegationPlugins();
            default:
                gs.error("System property 'glide.approval.delegation.version' = " + approval_delegation_version + " is not supported.");
                return null;
        }
    },

    getApprovers: function() {
        var approval_delegation_version = GlideProperties.get("glide.approval.delegation.version", "v1");
        switch (String(approval_delegation_version)) {
            case "v1":
                return getMyApprovals();
            case "v2":
                return gs.getUserName();
            case "v3":
                return getMyApprovals();
            default:
                gs.error("System property 'glide.approval.delegation.version' = " + approval_delegation_version + " is not supported.");
                return null;
        }
    },
	
    getMyAndDelegatedApprovals: function() {
        var approval_delegation_version = GlideProperties.get("glide.approval.delegation.version", "v1");
            switch (String(approval_delegation_version)) {
            case "v1":
                return null;
            case "v2":
                return this._getMyApprovalsWithOnlyGranularApprovalDelegationPlugin();
            case "v3":
                return this._getMyApprovalsWithOnlyGranularApprovalDelegationPlugin();
            default:
                gs.error("System property 'glide.approval.delegation.version' = " + approval_delegation_version + " is not supported.");
                return null;
        }
    },

    isMyApproval: function(gr) {
        var approval_delegation_version = GlideProperties.get("glide.approval.delegation.version", "v1");
        switch (String(approval_delegation_version)) {
            case "v1":
                return this._isMyApprovalWithOnlyApprovalDelegationPlugin(gr);
            case "v2":
                return this._isMyApprovalWithOnlyGranularApprovalDelegationPlugin(gr);
            case "v3":
                return this._isMyApprovalWithBothApprovalDelegationPlugins(gr);
            default:
                gs.error("System property 'glide.approval.delegation.version' = " + approval_delegation_version + " is not supported.");
                return false;
        }
    },

    isGranularApprovalDelegationEnabled: function() {
        return GlidePluginManager.isActive('com.glide.granular_service_delegation');
    },

    _getMyApprovalsWithOnlyApprovalDelegationPlugin: function() {
        var answer = [];
        var approvalGr = new GlideRecord("sysapproval_approver");
        approvalGr.addQuery("approver", "IN", getMyApprovals());
        approvalGr.query();
        while (approvalGr.next())
            answer.push(new String(approvalGr.sys_id));

        return answer;
    },

    _getMyApprovalsWithOnlyGranularApprovalDelegationPlugin: function() {
        if (this.isGranularApprovalDelegationEnabled()) {
            return new GranularApprovalDelegationUtil().getMyAndDelegatedApprovals();
        } else {
            gs.error("'com.glide.granular_service_delegation' plugin is not enabled.");
            return null;
        }
    },

    _getMyApprovalsWithBothApprovalDelegationPlugins: function() {
        if (this.isGranularApprovalDelegationEnabled()) {
            var granular_approval_list = new GranularApprovalDelegationUtil().getMyAndDelegatedApprovals();
            var approval_list = this._getMyApprovalsWithOnlyApprovalDelegationPlugin();
            if (approval_list &amp;&amp; approval_list.length &gt; 0) {
                granular_approval_list = granular_approval_list.concat(approval_list);
            }
            return granular_approval_list;
        } else {
            return this._getMyApprovalsWithOnlyApprovalDelegationPlugin();
        }
    },

    _isMyApprovalWithOnlyApprovalDelegationPlugin: function(gr) {
        return isApprovalMine(gr);
    },

    _isMyApprovalWithOnlyGranularApprovalDelegationPlugin: function(gr) {
        if (this.isGranularApprovalDelegationEnabled()) {
            return new GranularApprovalDelegationUtil().isMyOrDelegatedApproval(gr);
        } else {
            gs.error("'com.glide.granular_service_delegation' plugin is not enabled.");
            return false;
        }
    },

    _isMyApprovalWithBothApprovalDelegationPlugins: function(gr) {
        if (this.isGranularApprovalDelegationEnabled()) {
            var answer = new GranularApprovalDelegationUtil().isMyOrDelegatedApproval(gr);
            if (!answer) {
                answer = isApprovalMine(gr);
            }
            return answer;
        } else {
            return isApprovalMine(gr);
        }
    },

    type: 'ApprovalDelegationUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-24 18:50:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7fa15b4459161410f877a820247284bf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;80&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ApprovalDelegationUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Delegation Plugin" source="com.glideapp.service_delegation"&gt;8df00d8b6d2620100acb70b3534330cb&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7fa15b4459161410f877a820247284bf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;peksan.kong&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-05-18 22:34:36&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5259&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:54</sys_created_on>
        <sys_id>81ec4d3e2f331110d8a4d5f62799b6e8</sys_id>
        <sys_name>ApprovalDelegationUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_81ec4d3e2f331110d8a4d5f62799b6e8</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
