<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2eb736d00f0030106a2c6577b9767ede</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFProjectUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle localization project. Customers are not expected to override these core functions.&lt;/description&gt;
        &lt;name&gt;LFProjectUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFProjectUtils = Class.create();
LFProjectUtils.prototype = {
    tableName: 'sn_lf_project',
    initialize: function(grOrIdOrNumber) {
        this.states = new LFConstants().PROJECT_STATES;
        this.logger = new LFLogger("LFProjectUtils");
        if (grOrIdOrNumber &amp;&amp; grOrIdOrNumber.sys_class_name == this.tableName) {
            this.currentRecord = grOrIdOrNumber;
        } else if (grOrIdOrNumber) {
            var projectGr = new GlideRecord(this.tableName);
            projectGr.addQuery('sys_id', grOrIdOrNumber).addOrCondition('number', grOrIdOrNumber);
            projectGr.query();
            if (projectGr.next()) {
                this.currentRecord = projectGr;
            }
        }
    },

    getSysId: function() {
        return this.currentRecord.getValue('sys_id');
    },

    hasValidRecord: function() {
        return this.currentRecord &amp;&amp; this.currentRecord.sys_class_name == this.tableName;
    },

    update: function() {
        if (!this.hasValidRecord()) {
            throw new Error('Update requested on invalid LF Project Record');
        }
        this.currentRecord.update();
    },

    getState: function() {
        return this.currentRecord.getValue('state');
    },

    moveToInProgress: function() {
        this.currentRecord.setValue('state', this.states.In_Progress);
    },

    moveToClosedComplete: function() {
        this.currentRecord.setValue('state', this.states.Closed_Complete);
    },

    moveToClosedInComplete: function() {
        this.currentRecord.setValue('state', this.states.Closed_Incomplete);
    },

    getRelatedRequestedItemCount: function() {
        var requestedItemGA = new GlideAggregate('sn_lf_requested_item');
        requestedItemGA.addQuery('localization_project', this.getSysId());
        requestedItemGA.addAggregate('COUNT', 'count');
        requestedItemGA.query();
        var relatedRequestedItemCount = 0;

        if (requestedItemGA.next()) {
            relatedRequestedItemCount = requestedItemGA.getAggregate('COUNT', 'count');
        }
        return relatedRequestedItemCount;
    },

    getRelatedRequestedItemCountForState: function(state) {
        var requestedItemGA = new GlideAggregate('sn_lf_requested_item');
        requestedItemGA.addQuery('localization_project', this.getSysId());
        requestedItemGA.addAggregate('COUNT', 'count');
        requestedItemGA.addQuery("state", state);
        requestedItemGA.query();
        var relatedRequestedItemCount = 0;

        if (requestedItemGA.next()) {
            relatedRequestedItemCount = requestedItemGA.getAggregate('COUNT', 'count');
        }
        return relatedRequestedItemCount;
    },

    getRelatedRequestedItemIds: function() {
        var requestedItemIds = [];
        var requestedItemGR = new GlideRecord("sn_lf_requested_item");
        requestedItemGR.addQuery("localization_project", this.getSysId());
        requestedItemGR.query();
        while (requestedItemGR.next()) {
            var requestedItemId = requestedItemGR.getValue("sys_id");
            requestedItemIds.push(requestedItemId);
        }
        return requestedItemIds;
    },

    getRelatedLocalizationTaskAndStates: function() {
        var localizationTaskAndStates = {};
        var taskGR = new GlideRecord("sn_lf_task");
        taskGR.addQuery("project", this.getSysId());
        taskGR.query();
        while (taskGR.next()) {
            localizationTaskAndStates[taskGR.getValue("sys_id")] = taskGR.getValue("state");
        }
        return localizationTaskAndStates;
    },

    hasSettingsForRelatedRequestedItems: function() {
        var settingsMap = {};
        var requestedItemGR = new GlideRecord("sn_lf_requested_item");
        requestedItemGR.addQuery("localization_project", this.getSysId());
        requestedItemGR.query();
        while (requestedItemGR.next()) {
            var artifactInternalName = requestedItemGR.artifact_config.internal_name;
            var artifactName = requestedItemGR.artifact_config.name;
            var targetLanguageName = requestedItemGR.target_language.name;
            var targetLangaugeId = requestedItemGR.target_language.sys_id;
            var key = artifactInternalName + ":" + targetLangaugeId;

            if (!settingsMap.hasOwnProperty(key)) {
                settingsMap[key] = {
                    'artifactInternalName': artifactInternalName,
                    'artifactName': artifactName,
                    'targetLanguageName': targetLanguageName,
                    'targetLangaugeId': targetLangaugeId
                };
            }
        }

        var lfSettingUtils = new LFSettingUtils();
        var settingsKeys = Object.keys(settingsMap);
        var response = {};
        var isValid = true;
        var errorMessage = "";

        for (var idx = 0; idx &lt; settingsKeys.length; idx++) {
            var requestedItemDetails = settingsMap[settingsKeys[idx]];
            artifactInternalName = requestedItemDetails.artifactInternalName;
            targetLangaugeId = requestedItemDetails.targetLangaugeId;
            var settings = lfSettingUtils.getLFSetting(artifactInternalName, targetLangaugeId);
            if (!settings || !settings.hasOwnProperty('name')) {
                targetLanguageName = requestedItemDetails.targetLanguageName;
                artifactName = requestedItemDetails.artifactName;
                errorMessage = artifactName + " - " + targetLanguageName;
                isValid = false;
                break;
            }
        }

        response['isValid'] = isValid;
        response['errorMessage'] = errorMessage;

        return response;
    },

    createLocalizationProject: function(requestedItemIds, settings) {
        try {
            var isAutoCreationOfProjectsEnabled = (settings['enable_auto_creation'] == '1');
            var projectGR = new GlideRecord(this.tableName);
            projectGR.initialize();
            projectGR.setValue('state', this.states.Draft);
            if (isAutoCreationOfProjectsEnabled) {
                projectGR.setValue('short_description', 'This project is auto-created by the system');
            }
            if (settings['localization_manager_group']) {
                var groupGr = new GlideRecord('sys_user_group');
                if (groupGr.get(settings.localization_manager_group)) {
                    projectGR.setValue('assigned_to', groupGr.getValue('manager'));
                    projectGR.setValue('assignment_group', settings.localization_manager_group);
                }    
            }
            projectGR.insert();
            this.currentRecord = projectGR;

            var projectSysID = projectGR.getValue('sys_id');
            LFRequestedItemUtils.updateLocalizationRequestedItems(requestedItemIds, {
                localization_project: projectSysID
            });
            if (isAutoCreationOfProjectsEnabled) {
                this.moveToInProgress();
                this.update();
            }

            return {
                "isSuccess": true,
                "sysId": projectSysID,
                "number": projectGR.getValue('number')
            };
        } catch (e) {
            this.logger.logError("Error Occurred while creating localization project" + e);
        }

        var requestedItemNumbers = [];

        for (var idx = 0; idx &lt; requestedItemIds.length; idx++) {
            var requestedItemId = requestedItemIds[idx];
            var requestedItemUtils = new LFRequestedItemUtils(requestedItemId);
            if (requestedItemUtils.hasValidRecord()) {
                requestedItemNumbers.push(requestedItemUtils.getNumber());
                requestedItemUtils.moveToClosedIncomplete();
                var workNotes = gs.getMessage('Error while requesting translations.');
                requestedItemUtils.addWorkNotes(workNotes);
                requestedItemUtils.update();
            } else {
                requestedItemNumbers.push(requestedItemId);
            }
        }

        var errorMessage = gs.getMessage("Error occurred while creating project for {0} requested items.", requestedItemNumbers.join(","));
        return {
            "isSuccess": false,
            "errorMessage": errorMessage
        };
    },

    type: 'LFProjectUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-05-07 07:45:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2eb736d00f0030106a2c6577b9767ede&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFProjectUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;be2124c92f241110d8a4d5f62799b640&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2eb736d00f0030106a2c6577b9767ede&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-31 07:53:43&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;8313&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:39</sys_created_on>
        <sys_id>806c01ba2f331110d8a4d5f62799b633</sys_id>
        <sys_name>LFProjectUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_806c01ba2f331110d8a4d5f62799b633</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
