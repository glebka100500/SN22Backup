<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>586cbec7675a1010b3d782f45685ef5f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AISARecordProducerUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AISARecordProducerUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AISARecordProducerUtils = Class.create();
AISARecordProducerUtils.prototype = {
	_AISA_RP_CONFIG: "aisa_rp_config",
	_CXS_RP_CONFIG: "cxs_rp_config",
	_AIS_SEARCH_PROFILE: "ais_search_profile",
	_SEARCH_CONTEXT_CONFIG: "sys_search_context_config",
	_PUBLISHED_STATE: "PUBLISHED",
	_SEARCHABLE_TYPES: ["2", "6", "16"],
	_MESP_PORTAL_SYS_ID: "26f2fffb77322300454792718a1061e5",
	_MOBILE_GLOBAL_SEARCH_CONFIG_SYS_ID: "d259d3d47320330018eea18d4ef6a708",

    initialize: function() {
    },

	isRPConfigExistingOnRP: function(sys_id) {
		var rpConfigGr = new GlideRecord(this._AISA_RP_CONFIG);
		rpConfigGr.addQuery('sc_cat_item', sys_id);
		rpConfigGr.addActiveQuery();
		rpConfigGr.query();
		return rpConfigGr.hasNext();
	},

	getRPConfigByRPId: function(rpSysId) {
		var rpConfigGr = new GlideRecord(this._AISA_RP_CONFIG);
		rpConfigGr.addQuery('sc_cat_item', rpSysId);
		rpConfigGr.addActiveQuery();
		rpConfigGr.query();
		if (!rpConfigGr.next())
			return null;

		var searchSourceTableMap = {};
		var searchSourceM2MGr = new GlideRecord('ais_search_profile_ais_search_source_m2m');
		searchSourceM2MGr.addQuery('profile', rpConfigGr.search_app.search_profile + '');
		searchSourceM2MGr.query();
		while (searchSourceM2MGr.next()) {
			var searchSourceGr = new GlideRecord('ais_search_source');
			if (searchSourceGr.get(searchSourceM2MGr.getValue('search_source')))
				searchSourceTableMap[searchSourceGr.getUniqueValue()] = searchSourceGr.datasource.source + '';
		}
		
		return {
			appId: rpConfigGr.search_app.application_id + '',
			searchApp: rpConfigGr.getValue("search_app"),
			searchProfile: rpConfigGr.search_app.search_profile + '',
			headerText: rpConfigGr.getDisplayValue("header_text"),
			searchVariable: rpConfigGr.getValue("search_variable"),
			resultsPerPage: parseInt(rpConfigGr.getValue("results_per_page")),
			allowExpandCollapse: !!rpConfigGr.allow_expand_collapse,
			searchSourceTableMap: searchSourceTableMap
		};
	},
	
    getVariableIds: function(gr) {
        var sysIds = [];

        if (!gr)
            return sysIds;

        var variableGr = new GlideRecord("item_option_new");
        variableGr.addQuery("sys_id", "IN", this.getCatItemVariableIds(gr));
        variableGr.query();

        while (variableGr.next())
            sysIds.push(variableGr.getUniqueValue());

        return sysIds;
    },

    getCatItemVariableIds: function(gr) {
        var sysIds = [];

        if (!gr)
            return sysIds;

        var catItemId = gr.getValue("sc_cat_item");
		var catItemGr = new GlideRecord("sc_cat_item");
        if (!catItemGr.get(catItemId))
            return sysIds;

        var catItemObj = GlideappCatalogItem.get(catItemId);
        var varsGr = catItemObj.getStandaloneVariables();
        while (varsGr.next())
            if (this._SEARCHABLE_TYPES.indexOf(varsGr.type + "") &gt;= 0)
                sysIds.push(varsGr.getUniqueValue());

        return sysIds;
    },
	
	getRPVariable: function(gr) {
		var varGr = new GlideRecord("item_option_new");
		varGr.addQuery("cat_item", gr.sc_cat_item);
		varGr.addQuery("name", "ai_search_assist");
		varGr.query();
	
		return (varGr.next() ? varGr : null);
	},

	addToRecordProducer: function(gr) {
        if (this.getRPVariable(gr))
            return false;
    
        var maxVarOrderGa = new GlideAggregate("item_option_new");
        maxVarOrderGa.addQuery("cat_item", gr.sc_cat_item);
        maxVarOrderGa.addAggregate("MAX", "order");
        maxVarOrderGa.groupBy("cat_item");
        maxVarOrderGa.query();

        var order = 100;
        if (maxVarOrderGa.next())
            order = (maxVarOrderGa.getAggregate("MAX", "order") - 0) + 100;

        var varGr = new GlideRecord("item_option_new");
        varGr.type = 14; // Macro;
		varGr.sp_widget = "66135172671e1010b3d782f45685ef9e";
        varGr.cat_item = gr.sc_cat_item;
        varGr.display_title = false;
        varGr.question_text = "AI Search Assist";
        varGr.name = "ai_search_assist";
        varGr.order = order;
        varGr.insert();

        return true;
    },
	
	removeFromRecordProducer: function(aisaRPConfig) {
		var aisaRecProdConfigs = new GlideRecord(this._AISA_RP_CONFIG);
		aisaRecProdConfigs.addQuery("cat_item", aisaRPConfig.sc_cat_item);
		aisaRecProdConfigs.addQuery("sys_id", "!=", aisaRPConfig.getUniqueValue());
		aisaRecProdConfigs.query();
		if (aisaRecProdConfigs.next()) 
			return false; // do not delete the variable if there are other aisa record producer configs for that record producer
		
		var rpVar = this.getRPVariable(aisaRPConfig);
		if (!rpVar)
			return false;
		
        return rpVar.deleteRecord();
    },
	
	useAISARecordProducerConfig: function(catItemId) {
		if (!catItemId) {
			return false;
		}
		
		var aisaRPConfig = new GlideRecord(this._AISA_RP_CONFIG);
		aisaRPConfig.get("sc_cat_item", catItemId);

		var useAISA = false;
		if (aisaRPConfig.isValidRecord()) {
			var isActive = !!aisaRPConfig.active;
			var isPublished = false;
			
			var searchProfileSysID = aisaRPConfig.search_app.search_profile;
			var searchProfile = new GlideRecord(this._AIS_SEARCH_PROFILE);
			if (searchProfileSysID &amp;&amp; searchProfile.get(searchProfileSysID)) {
				isPublished = (!!searchProfile.active &amp;&amp; (searchProfile.state == this._PUBLISHED_STATE));
			}
			
			useAISA = isActive &amp;&amp; isPublished;
		}

		return useAISA;
	},
	
	isMesp: function(portalSysId) {
		// check if the accessed portal is Mobile Employee Service Portal
		return (portalSysId == this._MESP_PORTAL_SYS_ID);
	},
	
	getNowMobileSearchEngine: function() {
		var searchEngine = '';
		
		var mobileSearchConfig = new GlideRecord('sys_sg_global_search');
		if (mobileSearchConfig.get(this._MOBILE_GLOBAL_SEARCH_CONFIG_SYS_ID)) {
			// Access the Search Application to return the Search Engine type
			var searchContextConfig = mobileSearchConfig.search_context_config;
			if (searchContextConfig)
				searchEngine = searchContextConfig.search_engine;
		}
		
		return searchEngine;
	},
	
    type: 'AISARecordProducerUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-08-03 01:09:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;586cbec7675a1010b3d782f45685ef5f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;72&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AISARecordProducerUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="AI Search Assist" source="com.snc.ai_search_assist"&gt;3995c18b6de620100acb70b3534330d8&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_586cbec7675a1010b3d782f45685ef5f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-30 10:32:42&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6027&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:40</sys_created_on>
        <sys_id>4f9c81fa2f331110d8a4d5f62799b66c</sys_id>
        <sys_name>AISARecordProducerUtils</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_4f9c81fa2f331110d8a4d5f62799b66c</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
