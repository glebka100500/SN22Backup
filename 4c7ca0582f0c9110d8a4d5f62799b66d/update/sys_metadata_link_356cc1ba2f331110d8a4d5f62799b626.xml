<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>33143893bf110100710071a7bf0739ba</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdDefaultAutoGenPassword&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Password generate extension. Generates password from a random word and 4 digits&lt;/description&gt;
        &lt;name&gt;PwdDefaultAutoGenPassword&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdDefaultAutoGenPassword = Class.create();
PwdDefaultAutoGenPassword.prototype = {
    category: 'password_reset.extension.password_generator', // DO NOT REMOVE THIS LINE!
	CHAR_LENGTH : 7,
	MAX_CHAR_REPETATION_LENGTH : 2,
	REG_EX_LOWER_CASE : /[a-z]/,
	REG_EX_UPPER_CASE : /[A-Z]/,

    initialize: function() {},

    /*
     * Returns an auto-generated string password
     *
     * @param params.credentialStoreId The sys-id of the calling password-reset process (table: pwd_process)
     * @return An auto-generated string password.
     */
    process: function(params) {
        return this.generatePassword();
    },

    /*
     * function generatePassword
     *
     * returns a string with a randomaly generated password
     */
    generatePassword: function() {

        var pwd = this._generateString(this.CHAR_LENGTH);

        // Add random 4 digits (with no 3-digit repeats and not 3-digit sequences)
        var digitsStr = "";
        var prevDigit = -2;
        var incrDigit = false;
        var decrDigit = false;
        var sameDigit = false;
        for (i = 0; i &lt; 4; i++) {
            var digit;
            do {
                digit = GlideSecureRandomUtil.getSecureRandomIntBound(10);
            } while ((sameDigit &amp;&amp; (digit == prevDigit)) ||
                (incrDigit &amp;&amp; (digit == prevDigit + 1)) ||
                (decrDigit &amp;&amp; (digit == prevDigit - 1)));

            sameDigit = (digit == prevDigit);
            incrDigit = (digit == prevDigit + 1);
            decrDigit = (digit == prevDigit - 1);

            digitsStr += digit;
            prevDigit = digit;
        }
        pwd += digitsStr;

        // Add a random special charecter:
        var specialCaracters = "!@#$%&amp;*?+-=";
        pwd += specialCaracters.charAt(GlideSecureRandomUtil.getSecureRandomIntBound(specialCaracters.length));

        return pwd;
    },

    _getRandomString: function(length) {
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        var charactersLength = characters.length;
        for (var i = 0; i &lt; length; i++) {
            result += characters.charAt(GlideSecureRandomUtil.getSecureRandomIntBound(charactersLength));
        }
        return result;
    },

    _generateString: function(length) {
        var password = '';
        do {
            password = this._getRandomString(length);
        } while (!this._isPasswordValid(password));
        return password;

    },

    _isPasswordValid: function(password) {
        return this.REG_EX_LOWER_CASE.test(password) &amp;&amp; this.REG_EX_UPPER_CASE.test(password) &amp;&amp; this._checkRepetitionOfChars(password);
    },

    _checkRepetitionOfChars: function(password) {
        var passwordLowerCase = password.toLowerCase();
        var map = {};

        for (i = 0; i &lt; passwordLowerCase.length; i++) {
            if (map[passwordLowerCase[i]] == null)
                map[passwordLowerCase[i]] = 1;
            else
                map[passwordLowerCase[i]] = map[passwordLowerCase[i]] + 1;
        }

        for (var key in map) {
            if (map[key] &gt; this.MAX_CHAR_REPETATION_LENGTH)
                return false;
        }
        return true;
    },

    type: 'PwdDefaultAutoGenPassword'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-05-17 18:17:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;33143893bf110100710071a7bf0739ba&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdDefaultAutoGenPassword&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;a54385836da620100acb70b3534330a5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_33143893bf110100710071a7bf0739ba&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-09 12:49:51&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3259&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:47</sys_created_on>
        <sys_id>356cc1ba2f331110d8a4d5f62799b626</sys_id>
        <sys_name>PwdDefaultAutoGenPassword</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_356cc1ba2f331110d8a4d5f62799b626</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
