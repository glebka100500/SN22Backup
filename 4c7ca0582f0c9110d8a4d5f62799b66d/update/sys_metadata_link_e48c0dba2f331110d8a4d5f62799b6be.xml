<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>47c9e6145303101034d1ddeeff7b120d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.STTRMConditionSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;ServicenNow code for the STTRMCondition class&lt;/description&gt;
        &lt;name&gt;STTRMConditionSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var STTRMConditionSNC = Class.create();
STTRMConditionSNC.prototype = {
    initialize: function(conditionGr, _gs) {
		this._gr = conditionGr;
		this._gs = _gs || gs;
    },
	
	evaluate: function(currentGr) {
		var conditionType = this._gr.getValue("condition_type");
		if (conditionType === STTRM.CONDITION_TYPE)
			return GlideFilter.checkRecord(currentGr, this._gr.getValue("condition"), true);
		
		if (conditionType === STTRM.SCRIPT_TYPE)
			return new GlideScopedEvaluator().evaluateScript(this._gr, "condition_script", {"current": currentGr});
		
		// It's a pre-defined condition type so evaluate using the class
		return new STTRMConditionType(this._gr.condition_type.getRefRecord()).evaluate(currentGr);
	},
	
	getConditionTypeRefQual: function() {
		// dotwalk++
		var tableName = this._gr.sttrm_state_transition.from_state.sttrm_model.table_name + "";
		if (!tableName)
			return "table_nameISEMPTY";
		
		var tables = [];
		var tableList = GlideDBObjectManager.get().getTables(tableName);
		for (var i=0; i &lt; tableList.size(); i++)
			tables.push(tableList.get(i));
		
		return "table_nameISEMPTY^ORtable_nameIN" + tables.join(",");
	},
	
	toJS: function() {
		return {
			"name": this._gr.getDisplayValue("name") || "",
			"description": this._gr.getDisplayValue("description") || "",
			"sys_id": this._gr.getUniqueValue()
		};
	},

    type: 'STTRMConditionSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-08-31 17:23:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;47c9e6145303101034d1ddeeff7b120d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;STTRMConditionSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="State Transition Models" source="com.snc.itsm.state_transition_model"&gt;e2a381876da620100acb70b35343301b&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_47c9e6145303101034d1ddeeff7b120d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-09 14:08:44&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;1380&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:14</sys_created_on>
        <sys_id>e48c0dba2f331110d8a4d5f62799b6be</sys_id>
        <sys_name>STTRMConditionSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_e48c0dba2f331110d8a4d5f62799b6be</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
