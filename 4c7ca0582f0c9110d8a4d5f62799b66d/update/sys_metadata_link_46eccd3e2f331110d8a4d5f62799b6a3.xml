<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>82cbc383733010108ef62d2b04f6a7ab</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ChangeConflictExecutionSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Schedule the execution of Conflict (Collision) Detection. Use ChangeConflictExecution to override functionality provided here.&lt;/description&gt;
        &lt;name&gt;ChangeConflictExecutionSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ChangeConflictExecutionSNC = Class.create();

ChangeConflictExecutionSNC.CHANGE_CONFLICT_EXECUTION_LOG = "change.conflict.execution.log";
ChangeConflictExecutionSNC.CHANGE_CONFLICT_REFRESH_CONFLICTS = "change.conflict.refresh.conflicts";
ChangeConflictExecutionSNC.CHANGE_CONFLICT_CHECK_CONFLICT_LAST_RUN_UPDATED = "change.conflict.check_conflict_last_run_updated";

ChangeConflictExecutionSNC.prototype = {

	initialize: function(_gr, _gs) {
		this._gr = _gr || current;
		this._gs = _gs || gs;

		this.lu = new GSLog(ChangeConflictExecutionSNC.CHANGE_CONFLICT_EXECUTION_LOG, this.type);
		this.lu.includeTimestamp();
	},

	scheduleConflictDetection: function() {
		if (this.lu.atLevel(GSLog.DEBUG))
			this.lu.logDebug("Scheduling conflict detection for " + this._gr.getRecordClassName() + ": " + this._gr.getUniqueValue());

		if (gs.getProperty(ChangeConflictExecutionSNC.CHANGE_CONFLICT_REFRESH_CONFLICTS, "false") !== "true") {
			if (this.lu.atLevel(GSLog.DEBUG))
				this.lu.logDebug("Conflict detection skipped; refresh conflicts disabled");
			return;
		}

		if (!ChangeCheckConflicts.allowConflictDetection(this._gr)) {
			if (this.lu.atLevel(GSLog.DEBUG))
				this.lu.logDebug("Conflict detection skipped; conflict detection not allowed");
			return;
		}

		if (gs.getProperty(ChangeConflictExecutionSNC.CHANGE_CONFLICT_CHECK_CONFLICT_LAST_RUN_UPDATED, "true") === "true" &amp;&amp; this._gr.conflict_last_run.changes()) {
			if (this.lu.atLevel(GSLog.DEBUG))
				this.lu.logDebug("Conflict detection skipped; conflict_last_run has been updated");
			return;
		}

		// Latest version of the Change should be used for conflict detection so cancel existing running conflict worker
		this.cancelChangeConflictWorker();

		this.startChangeConflictWorker();
	},

	cancelChangeConflictWorker: function() {
		var trackerGr = new GlideRecord("sys_execution_tracker");
		trackerGr.addQuery("source", this._gr.getUniqueValue());
		trackerGr.addQuery("name", ChangeCheckConflicts.TRACKER_NAME);
		trackerGr.addQuery("state", "1");
		trackerGr.query();

		if (trackerGr.next()) {
			if (this.lu.atLevel(GSLog.DEBUG))
				this.lu.logDebug("Change conflict worker cancelled: " + trackerGr.getUniqueValue());
			SNC.GlideExecutionTracker.getBySysID(trackerGr.getUniqueValue()).cancel(gs.getMessage("The conflict check has been cancelled because the change request it was being run against has been modified"));
		}
	},

	startChangeConflictWorker: function() {
		this._gs.getSession().putClientData('tracker_' + this._gr.getUniqueValue(), '');

		var worker = new GlideScriptedHierarchicalWorker();
		worker.setProgressName(ChangeCheckConflicts.TRACKER_NAME);
		worker.setScriptIncludeName("ChangeConflictWorker");
		worker.setScriptIncludeMethod("start");
		worker.putMethodArg("sysId", this._gr.getUniqueValue());
		worker.putMethodArg("className", this._gr.getRecordClassName());
		worker.setBackground(true);
		worker.start();

		if (this.lu.atLevel(GSLog.DEBUG))
			this.lu.logDebug("Change conflict worker started: " + worker.getProgressID());

		this._gs.getSession().putClientData('tracker_' + this._gr.getUniqueValue(), worker.getProgressID());
	},

	type: 'ChangeConflictExecutionSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-05-20 12:30:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;82cbc383733010108ef62d2b04f6a7ab&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ChangeConflictExecutionSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Management - Collision Detector" source="com.snc.change.collision"&gt;479385476da620100acb70b3534330f0&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_82cbc383733010108ef62d2b04f6a7ab&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-05-20 16:30:11&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3190&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:59</sys_created_on>
        <sys_id>46eccd3e2f331110d8a4d5f62799b6a3</sys_id>
        <sys_name>ChangeConflictExecutionSNC</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_46eccd3e2f331110d8a4d5f62799b6a3</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
