<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>471672c6b7948110d033d76cde11a9e0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TopicControlUsageUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Processes and saves analytics about the published topic for LUA&lt;/description&gt;
        &lt;name&gt;TopicControlUsageUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TopicControlUsageUtil = Class.create();
    TopicControlUsageUtil.prototype = {
        initialize: function() {
    },

    _hasExistingUsageData: function(cs_topic_id) {
        var gr = new GlideRecord('sys_cs_topic_control_usage');
        gr.addQuery('cs_topic_id', cs_topic_id);
        gr.query();
        return gr.hasNext();
    },

    _deleteExistingUsageData: function(cs_topic_id) {
        var gr = new GlideRecord('sys_cs_topic_control_usage');
        gr.addQuery('cs_topic_id', cs_topic_id);
        gr.query();
        gr.deleteMultiple();
    },

    _stringifyUsage: function(usage) {
        if (!usage || JSON.stringify(usage) === '{}') {
            return null;
        }
        return JSON.stringify(usage);
    },

    _saveNodeData: function(cs_topic_id, version, node, subtype, usage) {
        var gr = new GlideRecord('sys_cs_topic_control_usage');
        gr.initialize();
        gr.cs_topic_id = cs_topic_id;
        gr.node_id = node.id;
        gr.node_name = node.name;
        gr.step_type = node.stepType;
        gr.subtype = subtype;
        gr.graph_version = version;
        gr.usage = this._stringifyUsage(usage);
        gr.insert();
    },

    processGraph: function(graphJson, cs_topic_id, overwrite) {
        try {
            if (!overwrite &amp;&amp; this._hasExistingUsageData(cs_topic_id)) return;

            if (!graphJson) return;

            var graph = JSON.parse(graphJson);

            // before adding new node data
            this._deleteExistingUsageData(cs_topic_id);

            // get the first and only goal either 'primary' or some UUID for older topics
            var goalId = Object.keys(graph.goals)[0];
            var version = graph.graph_api_version;
            var nodes = graph.goals[goalId].nodes || [];
            var variables = graph.variables;
            for (var nodeId in nodes) {
                var node = nodes[nodeId];
                var stepType = node.stepType;
                switch(stepType) {
                    case 'Start':
                        // ignore
                        break;
                    case 'TerminateGoal':
                        // ignore
                        break;
                    case 'ImplicitEnd':
                        // ignore
                        break;
                    case 'Prompt':
                        this._processPrompt(cs_topic_id, version, node, variables);
                        break;
                    case 'TextOutput':
                        this._processTextOutput(cs_topic_id, version, node);
                        break;
                    case 'RecordOutput':
                        this._processRecordOutput(cs_topic_id, version, node);
                        break;
                    default:
                        this._saveNodeData(cs_topic_id, version, node);
                }
            }
        } catch (e) {
            gs.error('Error occured while processing topic control usage for cs_topic_id: ' + cs_topic_id + ' ' + e.toString());
        }
    },

    _processPrompt: function(cs_topic_id, version, node, variables) {
        var variable = variables[node.variableId];
        var usage = {};
        var varType = '';
        if (variable.secure) {
            usage.secure = true;
        }
        if (variable.varType === 'string') {
            varType = 'string';
        }
        else if (variable.varType === 'boolean') {
            varType = 'boolean';
        }
        else if (variable.varType === 'date_time') {
            varType = 'datetime';
        }
        else if (variable.varType === 'image') {
            varType = 'image';
        }
        else if (variable.varType === 'file') {
            varType = 'file';
        }
        this._saveNodeData(cs_topic_id, version, node, varType, usage);
    },

    _processTextOutput: function(cs_topic_id, version, node) {
        var usage = {};
		
        if (node.secure) {
            usage.secure = true;
        }
        var value = node.value.value;
        if (value) {
            findRichTextUsage(value);
        } else {
            value = node.value;
            if (value.length &gt; 1) {
                usage.alternateMessage = true;
            }
            value.forEach(function(variation) {
                findRichTextUsage(variation.value);
            });
        }
        
        function findRichTextUsage(value) {
            if (value.type === 'emoji') {
                usage.emoji = true;
            }
            if (value.type === 'link') {
                usage.link = true;
            }
            if (value.type === 'bulleted-list') {
                usage.bulletedList = true;
            }
            if (value.type === 'numbered-list') {
                usage.numberedList = true;
            }
            if (value.bold) {
                usage.bold = true;
            }
            if (value.italic) {
                usage.italic = true;
            }

            if (value.children) {
                findRichTextUsage(value.children);
            }

            if (Array.isArray(value)) {
                value.forEach(function(child) {
                    findRichTextUsage(child);
                });
            }
        }
        this._saveNodeData(cs_topic_id, version, node, node.value.mode, usage);
    },

    _processRecordOutput: function(cs_topic_id, version, node) {
        this._saveNodeData(cs_topic_id, version, node, node.cardTemplate);
    },

    type: 'TopicControlUsageUtil'
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-12-11 02:32:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;471672c6b7948110d033d76cde11a9e0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TopicControlUsageUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;f9f62e472f000110d8a4d5f62799b60c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_471672c6b7948110d033d76cde11a9e0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-12 19:10:56&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;5529&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:13</sys_created_on>
        <sys_id>dc8c0dba2f331110d8a4d5f62799b68d</sys_id>
        <sys_name>TopicControlUsageUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_dc8c0dba2f331110d8a4d5f62799b68d</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
