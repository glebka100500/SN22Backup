<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>65c02effeb0211003623666cd206fe8b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.sc_ic_ReqItemApprovalDefn&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Wrapper for Requested Item Approval Definitions&lt;/description&gt;
        &lt;name&gt;sc_ic_ReqItemApprovalDefn&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var sc_ic_ReqItemApprovalDefn = Class.create();
sc_ic_ReqItemApprovalDefn.prototype = Object.extendsObject(sc_ic_Base,{
    initialize: function(_gr,_gs) {
        sc_ic_Base.prototype.initialize.call(this,_gr,_gs);

        if (this._gr.getTableName() != sc_ic.REQ_ITEM_APRVL_DEFN) {
            this._log.error("Invalid GlideRecord provided when instanciating sc_ic_ReqItemApprovalDefn");
            throw new sc_ItemCreatorException("Invalid GlideRecord provided when instanciating sc_ic_ReqItemApprovalDefn");
        }
    },

	getApprovers: function() {
		var approvers = {};
		approvers.users = []
		approvers.groups = [];
		
		switch(this._gr.getValue('type')) {
			case sc_ic.USER:
				if (!GlideStringUtil.nil(this._gr.getValue(sc_ic.USER)))
					approvers.users.push(this._gr.getValue(sc_ic.USER));
				break;
			case sc_ic.GROUP:
				if (!GlideStringUtil.nil(this._gr.getValue(sc_ic.GROUP)))
					approvers.groups.push(this._gr.getValue(sc_ic.GROUP));
				break;
			case sc_ic.PREDEFINED_APPROVAL:
				if (!GlideStringUtil.nil(this._gr.getValue(sc_ic.APRVL_TYPE_DEFN))) {
					var aprvlTypeApprovers = sc_ic_Factory.wrap(this._gr[sc_ic.APRVL_TYPE_DEFN].getRefRecord()).getApprovers();
					if (aprvlTypeApprovers.users)
						approvers.users = new ArrayUtil().concat(approvers.users, aprvlTypeApprovers.users);
					if (aprvlTypeApprovers.groups)
						approvers.groups = new ArrayUtil().concat(approvers.groups, aprvlTypeApprovers.groups);
				}
				break;
		}
		
		return approvers;
	},
	
	_copyFields: function(source) {
		this._gr.order = source.order;
		this._gr.type = source.type;
		this._gr.detail = source.detail;
		switch (source.type+"") {
			case sc_ic.USER:
				this._gr[sc_ic.USER] = source[sc_ic.USER];
				break;
			case sc_ic.GROUP:
				this._gr[sc_ic.GROUP] = source[sc_ic.GROUP];
				break;
			case sc_ic.PREDEFINED_APPROVAL:
				this._gr[sc_ic.APRVL_TYPE_DEFN] = source[sc_ic.APRVL_TYPE_DEFN_STAGING][sc_ic.APRVL_TYPE_DEFN];
				break;
		}
				
		return this;
	},
	
	_copyReferences: function(source) {
		//No references to copy for this type of record.  Included so customers can overload in future.
		return this;
	},
	
    type: 'sc_ic_ReqItemApprovalDefn'
});

/**
 * Creates an approval definition for a requested item from a published approval definition
 */
sc_ic_ReqItemApprovalDefn.create = function(reqItem, source) {
	var reqItemApprovalDefnGr = new GlideRecord(sc_ic.REQ_ITEM_APRVL_DEFN);
	reqItemApprovalDefnGr.sc_req_item = reqItem.getUniqueValue();
	
	var reqItemApprovalDefn = sc_ic_Factory.wrap(reqItemApprovalDefnGr);
	reqItemApprovalDefn._copyFields(source);
	reqItemApprovalDefnGr.insert();
	reqItemApprovalDefn._copyReferences(source);
	
	return reqItemApprovalDefnGr;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;nigel.bell&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-01-10 18:21:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;65c02effeb0211003623666cd206fe8b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;sc_ic_ReqItemApprovalDefn&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;6d218d0f6d2620100acb70b35343303c&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_65c02effeb0211003623666cd206fe8b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;chris.henson&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-02-20 11:27:32&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2725&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:04</sys_created_on>
        <sys_id>f8bcc9fa2f331110d8a4d5f62799b6e6</sys_id>
        <sys_name>sc_ic_ReqItemApprovalDefn</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_f8bcc9fa2f331110d8a4d5f62799b6e6</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
