<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4c60f30e9f5220007bb2ed93ee4bcc1c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SLABreachChange&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility methods for updating breached SLA stage values when the Breached Compatibility property is changed.&amp;#13;
&amp;#13;
Called by sys_properties by 'SLA Breach compatibility option changed' business rule, and from 'SLA Engine version changed' via SLAEngineChange&amp;#13;
&lt;/description&gt;
        &lt;name&gt;SLABreachChange&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLABreachChange = Class.create();

// Update active breached SLA records
// when Breach compatibility property is turned on (=true)
// - in_progress,has_breached==true -&gt; breached
SLABreachChange.updateBreachedCompatOn = function() {
	var mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'true');
	mu.addQuery('stage', 'in_progress');
	mu.addQuery('has_breached', 'true');
	
	mu.setValue('stage', 'breached');
	mu.execute();
};

// Update active breached SLA records
// when Breach compatibility property is turned off (=false)
// - breached -&gt; in_progress,has_breached=true
SLABreachChange.updateBreachedCompatOff = function() {
	if (!SLAProperties.isEngineVersion('2011'))
		return; // only supported in 2011
	
	var mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'true');
	mu.addQuery('stage', 'breached');
	
	mu.setValue('stage', 'in_progress');
	mu.setValue('has_breached', 'true');
	mu.execute();
};

// set 'has_breached', on all active SLAs with business_percentage (if schedule), or percentage &gt;= 100
// (called when switching SLA Engine version, usually to 2011)
SLABreachChange.setBreachedFlagOnActive = function() {
	// set 'has_breached' for all SLAs that are breached
	// if breach compatibility is already disabled (from before this method existed), update the stage accordingly too
	
	// - for SLAs with schedule, business_percentage &gt;= 100
	var mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'true');
	mu.addNotNullQuery('schedule');
	mu.addQuery('business_percentage', '&gt;=', '100');
	// (just in case this has been previously disabled)
	if (SLAProperties.isBreachCompatOff() &amp;&amp; SLAProperties.isEngineVersion('2011'))
		mu.setValue('stage', 'in_progress');
	mu.setValue('has_breached', 'true');
	mu.execute();
	
	// - for SLAs with no schedule, percentage &gt;= 100
	mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'true');
	mu.addNullQuery('schedule');
	mu.addQuery('percentage', '&gt;=', '100');
	if (SLAProperties.isBreachCompatOff() &amp;&amp; SLAProperties.isEngineVersion('2011'))
		mu.setValue('stage', 'in_progress');
	mu.setValue('has_breached', 'true');
	mu.execute();
};

// Set 'has_breached' accordingly, for all inactive SLAs
// - Call this manually, to update the 'has_breached' flag on existing, closed, Task SLA records that had breached.
//   It will also update their stage values accordingly, to reflect current breach compatibility settings.
SLABreachChange.setBreachedFlagOnInactive = function() {
	// - for SLAs with schedule, business_percentage &gt;= 100
	var mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'false');
	mu.addNotNullQuery('schedule');
	mu.addQuery('business_percentage', '&gt;=', '100');
	if (SLAProperties.isBreachCompatOn())
		mu.setValue('stage', 'breached');
	else
		mu.setValue('stage', 'completed');
	mu.setValue('has_breached', 'true');
	mu.execute();
	
	// - for SLAs with no schedule, percentage &gt;= 100
	mu = new SLABreachChange().multipleUpdateSLA();
	mu.addQuery('active', 'false');
	mu.addNullQuery('schedule');
	mu.addQuery('percentage', '&gt;=', '100');
	if (SLAProperties.isBreachCompatOn())
		mu.setValue('stage', 'breached');
	else
		mu.setValue('stage', 'completed');
	mu.setValue('has_breached', 'true');
	mu.execute();
};

SLABreachChange.prototype = {
	initialize : function() {
	},
	
	multipleUpdateSLA: function() {
		return new GlideMultipleUpdate('task_sla');
	},
	
	type: 'SLABreachChange'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;james.grinter&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2012-05-31 11:21:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4c60f30e9f5220007bb2ed93ee4bcc1c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLABreachChange&lt;/sys_name&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;367209c76d6620100acb70b35343304f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4c60f30e9f5220007bb2ed93ee4bcc1c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2015-11-17 08:57:23&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3472&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:21</sys_created_on>
        <sys_id>d68c4dba2f331110d8a4d5f62799b688</sys_id>
        <sys_name>SLABreachChange</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_d68c4dba2f331110d8a4d5f62799b688</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
