<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>63f97a9d3b223200956c47b334efc455</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MLRequestSchedule&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;MLRequestSchedule&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MLRequestSchedule = Class.create();
MLRequestSchedule.prototype = {
	initialize: function() {
		this.solutionDefReference = "ml_capability_definition";
	},
		deleteExistingCapabilityTrainingRequestSchedule: function(sysId) {
			this.deleteExistingTrainingRequestSchedule(sysId, {'solutionDefField':this.solutionDefReference});
		},
	
		deleteExistingTrainingRequestSchedule: function(sysId, options) {
			var solutionDefField = (options &amp;&amp; options['solutionDefField']) || "solution_definition";
			var solution = new GlideRecord("ml_training_request_schedule");
			solution.addQuery(solutionDefField, sysId);
			solution.deleteMultiple();
		},
		
		deleteExistingUpdateRequestSchedule: function(sysId) {
			var solution = new GlideRecord("sysauto_script");
            solution.addQuery("name", sysId);
            solution.deleteMultiple();
        },
		
		insertCapabilityTrainingRequestSchedule: function(sysId, label, trainingFrequency){
			this.insertTrainingRequestSchedule(sysId, label, trainingFrequency, {'solutionDefField':this.solutionDefReference});
		},
	
		insertTrainingRequestSchedule: function(sysId, label, trainingFrequency, options) {
			var solutionDefField = (options &amp;&amp; options['solutionDefField']) || "solution_definition";
			var skipFirstRun = (options &amp;&amp; JSUtil.toBoolean(options['skipFirstRun'])) || false;
			var solution = new GlideRecord("ml_training_request_schedule");
			solution.initialize();
			solution.setValue("name", label);
			solution.setValue(solutionDefField, sysId);
			if (trainingFrequency === "run_once") {
				solution.setValue("run_type", "once");
			} else {
				var days = trainingFrequency.split('_')[1];
				var runPeriod = days + " 00:00:00";
				solution.setValue("run_type", "periodically");
				solution.setValue("run_period", runPeriod);
				if (skipFirstRun) {
					var nextRunTime = new GlideDateTime();
					nextRunTime.addDaysLocalTime(days);
					solution.setValue("run_start", nextRunTime);
				}
			}
			solution.insert();
		},
		
		insertRunonceUpdateRequestSchedule: function(sysId, name) {
            var solution = new GlideRecord("sysauto_script");
            solution.initialize();
            solution.setValue("name", sysId);
            solution.setValue("script","new global.MLUpdater().update(\""+name+"\");");
            solution.setValue("run_type", "once");
            solution.insert();
        },
	
		insertUpdateRequestSchedule: function(sysId, name, updateFrequency) {
            var solution = new GlideRecord("sysauto_script");
            solution.initialize();
            solution.setValue("name", sysId);
            solution.setValue("script","new global.MLUpdater().update(\""+name+"\");");
            solution.setValue("run_type", "periodically");
			solution.setValue("run_as", "88aad6c5c73003005f1b78d48b9763a5");
            var intervaltype = updateFrequency.split('_')[2];
			if (intervaltype === "update") {
				this.deleteExistingUpdateRequestSchedule(sysId);
			} else {
				if (intervaltype === "minute" || intervaltype === "minutes") {
					var minutes = "00:" + updateFrequency.split('_')[1] + ":00";
					solution.setValue("run_period", minutes);
				} else if (intervaltype === "hour" || intervaltype === "hours") {
					var hours = updateFrequency.split('_')[1] + ":00:00";
					solution.setValue("run_period", hours);
				} else if (intervaltype === "day" || intervaltype === "days") {
					var days = updateFrequency.split('_')[1] + " 00:00:00";
					solution.setValue("run_period", days);
				} 
				solution.insert();
			}
        },
		
		isCapabilitySolutionCurrentlyTraining: function(solutionDefinitionId) {
			return this.isSolutionCurrentlyTraining(solutionDefinitionId,{'solutionDefField':this.solutionDefReference});
		},
	
		isSolutionCurrentlyTraining: function(solutionDefintionId, options) {
			if (JSUtil.nil(solutionDefintionId)) {
				return false;
			}
			var solutionDefField = (options &amp;&amp; options['solutionDefField']) || "solution_definition";
			var gr = new GlideRecord('ml_solution');
			gr.addQuery(solutionDefField, solutionDefintionId);
			gr.orderByDesc('sys_created_on');
			gr.query();
			if (gr.next() &amp;&amp;
			(gr.state == 'waiting_for_training' ||
			gr.state == 'training_request_received' ||
			gr.state == 'fetching_files_for_training' ||
			gr.state == 'training_solution' ||
			gr.state == 'preparing_data' ||
			gr.state == 'uploading_solution') &amp;&amp;
			gs.getProperty('glide.platform_ml.override_training_lock') == 'false') {
				in_training = true;
			}
			else
				in_training = false;
			
			return in_training;
		},
		
		type: 'MLRequestSchedule'
	};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-05-04 23:26:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;63f97a9d3b223200956c47b334efc455&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MLRequestSchedule&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;fccdbc4b6d2220100acb70b3534330f2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_63f97a9d3b223200956c47b334efc455&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-10 19:15:44&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;4606&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:28:01</sys_created_on>
        <sys_id>44bc89fa2f331110d8a4d5f62799b6b7</sys_id>
        <sys_name>MLRequestSchedule</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_44bc89fa2f331110d8a4d5f62799b6b7</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
