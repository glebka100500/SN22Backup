<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0e84882253220110af71ddeeff7b12a9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionTaskProcessingStage&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AutoResolutionTaskProcessingStage&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionTaskProcessingStage = Class.create();
AutoResolutionTaskProcessingStage.prototype = {

	/**
	 * @typedef {Object} StageResponse
	 * @property {boolean} should_proceed
	 * @property {string} reason Why the flow should not proceed
	 * @property {Object} contextFieldValueMap - Map of field + values to be updated on the context
	 */

	/**
	 * Initializes all the values need for the task processing stages
	 *
	 * @param {GlideRecord} contextGr
	 * @param {GlideRecord} configGr
	 * @param {GlideRecord} taskGr
	 * @param {string} languageCode
	 */
	initialize: function(contextGr, configGr, taskGr, languageCode) {
		this.contextGr = contextGr;
		if (!gs.nil(contextGr))
			this.contextId = contextGr.getUniqueValue();

		this.configGr = configGr;
		if (!gs.nil(configGr))
			this.configId = configGr.getUniqueValue();

		this.taskGr = taskGr;
		if (!gs.nil(taskGr))
			this.taskId = taskGr.getUniqueValue();

		this.userId = this.taskGr.getValue(this.configGr.getValue('notification_user'));

		this.languageCode = languageCode;

		this.response = {
			should_proceed: true,
			contextFieldValueMap: {},
		};
	},

	/**
	 * Get the state value to be set on sys_cs_auto_resolution_context
	 *
	 * @return {string} state value for the Task Processing Stage
	 */
	getStateValue: function() {
		throw 'getstateValue() must be implemented by the child class';
	},

	/**
	 * Execute the task processing stage
	 *
	 * @param {object} contextFieldValueMap
	 * @return {StageResponse} - Response object from stage execution
	 */
	execute: function(contextFieldValueMap) {
		throw 'execute() must be implemented by the child class';
	},

	/**
	 * Initializes the contextFieldValue Map and creates a logger
	 *
	 * @param {Object} contextFieldValueMap
	 * @param {string} stageName name for the logger
	 */
	prepare: function(contextFieldValueMap, stageName) {
		this.response.contextFieldValueMap = contextFieldValueMap;
		this.LOGGER = new AutoResolutionLoggingUtils()
			.withName(stageName)
			.withTaskValues(this.taskId, this.taskGr.getTableName())
			.withLanguage(this.languageCode)
			.withContextId(this.contextId)
			.withConfiguration(this.configId)
			.createLogger();
	},

	/**
	 * Sets a name-value pair in response.contextFieldValueMap
	 * @param {string} name
	 * @param {object} value
	 */
	setContextValue: function(name, value) {
		this.response.contextFieldValueMap[name] = value;
	},

	/**
	 * Sets or appends to response.contextFieldValueMap.reason
	 * @param {string} reason
	 */
	setContextReason: function(reason) {
		if (gs.nil(this.response.contextFieldValueMap.reason))
			this.response.contextFieldValueMap.reason = reason;
		else
			this.response.contextFieldValueMap.reason = reason + ',\n' + this.response.contextFieldValueMap.reason;
	},

	/**
	 * Set response.should_proceed to false;
	 */
	setError: function(reason) {
		this.response.should_proceed = false;
		if (!gs.nil(reason))
			this.setContextReason(reason);
	},

	type: 'AutoResolutionTaskProcessingStage'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-01 21:13:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0e84882253220110af71ddeeff7b12a9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionTaskProcessingStage&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;85493a472f800110d8a4d5f62799b6a9&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0e84882253220110af71ddeeff7b12a9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-10 22:55:14&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;3008&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:25:58</sys_created_on>
        <sys_id>393c817a2f331110d8a4d5f62799b6a7</sys_id>
        <sys_name>AutoResolutionTaskProcessingStage</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_393c817a2f331110d8a4d5f62799b6a7</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
