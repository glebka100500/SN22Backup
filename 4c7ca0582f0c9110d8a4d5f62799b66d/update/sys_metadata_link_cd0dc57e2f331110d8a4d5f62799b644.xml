<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8d73fd777372f0104a905ee515f6a7d7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.InteractionRelationshipUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Provides a way to infer parent interaction from the current transaction's request header, then insert the appropriate interaction_related_record if necessary.&lt;/description&gt;
        &lt;name&gt;InteractionRelationshipUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InteractionRelationshipUtil = Class.create();
InteractionRelationshipUtil.prototype = {
	
	TABLES: {
		'INTERACTION': 'interaction'
	},
	
	initialize: function() {
	},
	
	linkToParentInteraction: function(current, operation) {
      var parentInteractionSysId = this.getParentInteractionSysId();
      if (parentInteractionSysId &amp;&amp; parentInteractionSysId != '') {
          var interactionGR = new GlideRecord("interaction_related_record");
          interactionGR.initialize();
          interactionGR.interaction = parentInteractionSysId;
          interactionGR.operation = operation;
          interactionGR.document_table = current.getRecordClassName();
          interactionGR.document_id = current.getUniqueValue();
          interactionGR.insert();
      }
	},

	/**
	 * Copy Attachments from an interaction GlideRecord to another GlideRecord
	 * if the current settings allow for it. If an attachment with the source
	 * file_name is already on the targetGr, skip it (do not duplicate).
	 * 
	 * @param srcGr        {GlideRecord}
	 * @param targetGr     {GlideRecord}  
	 */
	copyAttachments: function(srcGr, targetGr) {
		if(!srcGr.isValidRecord())
			return;

		var srcTable = srcGr.getValue('sys_class_name');
		var targetTable = targetGr.getTableName();
		var targetId = targetGr.getValue('sys_id');

		if(srcTable != 'interaction')
			return;
		if (gs.nil(targetId)) {
			// target not ready yet; store in client data and use to
			// copy attachments and set work notes on display
			gs.getSession().putClientData('parent_interaction', srcGr.getValue("sys_id"));
			return;
		}
		if (!(new global.VAGlobalUtil().isAttachmentCopyEnabled(targetTable)))
			return;

		if (!srcGr.canRead()) {
			gs.warn('copyAttachments: User is not authorized to perform this action');
			return;
		}

		var gr = new GlideRecord('sys_attachment');
		gr.addQuery('table_name', srcTable);
		gr.addQuery('table_sys_id', srcGr.getValue('sys_id'));
		gr.query();
		var srcFiles = {};
		while (gr.next()) {
			var key = gr.getValue('file_name');
			srcFiles[key] = gr.getValue('sys_id');
		}
		var gr1 = new GlideRecord('sys_attachment');
		gr1.addQuery('table_name', targetTable);
		gr1.addQuery('table_sys_id', targetId);
		gr1.query();
		while (gr1.next()) {
			delete srcFiles[gr1.getValue('file_name')];
		}
		for (var key1 in srcFiles) {
			sn_cs.VASystemObject.copyAttachment(srcFiles[key1], targetTable, targetId);
		}
	},
	
	/**
	 * Utility to fetch sys_id of parent interaction record by using URL in request
	 */
	getParentInteractionSysId: function(){
		var txn = GlideTransaction.get();
		if (!txn)
			return;
		var request = txn.getRequest();
		if (!request)
			return;
		var referer = request.getHeader("Referer");
		if (GlideStringUtil.nil(referer))
			return;
		var matches = referer.match(/\/(agent|sow)\/(chat|record\/interaction)\/([0-9a-f]{32})/);
		if (!matches || matches.length &lt; 4)
			return;
		return matches[3];
	},
		
    type: 'InteractionRelationshipUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-01 16:26:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8d73fd777372f0104a905ee515f6a7d7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;66&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InteractionRelationshipUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Interactions Management" source="com.glide.interaction"&gt;c6f449c36de620100acb70b35343307e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8d73fd777372f0104a905ee515f6a7d7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-10 14:05:48&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2982&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:29:27</sys_created_on>
        <sys_id>cd0dc57e2f331110d8a4d5f62799b644</sys_id>
        <sys_name>InteractionRelationshipUtil</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_cd0dc57e2f331110d8a4d5f62799b644</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
