<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3a189a5187020300635fe54ea6cb0bc1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdResetHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Generic helper methods related to password reset&lt;/description&gt;
        &lt;name&gt;PwdResetHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdResetHelper = Class.create();

// @return {boolean} specifying if the new password is strong or not
PwdResetHelper.validateNewPasswordComplexity = function(processId, newPasswd) {
    var credMgr = new SNC.PwdCredentialStoreManager();
    var credId = credMgr.getCredentialStoreIdByProcessId(processId);

    var credGr = new GlideRecord('pwd_cred_store');
    if (credGr.get(credId)) {
        var pwdRule = credGr.getValue('pwd_rule');
        var pwdRuleCall = pwdRule + '\nisPasswordValid(password);';
        credGr.setValue('pwd_rule', pwdRuleCall);
        var vars = {
            'password': newPasswd
        };

        var evaluator = new GlideScopedEvaluator();
        var pwdValid = evaluator.evaluateScript(credGr, 'pwd_rule', vars);
        if (pwdValid) {
            return true;
        }
    }
    return false;
};

/**
	Execute the post processor script include
	@param {String} requestId
	@param {String} processId
	@param {boolean} wfSuccess
	@return {"status":, "message":, "value":}
*/
PwdResetHelper.executePostProcessorScript = function(requestId, processId, wfSuccess) {

    if (gs.nil(processId) || gs.nil(requestId))
        return {
            status: 'failure',
            message: 'Either process id or request id is null',
            value: ''
        };

    // If wfSuccess is null, we will consider it as false
    wfSuccess = !gs.nil(wfSuccess);

    var LOG_ID = "[PwdAjaxWFRequestProcessor:runPostProcessor] ";
    var trackingMgr = new SNC.PwdTrackingManager();

    var gr = new GlideRecord('pwd_process');
    if (!gr.get(processId)) {
        var errorMsg = "Cannot load the process: " + processId;
        trackingMgr.createActivity(PwdConstants.TYPE_WARNING, PwdConstants.STAGE_RESET, errorMsg, requestId);
        var responseErrorMsg = gs.getMessage("{0} Cannot load the process: {1}", [LOG_ID, processId]);
        return {
            status: 'failure',
            message: responseErrorMsg,
            value: ''
        };
    }

    if (!gs.nil(gr.post_processor)) {
        var postProcessorId = gr.post_processor;
        var postProcessorName = gr.post_processor.name;

        try {
            // Invoke the post process script include selected on the process    
            // published interface for the password_reset.extension.post_rest_script extensions (see pwd_extension_type) is:
            //
            // @param params.resetRequestId The sys-id of the current password-reset request (table: pwd_reset_request)
            // @param params.wfSuccess      A flag indicating if workflow completed sucessfully. True if (and only if) sucessful.
            // @return no return value
            var params = new SNC.PwdExtensionScriptParameter();
            params.resetRequestId = requestId;
            params.wfSuccess = wfSuccess;
            var postResetExtension = new SNC.PwdExtensionScript(postProcessorId);

            var infoMsg = "Starting post-processor script: " + postProcessorName;
            trackingMgr.createActivity(PwdConstants.TYPE_INFO, PwdConstants.STAGE_RESET, infoMsg, requestId);
            postResetExtension.process(params);
        } catch (error) {
            var exceptionMsg = gs.getMessage("Error while executing post-processor script: {0}. Error:{1}", [postProcessorName, error]);
            trackingMgr.createActivity(PwdConstants.TYPE_INFO, PwdConstants.STAGE_RESET, exceptionMsg, requestId);
            var responseExceptionMsg = gs.getMessage("{0} Error while executing post-processor script {1}. Error: {2}",
                [LOG_ID, postProcessorName, error]);
            return {
                status: 'failure',
                message: responseExceptionMsg,
                value: ''
            };
        }

        var successMsg = gs.getMessage("Completed post-processor script: {0}", postProcessorName);
        trackingMgr.createActivity(PwdConstants.TYPE_INFO, PwdConstants.STAGE_RESET, successMsg, requestId);
        var responseSuccessMsg = gs.getMessage("{0} Completed post-processor script: {1}", [LOG_ID, postProcessorName]);
        return {
            status: 'success',
            message: responseSuccessMsg,
            value: ''
        };
    }
};
//Check if midserver is running.
PwdResetHelper.IsMidRunning = function(procId) {

    // Check if midserver is runnign if process uses Active directory
    var procGr = new GlideRecord('pwd_process');
    procGr.get(procId);
    var credStoreId = procGr.getValue('cred_store');
    var pwdCredStor = new GlideRecord('pwd_cred_store');
    pwdCredStor.get(credStoreId);
    var credStoreType = pwdCredStor.getValue('type');

    //Active Directory credential store type.
    var pwdCredStoreType = '94d5b6debf440100710071a7bf0739d9';
    var midServerRunning = true;

    if (credStoreType == pwdCredStoreType) {
        midServerRunning = false;
        var eccAgent = new GlideRecord('ecc_agent');
        eccAgent.query();
        while (eccAgent.next()) {
            var agentId = eccAgent.getUniqueValue();
            var agentCapability = new GlideRecord('ecc_agent_capability_m2m');
            agentCapability.addQuery('agent', agentId);
            var reqCapabilities = agentCapability.addQuery('capability', '427709a60a0006bc7d2904e99132532d');
            reqCapabilities.addOrCondition('capability', 'eeab973fd7802200bdbaee5b5e610381');
            agentCapability.query();
            if (agentCapability.hasNext()) {
                var midServerStatus = eccAgent.getValue('status');
                var midServervalidated = eccAgent.getValue('validated');
                if ((midServerStatus == 'Up') &amp;&amp; (midServervalidated == 'true')) {
                    midServerRunning = true;
                    break;
                }
            }
        }
    }
    return midServerRunning;
};

//check if the cred store type record has test connection subflow mapping
PwdResetHelper.connectionSubflowMapped = function(credStoreTypeSysId) {
    var gr = new GlideRecord("pwd_cred_store_type");
    gr.get(credStoreTypeSysId);

    return (!gr.use_flow || (gr.use_flow &amp;&amp; !gs.nil(gr.conn_test_flow)));
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;shravan.pai&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-10-25 20:37:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3a189a5187020300635fe54ea6cb0bc1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdResetHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;a54385836da620100acb70b3534330a5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3a189a5187020300635fe54ea6cb0bc1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-16 18:25:27&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;6124&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:26:56</sys_created_on>
        <sys_id>0c7c85ba2f331110d8a4d5f62799b6dd</sys_id>
        <sys_name>PwdResetHelper</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_0c7c85ba2f331110d8a4d5f62799b6dd</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
