<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>61bc20879fc02200bb157b9ac42e700b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OauthRevokeTokenAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;AJAX API to revoke access token and refresh token. When a access token is invalidated, the corresponding refresh token is also invalidated.&lt;/description&gt;
        &lt;name&gt;OauthRevokeTokenAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var OauthRevokeTokenAjax = Class.create();
OauthRevokeTokenAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	
	proceedWithRevokeFromForm: function() {
		var objSysId = this.getParameter('sysparm_obj_id');
		var tblName = this.getParameter('sysparm_table_name');
		var disableWf = this.getParameter('sysparm_disable_wf');
		
		var gRecord = new GlideRecord(tblName);
		if(JSUtil.notNil(disableWf) &amp;&amp; disableWf == 'true') {
			gRecord.setWorkflow(false);
		}
		if(gRecord.get(objSysId)) {
			this._expireToken(gRecord);
			this._revokeRefreshToken(gRecord.getValue('peer'), gRecord.getValue('user'));
			
		}
		return true;
	},
	
	proceedWithRevokeFromListContextMenu: function() {
		var objSysId = this.getParameter('sysparm_sys_id');
		var tblName = this.getParameter('sysparm_table_name');
		var disableWf = this.getParameter('sysparm_disable_wf');
		
		
		var gRecord = new GlideRecord(tblName);
		if(JSUtil.notNil(disableWf) &amp;&amp; disableWf == 'true') {
			gRecord.setWorkflow(false);
		}
		if(gRecord.get(objSysId)) {
			this._expireToken(gRecord);
			this._revokeRefreshToken(gRecord.getValue('peer'), gRecord.getValue('user'));
			
		}
		return true;
	},
	
	proceedWithRevokeFromList: function() {
		var objSysIds = this.getParameter('sysparm_obj_list');
		var tblName = this.getParameter('sysparm_table_name');
		
		var objList = objSysIds.split(',');
		
		for(var i=0; i&lt;objList.length; i++) {
			
			if(objList[i] == null || objList[i] == '') {
				continue;
			}
			var gr = new GlideRecord(tblName);
			gr.get('sys_id', objList[i]);
			this._expireToken(gr);
			this._revokeRefreshToken(gr.getValue('peer'), gr.getValue('user'));
		}
		return true;
	},
	
	_revokeRefreshToken: function(peer, user) {
		var gr = new GlideRecord('oauth_credential');
		gr.addQuery('peer', peer);
		gr.addQuery('user', user);
		gr.addQuery('type', 'refresh_token');
		gr.query();
		while (gr.next())
			this._expireToken(gr);
	},
	
	_expireToken: function(grCred) {
		//A user can revoke token if either the token belongs to him/her or he/she has admin role.
		if(this._canExpire(grCred)){
			var milliSeconds = new Date().getTime();
			var expires = new GlideDateTime(new Date(milliSeconds));
			grCred.setValue('expires', expires);
			grCred.update();
		}
	},
	
	_canExpire: function(grCred) {
			return gs.getSession().isLoggedIn() 
				&amp;&amp; ((GlideStringUtil.notNil(gs.getUserID()) 
					 &amp;&amp; GlideStringUtil.notNil(grCred.user) &amp;&amp; gs.getUserID() == grCred.user)
					|| gs.getUser().hasRole("admin"));
	},
	
	toString: function() { return 'OauthRevokeTokenAjax'; }
	});
	]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-06-20 20:48:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;61bc20879fc02200bb157b9ac42e700b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OauthRevokeTokenAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="OAuth 2.0" source="com.snc.platform.security.oauth"&gt;3c4dbc476d2220100acb70b353433044&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_61bc20879fc02200bb157b9ac42e700b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-07-18 19:13:16&lt;/sys_updated_on&gt;
        &lt;u_script_length&gt;2575&lt;/u_script_length&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-19 20:27:57</sys_created_on>
        <sys_id>36ac49fa2f331110d8a4d5f62799b60b</sys_id>
        <sys_name>OauthRevokeTokenAjax</sys_name>
        <sys_package display_value="Integrations 2022" source="x_644088_integrati">4c7ca0582f0c9110d8a4d5f62799b66d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Integrations 2022">4c7ca0582f0c9110d8a4d5f62799b66d</sys_scope>
        <sys_update_name>sys_metadata_link_36ac49fa2f331110d8a4d5f62799b60b</sys_update_name>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
